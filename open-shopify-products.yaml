openapi: 3.0.1
info:
  title: Products
  description: Products
  version: '2023-04'
servers:
  - url: 'https://{store_name}.myshopify.com/admin/api/{api_version}'
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
      api_version:
        default: '2023-04'
        description: The api version.
  - url: 'https://{store_name}.myshopify.com/admin'
    description: Some endpoints do not use the standard routing. This is an alternate.
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
paths:
  /collects.json:
    post:
      tags:
        - Collect
      operationId: AddProductToCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectItem'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CollectItem'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
    get:
      tags:
        - Collect
      operationId: ListCollects
      parameters:
        - name: fields
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectList'
  '/collects/{collect_id}.json':
    delete:
      tags:
        - Collect
      operationId: DeleteProductFromCollection
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
    get:
      tags:
        - Collect
      operationId: GetCollect
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
  /collects/count.json:
    get:
      tags:
        - Collect
      operationId: CountCollects
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/collections/{collection_id}.json':
    get:
      tags:
        - Collection
      operationId: GetCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItem'
  '/collections/{collection_id}/products.json':
    get:
      tags:
        - Collection
      operationId: ListProductsBelongingToCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
  /custom_collections.json:
    get:
      tags:
        - CustomCollection
      operationId: ListCustomCollections
      parameters:
        - name: fields
          in: query
          schema:
            type: string
        - name: handle
          in: query
          schema:
            type: string
        - name: ids
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: product_id
          in: query
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionList'
    post:
      tags:
        - CustomCollection
      operationId: CreateCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
  /custom_collections/count.json:
    get:
      tags:
        - CustomCollection
      operationId: CountCustomCollections
      parameters:
        - name: product_id
          in: query
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/custom_collections/{custom_collection_id}.json':
    get:
      tags:
        - CustomCollection
      operationId: GetCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
    put:
      tags:
        - CustomCollection
      operationId: UpdateCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
    delete:
      tags:
        - CustomCollection
      operationId: DeleteCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /products.json:
    get:
      tags:
        - Product
      operationId: ListProducts
      parameters:
        - name: collection_id
          in: query
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          schema:
            type: string
        - name: handle
          in: query
          schema:
            type: string
        - name: ids
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: presentment_currencies
          in: query
          schema:
            type: string
        - name: product_type
          in: query
          schema:
            type: string
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
    post:
      tags:
        - Product
      operationId: CreateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
  /products/count.json:
    get:
      tags:
        - Product
      operationId: CountProducts
      parameters:
        - name: collection_id
          in: query
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: product_type
          in: query
          schema:
            type: string
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/products/{product_id}.json':
    get:
      tags:
        - Product
      operationId: GetProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
    put:
      tags:
        - Product
      operationId: UpdateProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
    delete:
      tags:
        - Product
      operationId: DeleteProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/products/{product_id}/images.json':
    get:
      tags:
        - ProductImage
      operationId: ListProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageList'
    post:
      tags:
        - ProductImage
      operationId: CreateProductImage
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
  '/products/{product_id}/images/count.json':
    get:
      tags:
        - ProductImage
      operationId: CountProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/products/{product_id}/images/{image_id}.json':
    get:
      tags:
        - ProductImage
      operationId: GetProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
    put:
      tags:
        - ProductImage
      operationId: UpdateProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
    delete:
      tags:
        - ProductImage
      operationId: DeleteProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/products/{product_id}/variants.json':
    get:
      tags:
        - ProductVariant
      operationId: ListProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: presentment_currencies
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantList'
    post:
      tags:
        - ProductVariant
      operationId: CreateProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
  '/products/{product_id}/variants/count.json':
    get:
      tags:
        - ProductVariant
      operationId: CountProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/variants/{variant_id}.json':
    get:
      tags:
        - ProductVariant
      operationId: GetProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
    put:
      tags:
        - ProductVariant
      operationId: UpdateProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
  '/products/{product_id}/variants/{variant_id}.json':
    delete:
      tags:
        - ProductVariant
      operationId: DeleteProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /smart_collections.json:
    get:
      tags:
        - SmartCollection
      operationId: ListSmartCollections
      parameters:
        - name: fields
          in: query
          schema:
            type: string
        - name: handle
          in: query
          schema:
            type: string
        - name: ids
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: product_id
          in: query
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionList'
    post:
      tags:
        - SmartCollection
      operationId: CreateSmartCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
  /smart_collections/count.json:
    get:
      tags:
        - SmartCollection
      operationId: CountSmartCollections
      parameters:
        - name: product_id
          in: query
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: updated_at_max
          in: query
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/smart_collections/{smart_collection_id}.json':
    get:
      tags:
        - SmartCollection
      operationId: GetSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
    put:
      tags:
        - SmartCollection
      operationId: UpdateSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
    delete:
      tags:
        - SmartCollection
      operationId: DeleteSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/smart_collections/{smart_collection_id}/order.json':
    put:
      tags:
        - SmartCollection
      operationId: UpdateOrderingTypeOfProductsInSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderingTypeOfProductsInSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateOrderingTypeOfProductsInSmartCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
components:
  schemas:
    Collect:
      required:
        - id
      type: object
      properties:
        collection_id:
          type: integer
          description: The ID of the custom collection containing the product.
          format: int64
          nullable: true
        position:
          type: integer
          description: The position of this product in a manually sorted custom collection. The first position is 1. This value is applied only when the custom collection is sorted manually.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product in the custom collection.
          format: int64
          nullable: true
        sort_value:
          type: string
          description: This is the same value as `position` but padded with leading zeroes to make it alphanumeric-sortable. This value is applied only when the custom collection is sorted manually.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    CollectItem:
      required:
        - collect
      type: object
      properties:
        collect:
          $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    CollectList:
      required:
        - collects
      type: object
      properties:
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    Collection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'A description of the collection, complete with HTML markup. Many templates display this on their collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-readable string for the collection automatically generated from its title. This is used in themes by the Liquid templating language to refer to the collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CollectionImage'
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: In the order set manually by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). \r\n\r\n</strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the collection. (limit: 255 characters)'
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        collection_type:
          type: string
          nullable: true
        disjunctive:
          type: boolean
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/CollectionRules'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    CollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a collection returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: The source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: The alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The time and date (ISO 8601 format) when the image was added to the collection.
          format: date-time
          nullable: true
        width:
          type: integer
          description: The width of the image in pixels.
          format: int32
        height:
          type: integer
          description: The height of the image in pixels.
          format: int32
      additionalProperties: { }
    CollectionItem:
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
      additionalProperties: { }
    CollectionRules:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/RuleRelation'
        condition:
          type: string
          description: 'Select products for a collection using a condition. Conditions are either strings or numbers, depending on the relation.'
          nullable: true
        column:
          $ref: '#/components/schemas/RuleColumn'
      additionalProperties: { }
      description: An entity representing a Shopify Collection Rule.
    CountItem:
      type: object
      properties:
        count:
          type: integer
          format: int32
      additionalProperties: { }
    CreateCustomCollection:
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). \r\n\r\n</strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateCustomCollectionRequest:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CreateCustomCollection'
      additionalProperties: false
    CreateProduct:
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/CreateProductImage'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product isn't published to the Point of Sale channel. \r\n*   `global`: The product is published to the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/CreateProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateProductImage:
      type: object
      properties:
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [Liquid filters](/api/liquid/filters/image_url) that you can use to retrieve modified copies of the image.'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        alt:
          type: string
          nullable: true
        filename:
          type: string
          nullable: true
        attachment:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateProductImageRequest:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/CreateProductImage'
      additionalProperties: false
    CreateProductRequest:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/CreateProduct'
      additionalProperties: false
    CreateProductVariant:
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        fulfillment_service:
          type: string
          description: "The handle of a fulfillment service that stocks a product variant. \r\n\r\n This is the handle of a third-party fulfillment service if the following conditions are met: 1. The product variant is stocked by a single fulfillment service. 2. The [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`. 3. The fulfillment service [hasn't opted into SKU sharing](/changelog/fulfillment-service-sku-sharing). If the conditions aren't met, then this is `manual`. \r\n\r\n The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-rest/latest/resources/product-variant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [InventoryLevel](/api/admin-rest/latest/resources/inventorylevel) resource if you need to determine where a product variant is stocked. \r\n\r\n If you previously set this field, then we recommend that you instead [connect an inventory item to a location](/api/admin-rest/latest/resources/inventorylevel#post-inventory-levels-connect). Each [Location](/api/admin-rest/latest/resources/location) is associated with a single [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice). The value of this field after setting it will be as described above. \r\n\r\n If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available. \r\n\r\n Learn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states)."
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock. \r\n\r\n Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
      additionalProperties: false
    CreateProductVariantRequest:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/CreateProductVariant'
      additionalProperties: false
    CreateSmartCollection:
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          $ref: '#/components/schemas/SmartCollectionPublishedScope'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          $ref: '#/components/schemas/SmartCollectionSortOrder'
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateSmartCollectionRequest:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/CreateSmartCollection'
      additionalProperties: false
    CustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). \r\n\r\n</strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    CustomCollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a shop's theme returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: Source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
      additionalProperties: { }
      description: Represents the image for a OpenShopify.Admin.Builder.Models.CustomCollection
    CustomCollectionItem:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    CustomCollectionList:
      required:
        - custom_collections
      type: object
      properties:
        custom_collections:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    Metafield:
      required:
        - id
      type: object
      properties:
        description:
          type: string
          description: The description of the metafield.
          nullable: true
        key:
          type: string
          description: "The unique identifier for a metafield within its namespace.   \r\n Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters."
          nullable: true
        namespace:
          type: string
          description: "The container for a group of metafields that the metafield is or will be associated with. Used in tandem with `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.   \r\n Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters."
          nullable: true
        owner_id:
          type: integer
          description: The unique ID of the resource that the metafield is attached to.
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: The type of resource that the metafield is attached to.
          nullable: true
        value:
          nullable: true
        type:
          $ref: '#/components/schemas/MetafieldType'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    MetafieldType:
      enum:
        - boolean
        - color
        - date
        - date_time
        - dimension
        - file_reference
        - json
        - multi_line_text_field
        - number_decimal
        - number_integer
        - page_reference
        - product_reference
        - rating
        - single_line_text_field
        - variant_reference
        - volume
        - weight
      type: string
      additionalProperties: { }
    PresentmentPrice:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/Price'
        compare_at_price:
          $ref: '#/components/schemas/Price'
      additionalProperties: { }
    Price:
      type: object
      properties:
        currency_code:
          type: string
          description: The three-letter code (ISO 4217 format) for currency.
          nullable: true
        amount:
          type: number
          description: The amount in the currency.
          format: decimal
          nullable: true
      additionalProperties: { }
    Product:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product isn't published to the Point of Sale channel. \r\n*   `global`: The product is published to the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/ProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ProductImage:
      required:
        - id
      type: object
      properties:
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [Liquid filters](/api/liquid/filters/image_url) that you can use to retrieve modified copies of the image.'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        alt:
          type: string
          nullable: true
        filename:
          type: string
          nullable: true
        attachment:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ProductImageItem:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ProductImage'
      additionalProperties: { }
    ProductImageList:
      required:
        - images
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
      additionalProperties: { }
    ProductItem:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductList:
      required:
        - products
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductOption:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The object's unique id.
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        name:
          type: string
          description: The name of the option.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        values:
          type: array
          items:
            type: string
          description: The values for the options.
          nullable: true
      additionalProperties: { }
    ProductVariant:
      required:
        - id
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        fulfillment_service:
          type: string
          description: "The handle of a fulfillment service that stocks a product variant. \r\n\r\n This is the handle of a third-party fulfillment service if the following conditions are met: 1. The product variant is stocked by a single fulfillment service. 2. The [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`. 3. The fulfillment service [hasn't opted into SKU sharing](/changelog/fulfillment-service-sku-sharing). If the conditions aren't met, then this is `manual`. \r\n\r\n The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-rest/latest/resources/product-variant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [InventoryLevel](/api/admin-rest/latest/resources/inventorylevel) resource if you need to determine where a product variant is stocked. \r\n\r\n If you previously set this field, then we recommend that you instead [connect an inventory item to a location](/api/admin-rest/latest/resources/inventorylevel#post-inventory-levels-connect). Each [Location](/api/admin-rest/latest/resources/location) is associated with a single [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice). The value of this field after setting it will be as described above. \r\n\r\n If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available. \r\n\r\n Learn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states)."
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock. \r\n\r\n Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ProductVariantItem:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/ProductVariant'
      additionalProperties: { }
    ProductVariantList:
      required:
        - variants
      type: object
      properties:
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
      additionalProperties: { }
    RuleColumn:
      enum:
        - title
        - type
        - vendor
        - variant_title
        - variant_compare_at_price
        - variant_weight
        - variant_inventory
        - variant_price
        - tag
      type: string
      additionalProperties: { }
    RuleRelation:
      enum:
        - greater_than
        - less_than
        - equals
        - not_equals
        - starts_with
        - ends_with
        - contains
        - not_contains
      type: string
      additionalProperties: { }
    SmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          $ref: '#/components/schemas/SmartCollectionPublishedScope'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          $ref: '#/components/schemas/SmartCollectionSortOrder'
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    SmartCollectionImage:
      type: object
      properties:
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        src:
          type: string
          description: The image's source URL.
          nullable: true
        attachment:
          type: string
          description: 'The image''s base64 attachment, used when creating an image.'
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
      additionalProperties: { }
      description: An object representing the image for a OpenShopify.Admin.Builder.Models.SmartCollection.
    SmartCollectionItem:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionList:
      required:
        - smart_collections
      type: object
      properties:
        smart_collections:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionPublishedScope:
      enum:
        - web
        - global
      type: string
      additionalProperties: { }
    SmartCollectionRules:
      type: object
      properties:
        relation:
          $ref: '#/components/schemas/RuleRelation'
        condition:
          type: string
          description: 'Select products for a collection using a condition. Conditions are either strings or numbers, depending on the relation.'
          nullable: true
        column:
          $ref: '#/components/schemas/RuleColumn'
      additionalProperties: { }
      description: An entity representing a Shopify Smart Collection Rule.
    SmartCollectionSortOrder:
      enum:
        - created
        - manual
        - best-selling
      type: string
      additionalProperties: { }
    UpdateCustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). \r\n\r\n</strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCustomCollectionRequest:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/UpdateCustomCollection'
      additionalProperties: false
    UpdateOrderingTypeOfProductsInSmartCollectionRequest:
      type: object
      additionalProperties: false
    UpdateProduct:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product isn't published to the Point of Sale channel. \r\n*   `global`: The product is published to the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/ProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductImage:
      required:
        - id
      type: object
      properties:
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [Liquid filters](/api/liquid/filters/image_url) that you can use to retrieve modified copies of the image.'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        alt:
          type: string
          nullable: true
        filename:
          type: string
          nullable: true
        attachment:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductImageRequest:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/UpdateProductImage'
      additionalProperties: false
    UpdateProductRequest:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/UpdateProduct'
      additionalProperties: false
    UpdateProductVariant:
      required:
        - id
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        fulfillment_service:
          type: string
          description: "The handle of a fulfillment service that stocks a product variant. \r\n\r\n This is the handle of a third-party fulfillment service if the following conditions are met: 1. The product variant is stocked by a single fulfillment service. 2. The [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`. 3. The fulfillment service [hasn't opted into SKU sharing](/changelog/fulfillment-service-sku-sharing). If the conditions aren't met, then this is `manual`. \r\n\r\n The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-rest/latest/resources/product-variant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [InventoryLevel](/api/admin-rest/latest/resources/inventorylevel) resource if you need to determine where a product variant is stocked. \r\n\r\n If you previously set this field, then we recommend that you instead [connect an inventory item to a location](/api/admin-rest/latest/resources/inventorylevel#post-inventory-levels-connect). Each [Location](/api/admin-rest/latest/resources/location) is associated with a single [FulfillmentService](/api/admin-rest/latest/resources/fulfillmentservice). The value of this field after setting it will be as described above. \r\n\r\n If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available. \r\n\r\n Learn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states)."
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock. \r\n\r\n Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductVariantRequest:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/UpdateProductVariant'
      additionalProperties: false
    UpdateSmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          $ref: '#/components/schemas/SmartCollectionPublishedScope'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          $ref: '#/components/schemas/SmartCollectionSortOrder'
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateSmartCollectionRequest:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/UpdateSmartCollection'
      additionalProperties: false
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Shopify-Access-Token
      in: header
security:
  - ApiKey: [ ]