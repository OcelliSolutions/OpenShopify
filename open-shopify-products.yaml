openapi: 3.0.1
info:
  title: Products
  description: Products
  version: '2022-04'
servers:
  - url: 'https://{store_name}.myshopify.com/admin/api/{api_version}'
    variables:
      store_name:
        default: sample_store
        description: The sub-domain of the storefront.
      api_version:
        default: '2022-04'
        description: The api version.
paths:
  /collects.json:
    post:
      tags:
        - Collect
      summary: Adds a product to a custom collection
      operationId: AddProductToCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectItem'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CollectItem'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Collect
      summary: Retrieves a list of collects
      operationId: RetrieveListOfCollects
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectList'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/collects/{collect_id}.json':
    delete:
      tags:
        - Collect
      summary: Removes a product from a collection
      operationId: RemoveProductFromCollection
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Collect
      summary: Retrieves a specific collect by its ID
      operationId: RetrieveSpecificCollectByItsID
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /collects/count.json:
    get:
      tags:
        - Collect
      summary: Retrieves a count of collects
      operationId: RetrieveCountOfCollects
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/collections/{collection_id}.json':
    get:
      tags:
        - Collection
      summary: Retrieves a single collection
      operationId: RetrieveSingleCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/collections/{collection_id}/products.json':
    get:
      tags:
        - Collection
      summary: Retrieve a list of products belonging to a collection
      operationId: RetrieveListOfProductsBelongingToCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The number of products to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /custom_collections.json:
    get:
      tags:
        - CustomCollection
      summary: Retrieves a list of custom collections
      operationId: RetrieveListOfCustomCollections
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Filter by custom collection handle.
          schema:
            type: string
        - name: ids
          in: query
          description: Show only collections specified by a comma-separated list of IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: product_id
          in: query
          description: Show custom collections that include a given product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show custom collections published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show custom collections published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Show custom collectsion with a given published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: title
          in: query
          description: Show custom collections with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show custom collections last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show custom collections last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionList'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - CustomCollection
      summary: Creates a custom collection
      operationId: CreateCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /custom_collections/count.json:
    get:
      tags:
        - CustomCollection
      summary: Retrieves a count of custom collections
      operationId: RetrieveCountOfCustomCollections
      parameters:
        - name: product_id
          in: query
          description: Count custom collections that include a given product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Count custom collections published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count custom collections published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Count custom collections with a given published status.
          schema:
            type: string
        - name: title
          in: query
          description: Count custom collections with given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count custom collections last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count custom collections last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/custom_collections/{custom_collection_id}.json':
    get:
      tags:
        - CustomCollection
      summary: Retrieves a single custom collection
      operationId: RetrieveSingleCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - CustomCollection
      summary: Updates an existing custom collection
      operationId: UpdateExistingCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - CustomCollection
      summary: Deletes a custom collection
      operationId: DeleteCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products.json:
    get:
      tags:
        - Product
      summary: Retrieve a list of products
      operationId: RetrieveListOfProducts
      parameters:
        - name: collection_id
          in: query
          description: Return products by product collection ID.
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Return products created before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Return products created after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: Return only certain fields specified by a comma-separated list of field names.
          schema:
            type: string
        - name: handle
          in: query
          description: Return only products specified by a comma-separated list of product handles.
          schema:
            type: string
        - name: ids
          in: query
          description: Return only products specified by a comma-separated list of product IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: Return up to this many results per page.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: presentment_currencies
          in: query
          description: 'Return presentment prices in only certain currencies, specified by a comma-separated list of <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a> currency codes.'
          schema:
            type: string
        - name: product_type
          in: query
          description: Return products by product type.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Return products published before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Return products published after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Return products by their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Return only products after the specified ID.
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Return only products specified by a comma-separated list of statuses.
          schema:
            type: string
        - name: title
          in: query
          description: Return products by product title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Return products last updated before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Return products last updated after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          description: Return products by product vendor.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              schema:
                type: String
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Product
      summary: Create a new product
      operationId: CreateNewProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/count.json:
    get:
      tags:
        - Product
      summary: Retrieve a count of products
      operationId: RetrieveCountOfProducts
      parameters:
        - name: collection_id
          in: query
          description: Return products by product collection ID.
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Return products created before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Return products created after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: product_type
          in: query
          description: Return products by product type.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Return products published before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Return products published after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Return products by their published status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Return products last updated before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Return products last updated after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          description: Return products by product vendor.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}.json':
    get:
      tags:
        - Product
      summary: Retrieve a single product
      operationId: RetrieveSingleProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Product
      summary: Updates a product
      operationId: UpdateProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductItem'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ProductItem'
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Product
      summary: Delete a product
      operationId: DeleteProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/images.json':
    get:
      tags:
        - ProductImage
      summary: Receive a list of all Product Images
      operationId: ReceiveListOfAllProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ProductImage
      summary: Create a new Product Image
      operationId: CreateNewProductImage
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/images/count.json':
    get:
      tags:
        - ProductImage
      summary: Receive a count of all Product Images
      operationId: ReceiveCountOfAllProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/images/{image_id}.json':
    get:
      tags:
        - ProductImage
      summary: Receive a single Product Image
      operationId: ReceiveSingleProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ProductImage
      summary: Modify an existing Product Image
      operationId: ModifyExistingProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ProductImage
      summary: Remove an existing Product Image
      operationId: RemoveExistingProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/variants.json':
    get:
      tags:
        - ProductVariant
      summary: Retrieves a list of product variants
      operationId: RetrieveListOfProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response
          schema:
            type: string
        - name: limit
          in: query
          description: Return up to this many results per page
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: presentment_currencies
          in: query
          description: 'Return presentment prices in only certain currencies, specified by a comma-separated list of <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a> currency codes.'
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ProductVariant
      summary: Create a new Product Variant
      operationId: CreateNewProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/variants/count.json':
    get:
      tags:
        - ProductVariant
      summary: Receive a count of all Product Variants
      operationId: ReceiveCountOfAllProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/variants/{variant_id}.json':
    get:
      tags:
        - ProductVariant
      summary: Receive a single Product Variant
      operationId: ReceiveSingleProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ProductVariant
      summary: Modify an existing Product Variant
      operationId: ModifyExistingProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/products/{product_id}/variants/{variant_id}.json':
    delete:
      tags:
        - ProductVariant
      summary: Remove an existing Product Variant
      operationId: RemoveExistingProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /smart_collections.json:
    get:
      tags:
        - SmartCollection
      summary: Retrieves a list of smart collections
      operationId: RetrieveListOfSmartCollections
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Filter results by smart collection handle.
          schema:
            type: string
        - name: ids
          in: query
          description: Show only the smart collections specified by a comma-separated list of IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: product_id
          in: query
          description: Show smart collections that includes the specified product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show smart collections published before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show smart collections published after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results based on the published status of smart collections.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: title
          in: query
          description: Show smart collections with the specified title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show smart collections last updated before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionList'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - SmartCollection
      summary: Creates a smart collection
      operationId: CreateSmartCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /smart_collections/count.json:
    get:
      tags:
        - SmartCollection
      summary: Retrieves a count of smart collections
      operationId: RetrieveCountOfSmartCollections
      parameters:
        - name: product_id
          in: query
          description: Show smart collections that include the specified product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show smart collections published before this date.  (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show smart collections published after this date.  (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results based on the published status of smart collections.
          schema:
            type: string
        - name: title
          in: query
          description: Show smart collections with the specified title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show smart collections last updated before this date.  (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/smart_collections/{smart_collection_id}.json':
    get:
      tags:
        - SmartCollection
      summary: Retrieves a single smart collection
      operationId: RetrieveSingleSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - SmartCollection
      summary: Updates an existing smart collection
      operationId: UpdateExistingSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - SmartCollection
      summary: Removes a smart collection
      operationId: RemoveSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/smart_collections/{smart_collection_id}/order.json':
    put:
      tags:
        - SmartCollection
      summary: Updates the ordering type of products in a smart collection
      operationId: UpdateOrderingTypeOfProductsInSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: products
          in: query
          description: 'An array of product IDs, in the order that you want them to appear at the top of the collection. When <code>products</code> is specified but empty, any previously sorted products are cleared.'
          schema:
            type: string
        - name: sort_order
          in: query
          description: The type of sorting to apply. Valid values are listed in the <a href="#properties">Properties</a> section above.
          schema:
            type: string
            default: (current value)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Collect:
      required:
        - id
      type: object
      properties:
        collection_id:
          type: integer
          description: The id of the custom collection containing the product.
          format: int64
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product in the custom collection.
          format: int64
          nullable: true
        featured:
          type: boolean
          description: States whether or not the collect is featured.
          nullable: true
          deprecated: true
        created_at:
          type: string
          description: The date and time when the collect was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the collect was last updated. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        position:
          type: integer
          description: A number specifying the manually sorted position of this product in a custom collection. The first position is 1. This value only applies when the custom collection is viewed using the Manual sort order.
          format: int32
          nullable: true
        sort_value:
          type: string
          description: This is the same value as position but padded with leading zeroes to make it alphanumeric-sortable.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CollectItem:
      type: object
      properties:
        collect:
          $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    CollectList:
      type: object
      properties:
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    Collection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'A description of the collection, complete with HTML markup. Many templates display this on their collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-readable string for the collection automatically generated from its title. This is used in themes by the Liquid templating language to refer to the collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CollectionImage'
        published_at:
          type: string
          description: The time and date (ISO 8601 format) when the collection was made visible. Returns null for a hidden collection.
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: 'Whether the collection is published to the Point of Sale channel. Valid values: `web`, `global`'
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the collection appear. Valid values: `alpha-asc`, `alpha-desc`, `best-selling`,\r\n`created`, `created-desc`, `manual`, `price-asc`, `price-desc`"
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used. For example, if the value is custom, then the collection is\r\nusing the collection.custom.liquid template. If the value is null, then the collection is using the default collection.liquid."
          nullable: true
        title:
          type: string
          description: 'The name of the collection. (limit: 255 characters)'
          nullable: true
        updated_at:
          type: string
          description: The date and time (ISO 8601 format) when the collection was last modified.
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a collection returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: The source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: The alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The time and date (ISO 8601 format) when the image was added to the collection.
          format: date-time
          nullable: true
        width:
          type: integer
          description: The width of the image in pixels.
          format: int32
        height:
          type: integer
          description: The height of the image in pixels.
          format: int32
      additionalProperties: { }
    CollectionItem:
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
      additionalProperties: { }
    CountItem:
      type: object
      properties:
        count:
          type: integer
          format: int32
      additionalProperties: { }
    CreateCustomCollection:
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the Custom collection, complete with HTML markup. Many templates display this on their Custom collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the Custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the Custom collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the collection is published or not.
          nullable: true
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the Custom collection has been published (i.e., made visible to customers):\r\nIf the Custom collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the Custom collection is hidden (i.e., not published), this value is null. Changing a Custom collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the Custom collection is visible.
          nullable: true
        sort_order:
          type: string
          description: The order in which products in the Custom collection appear
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the Custom collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the Custom collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollectionMetafield'
      additionalProperties: { }
    CreateCustomCollectionRequest:
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CreateCustomCollection'
      additionalProperties: { }
    CreateProduct:
      type: object
      properties:
        title:
          type: string
          description: "The name of the product. In a shop's catalog, clicking on a product's title takes you to that product's page.\r\nOn a product's page, the product's title typically appears in a large font."
          nullable: true
        body_html:
          type: string
          description: 'The description of the product, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the product was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: "The date and time when the product was published. The API returns this value in ISO 8601 format. \r\nSet to NULL to unpublish a product"
          format: date-time
          nullable: true
        vendor:
          type: string
          description: The name of the vendor of the product.
          nullable: true
        product_type:
          type: string
          description: 'A categorization that a product can be tagged with, commonly used for filtering and searching.'
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the Product automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the product is visible.
          nullable: true
        tags:
          type: string
          description: "A categorization that a product can be tagged with, commonly used for filtering and searching.\r\nEach comma-separated tag has a character limit of 255."
          nullable: true
        status:
          type: string
          description: The status of the product
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "A list of variant objects, each one representing a slightly different version of the product.\r\nFor example, if a product comes in different sizes and colors, each size and color permutation (such as \"small black\", \"medium black\", \"large blue\"), would be a variant.\r\nTo reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored."
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: "Custom product property names like \"Size\", \"Color\", and \"Material\".\r\nProducts are based on permutations of these options. \r\nA product may have a maximum of 3 options. 255 characters limit each."
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of image objects, each one representing an image associated with the product.'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductMetafield'
      additionalProperties: { }
    CreateProductImage:
      type: object
      properties:
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        created_at:
          type: string
          description: The date and time when the product image was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product image was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        src:
          type: string
          description: Specifies the location of the product image.
          nullable: true
        filename:
          type: string
          description: 'Specifies the file name of the image when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src path'
          nullable: true
        attachment:
          type: string
          description: 'A base64 image attachment. Only used when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src.'
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
        height:
          type: integer
          format: int32
          nullable: true
        width:
          type: integer
          format: int32
          nullable: true
        alt:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageMetafield'
      additionalProperties: { }
    CreateProductImageRequest:
      type: object
      properties:
        product_image:
          $ref: '#/components/schemas/CreateProductImage'
      additionalProperties: { }
    CreateProductRequest:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/CreateProduct'
      additionalProperties: { }
    CreateProductVariant:
      type: object
      properties:
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        title:
          type: string
          description: The title of the product variant.
          nullable: true
        sku:
          type: string
          description: A unique identifier for the product in the shop.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        grams:
          type: integer
          description: The weight of the product variant in grams.
          format: int64
          nullable: true
        inventory_policy:
          type: string
          description: Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock. Known values are 'deny' and 'continue'.
          nullable: true
        fulfillment_service:
          type: string
          description: Service that is doing the fulfillment. Can be 'manual' or any custom string.
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: Specifies whether or not Shopify tracks the number of items in stock for this product variant. Known values are 'blank' and 'shopify'.
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        compare_at_price:
          type: number
          description: The competitors prices for the same item.
          format: decimal
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        created_at:
          type: string
          description: The date and time when the product variant was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product variant was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        taxable:
          type: boolean
          description: Specifies whether or not a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: Specifies a tax code which is used for Avalara tax integrations
          nullable: true
        requires_shipping:
          type: boolean
          description: Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant.
          nullable: true
        barcode:
          type: string
          description: 'The barcode, UPC or ISBN number for the product.'
          nullable: true
        inventory_quantity:
          type: integer
          description: "The number of items in stock for this product variant.\r\nNOTE: After 2018-07-01, this field will be read-only in the Shopify API. Use the `InventoryLevelService` instead."
          format: int64
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for one of the product's images.
          format: int64
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with weight_unit.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit system that the product variant''s weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantMetafield'
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies
      additionalProperties: { }
    CreateProductVariantRequest:
      type: object
      properties:
        product_variant:
          $ref: '#/components/schemas/CreateProductVariant'
      additionalProperties: { }
    CreateSmartCollection:
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the smart collection, complete with HTML markup. Many templates display this on their smart collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the smart collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the smart collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the smart collection has been published (i.e., made visible to customers):\r\nIf the smart collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the smart collection is hidden (i.e., not published), this value is null. Changing a smart collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the smart collection is visible. The only currently known value is 'global'.
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: The list of rules that define what products go into the smart collection.
        disjunctive:
          type: boolean
          description: 'If false, products must match all of the rules to be included in the collection. If true, products can only match one of the rules.'
          nullable: true
        sort_order:
          type: string
          description: 'The order in which products in the smart collection appear. Known values are ''alpha-asc'', ''alpha-desc'', ''best-selling'', ''created'', ''created-desc'', ''manual'', ''price-asc'', ''price-desc''.'
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the smart collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the smart collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionMetafield'
      additionalProperties: { }
    CreateSmartCollectionRequest:
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/CreateSmartCollection'
      additionalProperties: { }
    CustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the Custom collection, complete with HTML markup. Many templates display this on their Custom collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the Custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the Custom collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the collection is published or not.
          nullable: true
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the Custom collection has been published (i.e., made visible to customers):\r\nIf the Custom collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the Custom collection is hidden (i.e., not published), this value is null. Changing a Custom collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the Custom collection is visible.
          nullable: true
        sort_order:
          type: string
          description: The order in which products in the Custom collection appear
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the Custom collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the Custom collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CustomCollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a shop's theme returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: Source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
      additionalProperties: { }
      description: Represents the image for a OpenShopify.Admin.Builder.Models.CustomCollection
    CustomCollectionItem:
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    CustomCollectionList:
      type: object
      properties:
        custom_collections:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    CustomCollectionMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ErrorResponse:
      type: object
      properties:
        errors:
          type: string
          nullable: true
      additionalProperties: false
    PresentmentPrice:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/Price'
        compare_at_price:
          $ref: '#/components/schemas/Price'
      additionalProperties: { }
    Price:
      type: object
      properties:
        currency_code:
          type: string
          description: The three-letter code (ISO 4217 format) for currency.
          nullable: true
        amount:
          type: number
          description: The amount in the currency.
          format: decimal
          nullable: true
      additionalProperties: { }
    Product:
      required:
        - id
      type: object
      properties:
        title:
          type: string
          description: "The name of the product. In a shop's catalog, clicking on a product's title takes you to that product's page.\r\nOn a product's page, the product's title typically appears in a large font."
          nullable: true
        body_html:
          type: string
          description: 'The description of the product, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the product was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: "The date and time when the product was published. The API returns this value in ISO 8601 format. \r\nSet to NULL to unpublish a product"
          format: date-time
          nullable: true
        vendor:
          type: string
          description: The name of the vendor of the product.
          nullable: true
        product_type:
          type: string
          description: 'A categorization that a product can be tagged with, commonly used for filtering and searching.'
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the Product automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the product is visible.
          nullable: true
        tags:
          type: string
          description: "A categorization that a product can be tagged with, commonly used for filtering and searching.\r\nEach comma-separated tag has a character limit of 255."
          nullable: true
        status:
          type: string
          description: The status of the product
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "A list of variant objects, each one representing a slightly different version of the product.\r\nFor example, if a product comes in different sizes and colors, each size and color permutation (such as \"small black\", \"medium black\", \"large blue\"), would be a variant.\r\nTo reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored."
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: "Custom product property names like \"Size\", \"Color\", and \"Material\".\r\nProducts are based on permutations of these options. \r\nA product may have a maximum of 3 options. 255 characters limit each."
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of image objects, each one representing an image associated with the product.'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductImage:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        created_at:
          type: string
          description: The date and time when the product image was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product image was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        src:
          type: string
          description: Specifies the location of the product image.
          nullable: true
        filename:
          type: string
          description: 'Specifies the file name of the image when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src path'
          nullable: true
        attachment:
          type: string
          description: 'A base64 image attachment. Only used when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src.'
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
        height:
          type: integer
          format: int32
          nullable: true
        width:
          type: integer
          format: int32
          nullable: true
        alt:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductImageMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductOption:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The object's unique id.
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        name:
          type: string
          description: The name of the option.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        values:
          type: array
          items:
            type: string
          description: The values for the options.
      additionalProperties: { }
    ProductVariant:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        title:
          type: string
          description: The title of the product variant.
          nullable: true
        sku:
          type: string
          description: A unique identifier for the product in the shop.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        grams:
          type: integer
          description: The weight of the product variant in grams.
          format: int64
          nullable: true
        inventory_policy:
          type: string
          description: Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock. Known values are 'deny' and 'continue'.
          nullable: true
        fulfillment_service:
          type: string
          description: Service that is doing the fulfillment. Can be 'manual' or any custom string.
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: Specifies whether or not Shopify tracks the number of items in stock for this product variant. Known values are 'blank' and 'shopify'.
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        compare_at_price:
          type: number
          description: The competitors prices for the same item.
          format: decimal
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        created_at:
          type: string
          description: The date and time when the product variant was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product variant was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        taxable:
          type: boolean
          description: Specifies whether or not a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: Specifies a tax code which is used for Avalara tax integrations
          nullable: true
        requires_shipping:
          type: boolean
          description: Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant.
          nullable: true
        barcode:
          type: string
          description: 'The barcode, UPC or ISBN number for the product.'
          nullable: true
        inventory_quantity:
          type: integer
          description: "The number of items in stock for this product variant.\r\nNOTE: After 2018-07-01, this field will be read-only in the Shopify API. Use the `InventoryLevelService` instead."
          format: int64
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for one of the product's images.
          format: int64
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with weight_unit.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit system that the product variant''s weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantMetafield'
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductVariantMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    SmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the smart collection, complete with HTML markup. Many templates display this on their smart collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the smart collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the smart collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the smart collection has been published (i.e., made visible to customers):\r\nIf the smart collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the smart collection is hidden (i.e., not published), this value is null. Changing a smart collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the smart collection is visible. The only currently known value is 'global'.
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: The list of rules that define what products go into the smart collection.
        disjunctive:
          type: boolean
          description: 'If false, products must match all of the rules to be included in the collection. If true, products can only match one of the rules.'
          nullable: true
        sort_order:
          type: string
          description: 'The order in which products in the smart collection appear. Known values are ''alpha-asc'', ''alpha-desc'', ''best-selling'', ''created'', ''created-desc'', ''manual'', ''price-asc'', ''price-desc''.'
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the smart collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the smart collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    SmartCollectionImage:
      type: object
      properties:
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        src:
          type: string
          description: The image's source URL.
          nullable: true
        attachment:
          type: string
          description: 'The image''s base64 attachment, used when creating an image.'
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
      additionalProperties: { }
      description: An object representing the image for a OpenShopify.Admin.Builder.Models.SmartCollection.
    SmartCollectionItem:
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionList:
      type: object
      properties:
        smart_collections:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    SmartCollectionRules:
      type: object
      properties:
        relation:
          type: string
          description: 'The relationship between the column choice, and the condition.'
          nullable: true
        condition:
          type: string
          description: 'Select products for a collection using a condition. Conditions are either strings or numbers, depending on the relation.'
          nullable: true
        column:
          type: string
          description: The properties of a product that can be used to to populate a collection.
          nullable: true
      additionalProperties: { }
      description: An entity representing a Shopify Smart Collection Rule.
    UpdateCustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the Custom collection, complete with HTML markup. Many templates display this on their Custom collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the Custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the Custom collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the collection is published or not.
          nullable: true
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the Custom collection has been published (i.e., made visible to customers):\r\nIf the Custom collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the Custom collection is hidden (i.e., not published), this value is null. Changing a Custom collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the Custom collection is visible.
          nullable: true
        sort_order:
          type: string
          description: The order in which products in the Custom collection appear
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the Custom collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the Custom collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateCustomCollectionRequest:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the Custom collection, complete with HTML markup. Many templates display this on their Custom collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the Custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the Custom collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the collection is published or not.
          nullable: true
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the Custom collection has been published (i.e., made visible to customers):\r\nIf the Custom collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the Custom collection is hidden (i.e., not published), this value is null. Changing a Custom collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the Custom collection is visible.
          nullable: true
        sort_order:
          type: string
          description: The order in which products in the Custom collection appear
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the Custom collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the Custom collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        custom_collection:
          $ref: '#/components/schemas/UpdateCustomCollection'
      additionalProperties: { }
    UpdateProduct:
      required:
        - id
      type: object
      properties:
        title:
          type: string
          description: "The name of the product. In a shop's catalog, clicking on a product's title takes you to that product's page.\r\nOn a product's page, the product's title typically appears in a large font."
          nullable: true
        body_html:
          type: string
          description: 'The description of the product, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the product was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: "The date and time when the product was published. The API returns this value in ISO 8601 format. \r\nSet to NULL to unpublish a product"
          format: date-time
          nullable: true
        vendor:
          type: string
          description: The name of the vendor of the product.
          nullable: true
        product_type:
          type: string
          description: 'A categorization that a product can be tagged with, commonly used for filtering and searching.'
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the Product automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the product is visible.
          nullable: true
        tags:
          type: string
          description: "A categorization that a product can be tagged with, commonly used for filtering and searching.\r\nEach comma-separated tag has a character limit of 255."
          nullable: true
        status:
          type: string
          description: The status of the product
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "A list of variant objects, each one representing a slightly different version of the product.\r\nFor example, if a product comes in different sizes and colors, each size and color permutation (such as \"small black\", \"medium black\", \"large blue\"), would be a variant.\r\nTo reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored."
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: "Custom product property names like \"Size\", \"Color\", and \"Material\".\r\nProducts are based on permutations of these options. \r\nA product may have a maximum of 3 options. 255 characters limit each."
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of image objects, each one representing an image associated with the product.'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateProductImage:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        created_at:
          type: string
          description: The date and time when the product image was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product image was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        src:
          type: string
          description: Specifies the location of the product image.
          nullable: true
        filename:
          type: string
          description: 'Specifies the file name of the image when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src path'
          nullable: true
        attachment:
          type: string
          description: 'A base64 image attachment. Only used when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src.'
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
        height:
          type: integer
          format: int32
          nullable: true
        width:
          type: integer
          format: int32
          nullable: true
        alt:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateProductImageRequest:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        created_at:
          type: string
          description: The date and time when the product image was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product image was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        src:
          type: string
          description: Specifies the location of the product image.
          nullable: true
        filename:
          type: string
          description: 'Specifies the file name of the image when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src path'
          nullable: true
        attachment:
          type: string
          description: 'A base64 image attachment. Only used when creating a OpenShopify.Admin.Builder.Models.ProductImage, where it''s then converted into the OpenShopify.Admin.Builder.Models.ProductImageBase.Src.'
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
        height:
          type: integer
          format: int32
          nullable: true
        width:
          type: integer
          format: int32
          nullable: true
        alt:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductImageMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product_image:
          $ref: '#/components/schemas/UpdateProductImage'
      additionalProperties: { }
    UpdateProductRequest:
      required:
        - id
      type: object
      properties:
        title:
          type: string
          description: "The name of the product. In a shop's catalog, clicking on a product's title takes you to that product's page.\r\nOn a product's page, the product's title typically appears in a large font."
          nullable: true
        body_html:
          type: string
          description: 'The description of the product, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the product was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: "The date and time when the product was published. The API returns this value in ISO 8601 format. \r\nSet to NULL to unpublish a product"
          format: date-time
          nullable: true
        vendor:
          type: string
          description: The name of the vendor of the product.
          nullable: true
        product_type:
          type: string
          description: 'A categorization that a product can be tagged with, commonly used for filtering and searching.'
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the Product automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the product is visible.
          nullable: true
        tags:
          type: string
          description: "A categorization that a product can be tagged with, commonly used for filtering and searching.\r\nEach comma-separated tag has a character limit of 255."
          nullable: true
        status:
          type: string
          description: The status of the product
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "A list of variant objects, each one representing a slightly different version of the product.\r\nFor example, if a product comes in different sizes and colors, each size and color permutation (such as \"small black\", \"medium black\", \"large blue\"), would be a variant.\r\nTo reorder variants, update the product with the variants in the desired order.The position attribute on the variant will be ignored."
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: "Custom product property names like \"Size\", \"Color\", and \"Material\".\r\nProducts are based on permutations of these options. \r\nA product may have a maximum of 3 options. 255 characters limit each."
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of image objects, each one representing an image associated with the product.'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product:
          $ref: '#/components/schemas/UpdateProduct'
      additionalProperties: { }
    UpdateProductVariant:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        title:
          type: string
          description: The title of the product variant.
          nullable: true
        sku:
          type: string
          description: A unique identifier for the product in the shop.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        grams:
          type: integer
          description: The weight of the product variant in grams.
          format: int64
          nullable: true
        inventory_policy:
          type: string
          description: Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock. Known values are 'deny' and 'continue'.
          nullable: true
        fulfillment_service:
          type: string
          description: Service that is doing the fulfillment. Can be 'manual' or any custom string.
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: Specifies whether or not Shopify tracks the number of items in stock for this product variant. Known values are 'blank' and 'shopify'.
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        compare_at_price:
          type: number
          description: The competitors prices for the same item.
          format: decimal
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        created_at:
          type: string
          description: The date and time when the product variant was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product variant was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        taxable:
          type: boolean
          description: Specifies whether or not a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: Specifies a tax code which is used for Avalara tax integrations
          nullable: true
        requires_shipping:
          type: boolean
          description: Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant.
          nullable: true
        barcode:
          type: string
          description: 'The barcode, UPC or ISBN number for the product.'
          nullable: true
        inventory_quantity:
          type: integer
          description: "The number of items in stock for this product variant.\r\nNOTE: After 2018-07-01, this field will be read-only in the Shopify API. Use the `InventoryLevelService` instead."
          format: int64
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for one of the product's images.
          format: int64
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with weight_unit.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit system that the product variant''s weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantMetafield'
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateProductVariantRequest:
      required:
        - id
      type: object
      properties:
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        title:
          type: string
          description: The title of the product variant.
          nullable: true
        sku:
          type: string
          description: A unique identifier for the product in the shop.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        grams:
          type: integer
          description: The weight of the product variant in grams.
          format: int64
          nullable: true
        inventory_policy:
          type: string
          description: Specifies whether or not customers are allowed to place an order for a product variant when it's out of stock. Known values are 'deny' and 'continue'.
          nullable: true
        fulfillment_service:
          type: string
          description: Service that is doing the fulfillment. Can be 'manual' or any custom string.
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: Specifies whether or not Shopify tracks the number of items in stock for this product variant. Known values are 'blank' and 'shopify'.
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        compare_at_price:
          type: number
          description: The competitors prices for the same item.
          format: decimal
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        created_at:
          type: string
          description: The date and time when the product variant was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the product variant was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        taxable:
          type: boolean
          description: Specifies whether or not a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: Specifies a tax code which is used for Avalara tax integrations
          nullable: true
        requires_shipping:
          type: boolean
          description: Specifies whether or not a customer needs to provide a shipping address when placing an order for this product variant.
          nullable: true
        barcode:
          type: string
          description: 'The barcode, UPC or ISBN number for the product.'
          nullable: true
        inventory_quantity:
          type: integer
          description: "The number of items in stock for this product variant.\r\nNOTE: After 2018-07-01, this field will be read-only in the Shopify API. Use the `InventoryLevelService` instead."
          format: int64
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for one of the product's images.
          format: int64
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with weight_unit.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit system that the product variant''s weight is measure in. The weight_unit can be either "g", "kg, "oz", or "lb".'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariantMetafield'
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product_variant:
          $ref: '#/components/schemas/UpdateProductVariant'
      additionalProperties: { }
    UpdateSmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the smart collection, complete with HTML markup. Many templates display this on their smart collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the smart collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the smart collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the smart collection has been published (i.e., made visible to customers):\r\nIf the smart collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the smart collection is hidden (i.e., not published), this value is null. Changing a smart collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the smart collection is visible. The only currently known value is 'global'.
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: The list of rules that define what products go into the smart collection.
        disjunctive:
          type: boolean
          description: 'If false, products must match all of the rules to be included in the collection. If true, products can only match one of the rules.'
          nullable: true
        sort_order:
          type: string
          description: 'The order in which products in the smart collection appear. Known values are ''alpha-asc'', ''alpha-desc'', ''best-selling'', ''created'', ''created-desc'', ''manual'', ''price-asc'', ''price-desc''.'
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the smart collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the smart collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateSmartCollectionRequest:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the smart collection, complete with HTML markup. Many templates display this on their smart collection page.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the smart collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the smart collection. Limit of 255 characters.
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: "This can have two different types of values, depending on whether the smart collection has been published (i.e., made visible to customers):\r\nIf the smart collection is published, this value is the date and time when it was published.The API returns this value in ISO 8601 format.\r\nIf the smart collection is hidden (i.e., not published), this value is null. Changing a smart collection's status from published to hidden changes its published_at property to null."
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: The sales channels in which the smart collection is visible. The only currently known value is 'global'.
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: The list of rules that define what products go into the smart collection.
        disjunctive:
          type: boolean
          description: 'If false, products must match all of the rules to be included in the collection. If true, products can only match one of the rules.'
          nullable: true
        sort_order:
          type: string
          description: 'The order in which products in the smart collection appear. Known values are ''alpha-asc'', ''alpha-desc'', ''best-selling'', ''created'', ''created-desc'', ''manual'', ''price-asc'', ''price-desc''.'
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the template you are using. By default, the original template is called product.liquid, without any suffix. Any additional templates will be: product.suffix.liquid.'
          nullable: true
        title:
          type: string
          description: The name of the smart collection. Limit of 255 characters.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the smart collection was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        smart_collection:
          $ref: '#/components/schemas/UpdateSmartCollection'
      additionalProperties: { }
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Shopify-Access-Token
      in: header
security:
  - ApiKey: [ ]