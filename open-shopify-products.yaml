openapi: 3.0.1
info:
  title: Products
  description: Products
  version: '2022-04'
servers:
  - url: 'https://{store_name}.myshopify.com/admin/api/{api_version}'
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
      api_version:
        default: '2022-04'
        description: The api version.
  - url: 'https://{store_name}.myshopify.com/admin'
    description: Some endpoints do not use the standard routing. This is an alternate.
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
paths:
  /collects.json:
    post:
      tags:
        - Collect
      summary: Adds a product to a custom collection
      operationId: AddProductToCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectItem'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CollectItem'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectError'
    get:
      tags:
        - Collect
      summary: Retrieves a list of collects
      operationId: ListCollects
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectList'
  '/collects/{collect_id}.json':
    delete:
      tags:
        - Collect
      summary: Removes a product from a collection
      operationId: DeleteProductFromCollection
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
    get:
      tags:
        - Collect
      summary: Retrieves a specific collect by its ID
      operationId: GetCollect
      parameters:
        - name: collect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectItem'
  /collects/count.json:
    get:
      tags:
        - Collect
      summary: Retrieves a count of collects
      operationId: CountCollects
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/collections/{collection_id}.json':
    get:
      tags:
        - Collection
      summary: Retrieves a single collection
      operationId: GetCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionItem'
  '/collections/{collection_id}/products.json':
    get:
      tags:
        - Collection
      summary: Retrieve a list of products belonging to a collection
      operationId: ListProductsBelongingToCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The number of products to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
  /custom_collections.json:
    get:
      tags:
        - CustomCollection
      summary: Retrieves a list of custom collections
      operationId: ListCustomCollections
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Filter by custom collection handle.
          schema:
            type: string
        - name: ids
          in: query
          description: Show only collections specified by a comma-separated list of IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: product_id
          in: query
          description: Show custom collections that include a given product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show custom collections published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show custom collections published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Show custom collectsion with a given published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          description: Show custom collections with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show custom collections last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show custom collections last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionList'
    post:
      tags:
        - CustomCollection
      summary: Creates a custom collection
      operationId: CreateCustomCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCustomCollectionRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionError'
  /custom_collections/count.json:
    get:
      tags:
        - CustomCollection
      summary: Retrieves a count of custom collections
      operationId: CountCustomCollections
      parameters:
        - name: product_id
          in: query
          description: Count custom collections that include a given product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Count custom collections published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count custom collections published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Count custom collections with a given published status.
          schema:
            type: string
        - name: title
          in: query
          description: Count custom collections with given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count custom collections last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count custom collections last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/custom_collections/{custom_collection_id}.json':
    get:
      tags:
        - CustomCollection
      summary: Retrieves a single custom collection
      operationId: GetCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
    put:
      tags:
        - CustomCollection
      summary: Updates an existing custom collection
      operationId: UpdateCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCustomCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomCollectionError'
    delete:
      tags:
        - CustomCollection
      summary: Deletes a custom collection
      operationId: DeleteCustomCollection
      parameters:
        - name: custom_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /products.json:
    get:
      tags:
        - Product
      summary: Retrieve a list of products
      operationId: ListProducts
      parameters:
        - name: collection_id
          in: query
          description: Return products by product collection ID.
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Return products created before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Return products created after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: Return only certain fields specified by a comma-separated list of field names.
          schema:
            type: string
        - name: handle
          in: query
          description: Return only products specified by a comma-separated list of product handles.
          schema:
            type: string
        - name: ids
          in: query
          description: Return only products specified by a comma-separated list of product IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: Return up to this many results per page.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: presentment_currencies
          in: query
          description: 'Return presentment prices in only certain currencies, specified by a comma-separated list of [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency codes.'
          schema:
            type: string
        - name: product_type
          in: query
          description: Return products by product type.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Return products published before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Return products published after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Return products by their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Return only products after the specified ID.
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Return only products specified by a comma-separated list of statuses.
          schema:
            type: string
        - name: title
          in: query
          description: Return products by product title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Return products last updated before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Return products last updated after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          description: Return products by product vendor.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
    post:
      tags:
        - Product
      summary: Create a new product
      operationId: CreateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductError'
  /products/count.json:
    get:
      tags:
        - Product
      summary: Retrieve a count of products
      operationId: CountProducts
      parameters:
        - name: collection_id
          in: query
          description: Return products by product collection ID.
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Return products created before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Return products created after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: product_type
          in: query
          description: Return products by product type.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Return products published before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Return products published after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Return products by their published status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Return products last updated before a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Return products last updated after a specified date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: vendor
          in: query
          description: Return products by product vendor.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/products/{product_id}.json':
    get:
      tags:
        - Product
      summary: Retrieve a single product
      operationId: GetProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
    put:
      tags:
        - Product
      summary: Updates a product
      operationId: UpdateProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductError'
    delete:
      tags:
        - Product
      summary: Delete a product
      operationId: DeleteProduct
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/products/{product_id}/images.json':
    get:
      tags:
        - ProductImage
      summary: Receive a list of all Product Images
      operationId: ListProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageList'
    post:
      tags:
        - ProductImage
      summary: Create a new Product Image
      operationId: CreateProductImage
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductImageRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageError'
  '/products/{product_id}/images/count.json':
    get:
      tags:
        - ProductImage
      summary: Receive a count of all Product Images
      operationId: CountProductImages
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/products/{product_id}/images/{image_id}.json':
    get:
      tags:
        - ProductImage
      summary: Receive a single Product Image
      operationId: GetProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
    put:
      tags:
        - ProductImage
      summary: Modify an existing Product Image
      operationId: UpdateProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductImageRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageError'
    delete:
      tags:
        - ProductImage
      summary: Remove an existing Product Image
      operationId: DeleteProductImage
      parameters:
        - name: image_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/products/{product_id}/variants.json':
    get:
      tags:
        - ProductVariant
      summary: Retrieves a list of product variants
      operationId: ListProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response
          schema:
            type: string
        - name: limit
          in: query
          description: Return up to this many results per page
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: presentment_currencies
          in: query
          description: 'Return presentment prices in only certain currencies, specified by a comma-separated list of [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency codes.'
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantList'
    post:
      tags:
        - ProductVariant
      summary: Create a new Product Variant
      operationId: CreateProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateProductVariantRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
        '400':
          description: Bad Request
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantError'
  '/products/{product_id}/variants/count.json':
    get:
      tags:
        - ProductVariant
      summary: Receive a count of all Product Variants
      operationId: CountProductVariants
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/variants/{variant_id}.json':
    get:
      tags:
        - ProductVariant
      summary: Receive a single Product Variant
      operationId: GetProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
    put:
      tags:
        - ProductVariant
      summary: Modify an existing Product Variant
      operationId: UpdateProductVariant
      parameters:
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProductVariantRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariantError'
  '/products/{product_id}/variants/{variant_id}.json':
    delete:
      tags:
        - ProductVariant
      summary: Remove an existing Product Variant
      operationId: DeleteProductVariant
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: variant_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /smart_collections.json:
    get:
      tags:
        - SmartCollection
      summary: Retrieves a list of smart collections
      operationId: ListSmartCollections
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Filter results by smart collection handle.
          schema:
            type: string
        - name: ids
          in: query
          description: Show only the smart collections specified by a comma-separated list of IDs.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: product_id
          in: query
          description: Show smart collections that includes the specified product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show smart collections published before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show smart collections published after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results based on the published status of smart collections.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          description: Show smart collections with the specified title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show smart collections last updated before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionList'
    post:
      tags:
        - SmartCollection
      summary: Creates a smart collection
      operationId: CreateSmartCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateSmartCollectionRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionError'
  /smart_collections/count.json:
    get:
      tags:
        - SmartCollection
      summary: Retrieves a count of smart collections
      operationId: CountSmartCollections
      parameters:
        - name: product_id
          in: query
          description: Show smart collections that include the specified product.
          schema:
            type: integer
            format: int64
        - name: published_at_max
          in: query
          description: 'Show smart collections published before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show smart collections published after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results based on the published status of smart collections.
          schema:
            type: string
        - name: title
          in: query
          description: Show smart collections with the specified title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show smart collections last updated before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show smart collections last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/smart_collections/{smart_collection_id}.json':
    get:
      tags:
        - SmartCollection
      summary: Retrieves a single smart collection
      operationId: GetSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
    put:
      tags:
        - SmartCollection
      summary: Updates an existing smart collection
      operationId: UpdateSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionItem'
        '422':
          description: Client Error
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartCollectionError'
    delete:
      tags:
        - SmartCollection
      summary: Removes a smart collection
      operationId: DeleteSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/smart_collections/{smart_collection_id}/order.json':
    put:
      tags:
        - SmartCollection
      summary: Updates the ordering type of products in a smart collection
      operationId: UpdateOrderingTypeOfProductsInSmartCollection
      parameters:
        - name: smart_collection_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: products
          in: query
          description: 'An array of product IDs, in the order that you want them to appear at the top of the collection. When `products` is specified but empty, any previously sorted products are cleared.'
          schema:
            type: string
        - name: sort_order
          in: query
          description: 'The type of sorting to apply. Valid values are listed in the [Properties](#properties) section above.'
          schema:
            type: string
            default: (current value)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSmartCollectionRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
components:
  schemas:
    Collect:
      required:
        - id
      type: object
      properties:
        collection_id:
          type: integer
          description: The ID of the custom collection containing the product.
          format: int64
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collect was created.'
          format: date-time
          nullable: true
        position:
          type: integer
          description: The position of this product in a manually sorted custom collection. The first position is 1. This value is applied only when the custom collection is sorted manually.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product in the custom collection.
          format: int64
          nullable: true
        sort_value:
          type: string
          description: This is the same value as `position` but padded with leading zeroes to make it alphanumeric-sortable. This value is applied only when the custom collection is sorted manually.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collect was last updated.'
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CollectError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/CollectErrorDetails'
      additionalProperties: { }
    CollectErrorDetails:
      type: object
      properties:
        product:
          type: array
          items:
            type: string
          nullable: true
        collection:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    CollectItem:
      required:
        - collect
      type: object
      properties:
        collect:
          $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    CollectList:
      required:
        - collects
      type: object
      properties:
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
      additionalProperties: { }
    Collection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'A description of the collection, complete with HTML markup. Many templates display this on their collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-readable string for the collection automatically generated from its title. This is used in themes by the Liquid templating language to refer to the collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CollectionImage'
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: In the order set manually by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). </strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the collection. (limit: 255 characters)'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was last modified.'
          format: date-time
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        collection_type:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a collection returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: The source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: The alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The time and date (ISO 8601 format) when the image was added to the collection.
          format: date-time
          nullable: true
        width:
          type: integer
          description: The width of the image in pixels.
          format: int32
        height:
          type: integer
          description: The height of the image in pixels.
          format: int32
      additionalProperties: { }
    CollectionItem:
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection'
      additionalProperties: { }
    CountItem:
      type: object
      properties:
        count:
          type: integer
          format: int32
      additionalProperties: { }
    CreateCustomCollection:
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). </strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the custom collection was last modified.'
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateCustomCollectionRequest:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CreateCustomCollection'
      additionalProperties: false
    CreateProduct:
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was created.'
          format: date-time
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/CreateProductImage'
          description: 'A list of [product image](/docs/admin-api/rest/reference/products/product-image) objects, each one representing an image associated with the product.'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: 'The custom product properties. For example, **Size**, **Color**, and **Material**. Each product can have up to 3 options and each option value can be up to 255 characters. Product variants are made of up combinations of option values. Options cannot be created without values. To create new options, a variant with an associated option value also needs to be created.'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The product is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was last modified. A product''s `updated_at` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update.'
          format: date-time
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "An array of [product variants](/docs/admin-api/rest/reference/products/product-variant), each representing a different version of the product.\r\n\r\nThe `position` property is read-only. The position of variants is indicated by the order in which they are listed."
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/CreateProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateProductImage:
      type: object
      properties:
        created_at:
          type: string
          description: 'The date and time when the product image was created. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [URL filters](/docs/liquid/reference/filters/url-filters#img_url) that you can use to retrieve modified copies of the image. For example, add `_small`, to the filename to retrieve a scaled copy of the image at 100 x 100 px (for example, `ipod-nano_small.png`), or add `_2048x2048` to retrieve a copy of the image constrained at 2048 x 2048 px resolution (for example, `ipod-nano_2048x2048.png`).'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product image was last modified. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateProductImageRequest:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/CreateProductImage'
      additionalProperties: false
    CreateProductRequest:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/CreateProduct'
      additionalProperties: false
    CreateProductVariant:
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product variant was created.'
          format: date-time
          nullable: true
        fulfillment_service:
          type: string
          description: 'The fulfillment service associated with the product variant. Valid values: `manual` or the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice).'
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock.  Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: "A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies. Each price object has the following properties:\r\n\r\n*   `currency_code`: The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for one of the shop's enabled presentment currencies. \r\n*   `amount`: The variant's price or compare-at price in the presentment currency.Requires the header `'X-Shopify-Api-Features': 'include-presentment-prices'`."
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product variant was last modified. Gets returned in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
      additionalProperties: false
    CreateProductVariantRequest:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/CreateProductVariant'
      additionalProperties: false
    CreateSmartCollection:
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the smart collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The smart collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The smart collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: "The list of rules that define what products go into the smart collection. Each rule has the following properties:\r\n\r\n*   \r\n\r\n**column**: The property of a product being used to populate the smart collection.\r\n\r\nValid values for text relations: * `title`: The product title. * `type`: The product type. * `vendor`: The name of the product vendor. * `variant_title`: The title of a product variant. \r\n\r\nValid values for number relations:\r\n\r\n    *   `variant_compare_at_price`: The compare price. \r\n    *   `variant_weight`: The weight of the product. \r\n    *   `variant_inventory`: The inventory stock. Note: `not_equals` does not work with this property. \r\n    *   `variant_price`: product price.  \r\n\r\nValid values for an `equals` relation: * `tag`: A tag associated with the product. * \r\n\r\n**relation**: The relationship between the **column** choice, and the **condition**.\r\n\r\nValid values for number relations:\r\n\r\n    *   `greater_than` The column value is greater than the condition. \r\n    *   `less_than` The column value is less than the condition. \r\n    *   `equals` The column value is equal to the condition. \r\n    *   `not_equals` The column value is not equal to the condition.  \r\n\r\nValid values for text relations:\r\n\r\n    *   `equals`: Checks if the **column** value is equal to the **condition** value. \r\n    *   `not_equals`: Checks if the **column** value is not equal to the **condition** value. \r\n    *   `starts_with`: Checks if the **column** value starts with the **condition** value. \r\n    *   `ends_with`: Checks if the **column** value ends with the **condition** value. \r\n    *   `contains`: Checks if the **column** value contains the **condition** value. \r\n    *   `not_contains`: Checks if the **column** value does not contain the **condition** value.   \r\n*   \r\n\r\n**condition**: Select products for a smart collection using a condition. Values are either strings or numbers, depending on the **relation** value."
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          type: string
          description: "The order of the products in the smart collection. Valid values:\r\n\r\n*   `alpha-asc`: The products are sorted alphabetically from A to Z. \r\n*   `alpha-des`: The products are sorted alphabetically from Z to A. \r\n*   `best-selling`: The products are sorted by number of sales. \r\n*   `created`: The products are sorted by the date they were created, from oldest to newest. \r\n*   `created-desc`: The products are sorted by the date they were created, from newest to oldest. \r\n*   `manual`: The products are manually sorted by the shop owner. \r\n*   `price-asc`: The products are sorted by price from lowest to highest. \r\n*   `price-desc`: The products are sorted by price from highest to lowest."
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the smart collection was last modified.'
          format: date-time
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreateSmartCollectionRequest:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/CreateSmartCollection'
      additionalProperties: false
    CustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). </strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the custom collection was last modified.'
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    CustomCollectionError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/CustomCollectionErrorDetails'
      additionalProperties: { }
    CustomCollectionErrorDetails:
      type: object
      properties:
        title:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    CustomCollectionImage:
      type: object
      properties:
        attachment:
          type: string
          description: An image attached to a shop's theme returned as Base64-encoded binary data.
          nullable: true
        src:
          type: string
          description: Source URL that specifies the location of the image.
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
      additionalProperties: { }
      description: Represents the image for a OpenShopify.Admin.Builder.Models.CustomCollection
    CustomCollectionItem:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    CustomCollectionList:
      required:
        - custom_collections
      type: object
      properties:
        custom_collections:
          type: array
          items:
            $ref: '#/components/schemas/CustomCollection'
      additionalProperties: { }
    Metafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the metafield was created.'
          format: date-time
          nullable: true
        description:
          type: string
          description: A description of the information that the metafield contains.
          nullable: true
        key:
          type: string
          description: 'The key of the metafield. Keys can be up to 30 characters long and can contain alphanumeric characters, hyphens, underscores, and periods.'
          nullable: true
        namespace:
          type: string
          description: A container for a group of metafields. Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name. Must have between 3-20 characters.
          nullable: true
        owner_id:
          type: integer
          description: The unique ID of the resource that the metafield is attached to.
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: The type of resource that the metafield is attached to.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the metafield was last updated.'
          format: date-time
          nullable: true
        value:
          type: string
          description: 'The data to store in the metafield. The value is always stored as a string, regardless of the metafield''s type.'
          nullable: true
        type:
          type: string
          description: 'The type of data that the metafield stores in the `value` field. Refer to the list of [supported types](/apps/metafields/types).'
          nullable: true
        value_type:
          type: string
          description: "<aside class=\"note caution\"> \r\n\r\n#### Caution\r\n\r\n`value_type` is deprecated and replaced by `type` in API version 2021-07.\r\n </aside> The legacy type information for the stored value. Valid values: `string`, `integer`, `json_string`."
          nullable: true
          deprecated: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    PresentmentPrice:
      type: object
      properties:
        price:
          $ref: '#/components/schemas/Price'
        compare_at_price:
          $ref: '#/components/schemas/Price'
      additionalProperties: { }
    Price:
      type: object
      properties:
        currency_code:
          type: string
          description: The three-letter code (ISO 4217 format) for currency.
          nullable: true
        amount:
          type: number
          description: The amount in the currency.
          format: decimal
          nullable: true
      additionalProperties: { }
    Product:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was created.'
          format: date-time
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of [product image](/docs/admin-api/rest/reference/products/product-image) objects, each one representing an image associated with the product.'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: 'The custom product properties. For example, **Size**, **Color**, and **Material**. Each product can have up to 3 options and each option value can be up to 255 characters. Product variants are made of up combinations of option values. Options cannot be created without values. To create new options, a variant with an associated option value also needs to be created.'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The product is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was last modified. A product''s `updated_at` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update.'
          format: date-time
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "An array of [product variants](/docs/admin-api/rest/reference/products/product-variant), each representing a different version of the product.\r\n\r\nThe `position` property is read-only. The position of variants is indicated by the order in which they are listed."
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/ProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ProductErrorDetails'
      additionalProperties: { }
    ProductErrorDetails:
      type: object
      properties:
        title:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    ProductImage:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: 'The date and time when the product image was created. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [URL filters](/docs/liquid/reference/filters/url-filters#img_url) that you can use to retrieve modified copies of the image. For example, add `_small`, to the filename to retrieve a scaled copy of the image at 100 x 100 px (for example, `ipod-nano_small.png`), or add `_2048x2048` to retrieve a copy of the image constrained at 2048 x 2048 px resolution (for example, `ipod-nano_2048x2048.png`).'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product image was last modified. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductImageError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ProductImageErrorDetails'
      additionalProperties: { }
    ProductImageErrorDetails:
      type: object
      properties:
        base:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    ProductImageItem:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ProductImage'
      additionalProperties: { }
    ProductImageList:
      required:
        - images
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
      additionalProperties: { }
    ProductItem:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductList:
      required:
        - products
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      additionalProperties: { }
    ProductOption:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The object's unique id.
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        name:
          type: string
          description: The name of the option.
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. 1 is the first position.
          format: int32
          nullable: true
        values:
          type: array
          items:
            type: string
          description: The values for the options.
          nullable: true
      additionalProperties: { }
    ProductVariant:
      required:
        - id
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product variant was created.'
          format: date-time
          nullable: true
        fulfillment_service:
          type: string
          description: 'The fulfillment service associated with the product variant. Valid values: `manual` or the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice).'
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock.  Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: "A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies. Each price object has the following properties:\r\n\r\n*   `currency_code`: The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for one of the shop's enabled presentment currencies. \r\n*   `amount`: The variant's price or compare-at price in the presentment currency.Requires the header `'X-Shopify-Api-Features': 'include-presentment-prices'`."
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product variant was last modified. Gets returned in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    ProductVariantError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ProductVariantErrorDetails'
      additionalProperties: { }
    ProductVariantErrorDetails:
      type: object
      properties:
        variant:
          type: string
          nullable: true
      additionalProperties: { }
    ProductVariantItem:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/ProductVariant'
      additionalProperties: { }
    ProductVariantList:
      required:
        - variants
      type: object
      properties:
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
      additionalProperties: { }
    SmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the smart collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The smart collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The smart collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: "The list of rules that define what products go into the smart collection. Each rule has the following properties:\r\n\r\n*   \r\n\r\n**column**: The property of a product being used to populate the smart collection.\r\n\r\nValid values for text relations: * `title`: The product title. * `type`: The product type. * `vendor`: The name of the product vendor. * `variant_title`: The title of a product variant. \r\n\r\nValid values for number relations:\r\n\r\n    *   `variant_compare_at_price`: The compare price. \r\n    *   `variant_weight`: The weight of the product. \r\n    *   `variant_inventory`: The inventory stock. Note: `not_equals` does not work with this property. \r\n    *   `variant_price`: product price.  \r\n\r\nValid values for an `equals` relation: * `tag`: A tag associated with the product. * \r\n\r\n**relation**: The relationship between the **column** choice, and the **condition**.\r\n\r\nValid values for number relations:\r\n\r\n    *   `greater_than` The column value is greater than the condition. \r\n    *   `less_than` The column value is less than the condition. \r\n    *   `equals` The column value is equal to the condition. \r\n    *   `not_equals` The column value is not equal to the condition.  \r\n\r\nValid values for text relations:\r\n\r\n    *   `equals`: Checks if the **column** value is equal to the **condition** value. \r\n    *   `not_equals`: Checks if the **column** value is not equal to the **condition** value. \r\n    *   `starts_with`: Checks if the **column** value starts with the **condition** value. \r\n    *   `ends_with`: Checks if the **column** value ends with the **condition** value. \r\n    *   `contains`: Checks if the **column** value contains the **condition** value. \r\n    *   `not_contains`: Checks if the **column** value does not contain the **condition** value.   \r\n*   \r\n\r\n**condition**: Select products for a smart collection using a condition. Values are either strings or numbers, depending on the **relation** value."
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          type: string
          description: "The order of the products in the smart collection. Valid values:\r\n\r\n*   `alpha-asc`: The products are sorted alphabetically from A to Z. \r\n*   `alpha-des`: The products are sorted alphabetically from Z to A. \r\n*   `best-selling`: The products are sorted by number of sales. \r\n*   `created`: The products are sorted by the date they were created, from oldest to newest. \r\n*   `created-desc`: The products are sorted by the date they were created, from newest to oldest. \r\n*   `manual`: The products are manually sorted by the shop owner. \r\n*   `price-asc`: The products are sorted by price from lowest to highest. \r\n*   `price-desc`: The products are sorted by price from highest to lowest."
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the smart collection was last modified.'
          format: date-time
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    SmartCollectionError:
      required:
        - errors
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/SmartCollectionErrorDetails'
      additionalProperties: { }
    SmartCollectionErrorDetails:
      type: object
      properties:
        title:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    SmartCollectionImage:
      type: object
      properties:
        created_at:
          type: string
          description: The date the image was created.
          format: date-time
          nullable: true
        src:
          type: string
          description: The image's source URL.
          nullable: true
        attachment:
          type: string
          description: 'The image''s base64 attachment, used when creating an image.'
          nullable: true
        width:
          type: integer
          description: Width of the image in pixels.
          format: int32
          nullable: true
        height:
          type: integer
          description: Height of the image in pixels.
          format: int32
          nullable: true
        alt:
          type: string
          description: Alternative text that describes the collection image.
          nullable: true
      additionalProperties: { }
      description: An object representing the image for a OpenShopify.Admin.Builder.Models.SmartCollection.
    SmartCollectionItem:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionList:
      required:
        - smart_collections
      type: object
      properties:
        smart_collections:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollection'
      additionalProperties: { }
    SmartCollectionRules:
      type: object
      properties:
        relation:
          type: string
          description: 'The relationship between the column choice, and the condition.'
          nullable: true
        condition:
          type: string
          description: 'Select products for a collection using a condition. Conditions are either strings or numbers, depending on the relation.'
          nullable: true
        column:
          type: string
          description: The properties of a product that can be used to to populate a collection.
          nullable: true
      additionalProperties: { }
      description: An entity representing a Shopify Smart Collection Rule.
    UpdateCustomCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: 'The description of the custom collection, complete with HTML markup. Many templates display this on their custom collection pages.'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the custom collection automatically generated from its title. This is used in shop themes by the Liquid templating language to refer to the custom collection. (limit: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/CustomCollectionImage'
        published:
          type: boolean
          description: Whether the custom collection is published to the Online Store channel.
          nullable: true
        published_at:
          type: string
          description: 'The time and date ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the collection was made visible. Returns `null` for a hidden custom collection.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The custom collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The custom collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        sort_order:
          type: string
          description: "The order in which products in the custom collection appear. Valid values:\r\n\r\n*   **alpha-asc**: Alphabetically, in ascending order (A - Z). \r\n*   **alpha-desc**: Alphabetically, in descending order (Z - A). \r\n*   **best-selling**: By best-selling products. \r\n*   **created**: By date created, in ascending order (oldest - newest). \r\n*   **created-desc**: By date created, in descending order (newest - oldest). \r\n*   **manual**: Order created by the shop owner. \r\n*   <strong>price-asc**: By price, in ascending order (lowest - highest). \r\n*   **price-desc**: By price, in descending order (highest - lowest). </strong>"
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the liquid template being used. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid`.'
          nullable: true
        title:
          type: string
          description: 'The name of the custom collection. (limit: 255 characters)'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the custom collection was last modified.'
          format: date-time
          nullable: true
        collects:
          type: array
          items:
            $ref: '#/components/schemas/Collect'
          description: The collection of collects associated to this custom collection
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.CustomCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.CustomCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.CustomCollection metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCustomCollectionRequest:
      required:
        - custom_collection
      type: object
      properties:
        custom_collection:
          $ref: '#/components/schemas/UpdateCustomCollection'
      additionalProperties: false
    UpdateProduct:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: A description of the product. Supports HTML formatting.
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was created.'
          format: date-time
          nullable: true
        handle:
          type: string
          description: A unique human-friendly string for the product. Automatically generated from the product's `title`. Used by the Liquid templating language to refer to objects.
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
          description: 'A list of [product image](/docs/admin-api/rest/reference/products/product-image) objects, each one representing an image associated with the product.'
          nullable: true
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
          description: 'The custom product properties. For example, **Size**, **Color**, and **Material**. Each product can have up to 3 options and each option value can be up to 255 characters. Product variants are made of up combinations of option values. Options cannot be created without values. To create new options, a variant with an associated option value also needs to be created.'
          nullable: true
        product_type:
          type: string
          description: A categorization for the product used for filtering and searching products.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was published. Can be set to `null` to unpublish the product from the Online Store channel.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the product is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The product is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The product is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        status:
          type: string
          description: "The status of the product. Valid values: \r\n\r\n*   `active`: The product is ready to sell and is available to customers on the online store, sales channels, and apps. By default, existing products are set to active. \r\n*   `archived`: The product is no longer being sold and isn't available to customers on sales channels and apps. \r\n*   `draft`: The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft."
          nullable: true
        tags:
          type: string
          description: A string of comma-separated tags that are used for filtering and search. A product can have up to 250 tags. Each tag can have up to 255 characters.
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template used for the product page. If this property is specified, then the product page uses a template called "product.suffix.liquid", where "suffix" is the value of this property. If this property is `""` or `null`, then the product page uses the default template "product.liquid". (default: `null`)'
          nullable: true
        title:
          type: string
          description: The name of the product.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product was last modified. A product''s `updated_at` value can change for different reasons. For example, if an order is placed for a product that has inventory tracking set up, then the inventory adjustment is counted as an update.'
          format: date-time
          nullable: true
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
          description: "An array of [product variants](/docs/admin-api/rest/reference/products/product-variant), each representing a different version of the product.\r\n\r\nThe `position` property is read-only. The position of variants is indicated by the order in which they are listed."
          nullable: true
        vendor:
          type: string
          description: The name of the product's vendor.
          nullable: true
        image:
          $ref: '#/components/schemas/ProductImage'
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductImage:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: 'The date and time when the product image was created. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        position:
          type: integer
          description: The order of the product image in the list. The first product image is at position 1 and is the "main" image for the product.
          format: int32
          nullable: true
        product_id:
          type: integer
          description: The id of the product associated with the image.
          format: int64
          nullable: true
        variant_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array of variant ids associated with the image.
          nullable: true
        src:
          type: string
          description: 'Specifies the location of the product image. This parameter supports [URL filters](/docs/liquid/reference/filters/url-filters#img_url) that you can use to retrieve modified copies of the image. For example, add `_small`, to the filename to retrieve a scaled copy of the image at 100 x 100 px (for example, `ipod-nano_small.png`), or add `_2048x2048` to retrieve a copy of the image constrained at 2048 x 2048 px resolution (for example, `ipod-nano_2048x2048.png`).'
          nullable: true
        width:
          type: number
          description: Width dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        height:
          type: number
          description: Height dimension of the image which is determined on upload.
          format: decimal
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product image was last modified. The API returns this value in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductImageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductImageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductImageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductImageRequest:
      required:
        - image
      type: object
      properties:
        image:
          $ref: '#/components/schemas/UpdateProductImage'
      additionalProperties: false
    UpdateProductRequest:
      required:
        - product
      type: object
      properties:
        product:
          $ref: '#/components/schemas/UpdateProduct'
      additionalProperties: false
    UpdateProductVariant:
      required:
        - id
      type: object
      properties:
        barcode:
          type: string
          description: 'The barcode, UPC, or ISBN number for the product.'
          nullable: true
        compare_at_price:
          type: number
          description: The original price of the item before an adjustment or a sale.
          format: decimal
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the product variant was created.'
          format: date-time
          nullable: true
        fulfillment_service:
          type: string
          description: 'The fulfillment service associated with the product variant. Valid values: `manual` or the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice).'
          nullable: true
        grams:
          type: number
          description: The weight of the product variant in grams.
          format: decimal
          nullable: true
        image_id:
          type: integer
          description: The unique numeric identifier for a product's image. The image must be associated to the same product as the variant.
          format: int64
          nullable: true
        inventory_item_id:
          type: integer
          description: 'The unique identifier for the inventory item, which is used in the Inventory API to query for inventory information.'
          format: int64
          nullable: true
        inventory_management:
          type: string
          description: "The fulfillment service that tracks the number of items in stock for the product variant. Valid values: \r\n\r\n*   `shopify`: You are tracking inventory yourself using the admin. \r\n*   `null`: You aren't tracking inventory on the variant. \r\n*   the handle of a [fulfillment service](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice) that has inventory management enabled: This must be the same fulfillment service referenced by the `fulfillment_service` property."
          nullable: true
        inventory_policy:
          type: string
          description: "Whether customers are allowed to place an order for the product variant when it's out of stock. Valid values: \r\n\r\n*   `deny`: Customers are not allowed to place orders for the product variant if it's out of stock. \r\n*   `continue`: Customers are allowed to place orders for the product variant if it's out of stock.  Default value: `deny`."
          nullable: true
        inventory_quantity:
          type: number
          description: 'An aggregate of inventory across all locations. To adjust inventory at a specific location, use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource.'
          format: decimal
          nullable: true
        old_inventory_quantity:
          type: number
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          format: decimal
          nullable: true
          deprecated: true
        inventory_quantity_adjustment:
          type: string
          description: 'This property is deprecated. Use the [InventoryLevel](/docs/admin-api/rest/reference/inventory/inventorylevel) resource instead.'
          nullable: true
          deprecated: true
        option:
          type: string
          description: 'The custom properties that a shop owner uses to define product variants. You can define three options for a product variant: `option1`, `option2`, `option3`. Default value: `Default Title`. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. Updating the `option` fields updates the `title` field.'
          nullable: true
        presentment_prices:
          type: array
          items:
            $ref: '#/components/schemas/PresentmentPrice'
          description: "A list of the variant's presentment prices and compare-at prices in each of the shop's enabled presentment currencies. Each price object has the following properties:\r\n\r\n*   `currency_code`: The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for one of the shop's enabled presentment currencies. \r\n*   `amount`: The variant's price or compare-at price in the presentment currency.Requires the header `'X-Shopify-Api-Features': 'include-presentment-prices'`."
          nullable: true
        position:
          type: integer
          description: The order of the product variant in the list of product variants. The first position in the list is `1`. The position of variants is indicated by the order in which they are listed.
          format: int32
          nullable: true
        price:
          type: number
          description: The price of the product variant.
          format: decimal
          nullable: true
        product_id:
          type: integer
          description: The unique numeric identifier for the product.
          format: int64
          nullable: true
        requires_shipping:
          type: boolean
          description: 'This property is deprecated. Use the `requires_shipping` property on the [InventoryItem](/docs/admin-api/rest/reference/inventory/inventoryitem) resource instead.'
          nullable: true
          deprecated: true
        sku:
          type: string
          description: 'A unique identifier for the product variant in the shop. Required in order to connect to a [FulfillmentService.](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentservice)'
          nullable: true
        taxable:
          type: boolean
          description: Whether a tax is charged when the product variant is sold.
          nullable: true
        tax_code:
          type: string
          description: 'This parameter applies only to the stores that have the [Avalara AvaTax](https://help.shopify.com/manual/taxes/tax-services/taxation) app installed. Specifies the Avalara tax code for the product variant.'
          nullable: true
        title:
          type: string
          description: 'The title of the product variant. The `title` field is a concatenation of the `option1`, `option2`, and `option3` fields. You can only update `title` indirectly using the `option` fields.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when the product variant was last modified. Gets returned in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).'
          format: date-time
          nullable: true
        weight:
          type: number
          description: The weight of the product variant in the unit system specified with `weight_unit`.
          format: decimal
          nullable: true
        weight_unit:
          type: string
          description: 'The unit of measurement that applies to the product variant''s weight. If you don''t specify a value for `weight_unit`, then the shop''s default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, and `lb`.'
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.ProductVariantBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.ProductVariantBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.ProductVariantBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService.\r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        option1:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option2:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        option3:
          type: string
          description: Custom properties that a shop owner can use to define product variants.
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateProductVariantRequest:
      required:
        - variant
      type: object
      properties:
        variant:
          $ref: '#/components/schemas/UpdateProductVariant'
      additionalProperties: false
    UpdateSmartCollection:
      required:
        - id
      type: object
      properties:
        body_html:
          type: string
          description: The description of the smart collection. Includes HTML markup. Many shop themes display this on the smart collection page.
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string for the smart collection. Automatically generated from the `title`. Used in shop themes by the Liquid templating language to refer to the smart collection. (maximum: 255 characters)'
          nullable: true
        image:
          $ref: '#/components/schemas/SmartCollectionImage'
        published_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) that the smart collection was published. Returns `null` when the collection is hidden.'
          format: date-time
          nullable: true
        published_scope:
          type: string
          description: "Whether the smart collection is published to the Point of Sale channel. Valid values: \r\n\r\n*   `web`: The smart collection is published to the Online Store channel but not published to the Point of Sale channel. \r\n*   `global`: The smart collection is published to both the Online Store channel and the Point of Sale channel."
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/SmartCollectionRules'
          description: "The list of rules that define what products go into the smart collection. Each rule has the following properties:\r\n\r\n*   \r\n\r\n**column**: The property of a product being used to populate the smart collection.\r\n\r\nValid values for text relations: * `title`: The product title. * `type`: The product type. * `vendor`: The name of the product vendor. * `variant_title`: The title of a product variant. \r\n\r\nValid values for number relations:\r\n\r\n    *   `variant_compare_at_price`: The compare price. \r\n    *   `variant_weight`: The weight of the product. \r\n    *   `variant_inventory`: The inventory stock. Note: `not_equals` does not work with this property. \r\n    *   `variant_price`: product price.  \r\n\r\nValid values for an `equals` relation: * `tag`: A tag associated with the product. * \r\n\r\n**relation**: The relationship between the **column** choice, and the **condition**.\r\n\r\nValid values for number relations:\r\n\r\n    *   `greater_than` The column value is greater than the condition. \r\n    *   `less_than` The column value is less than the condition. \r\n    *   `equals` The column value is equal to the condition. \r\n    *   `not_equals` The column value is not equal to the condition.  \r\n\r\nValid values for text relations:\r\n\r\n    *   `equals`: Checks if the **column** value is equal to the **condition** value. \r\n    *   `not_equals`: Checks if the **column** value is not equal to the **condition** value. \r\n    *   `starts_with`: Checks if the **column** value starts with the **condition** value. \r\n    *   `ends_with`: Checks if the **column** value ends with the **condition** value. \r\n    *   `contains`: Checks if the **column** value contains the **condition** value. \r\n    *   `not_contains`: Checks if the **column** value does not contain the **condition** value.   \r\n*   \r\n\r\n**condition**: Select products for a smart collection using a condition. Values are either strings or numbers, depending on the **relation** value."
          nullable: true
        disjunctive:
          type: boolean
          description: "Whether the product must match all the rules to be included in the smart collection. Valid values: \r\n\r\n*   `true`: Products only need to match one or more of the rules to be included in the smart collection. \r\n*   `false`: Products must match all of the rules to be included in the smart collection."
          nullable: true
        sort_order:
          type: string
          description: "The order of the products in the smart collection. Valid values:\r\n\r\n*   `alpha-asc`: The products are sorted alphabetically from A to Z. \r\n*   `alpha-des`: The products are sorted alphabetically from Z to A. \r\n*   `best-selling`: The products are sorted by number of sales. \r\n*   `created`: The products are sorted by the date they were created, from oldest to newest. \r\n*   `created-desc`: The products are sorted by the date they were created, from newest to oldest. \r\n*   `manual`: The products are manually sorted by the shop owner. \r\n*   `price-asc`: The products are sorted by price from lowest to highest. \r\n*   `price-desc`: The products are sorted by price from highest to lowest."
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the Liquid template that the shop uses. By default, the original template is called product.liquid, and additional templates are called product.`suffix`.liquid.'
          nullable: true
        title:
          type: string
          description: 'The name of the smart collection. Maximum length: 255 characters.'
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601)) when the smart collection was last modified.'
          format: date-time
          nullable: true
        products_count:
          type: integer
          format: int32
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.SmartCollection. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.SmartCollection response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.SmartCollection metafields unless specified. Instead, you need to query metafields with OpenShopify.Admin.Builder.Models.MetafieldControllerBase. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateSmartCollectionRequest:
      required:
        - smart_collection
      type: object
      properties:
        smart_collection:
          $ref: '#/components/schemas/UpdateSmartCollection'
      additionalProperties: false
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Shopify-Access-Token
      in: header
security:
  - ApiKey: [ ]