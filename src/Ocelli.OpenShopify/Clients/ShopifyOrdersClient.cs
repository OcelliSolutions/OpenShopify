//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ocelli.OpenShopify
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IAbandonedCheckoutsClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of abandoned checkouts
        /// </summary>
        /// <param name="createdAtMax">Show checkouts created before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="createdAtMin">Show checkouts created after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to after the specified ID.</param>
        /// <param name="status">Show only checkouts with a given status.</param>
        /// <param name="updatedAtMax">Show checkouts last updated before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show checkouts last updated after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListAbandonedCheckoutsAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, int? limit = null, string? pageInfo = null, int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class AbandonedCheckoutsClient : ShopifyClientBase, IAbandonedCheckoutsClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public AbandonedCheckoutsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of abandoned checkouts
        /// </summary>
        /// <param name="createdAtMax">Show checkouts created before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="createdAtMin">Show checkouts created after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to after the specified ID.</param>
        /// <param name="status">Show only checkouts with a given status.</param>
        /// <param name="updatedAtMax">Show checkouts last updated before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show checkouts last updated after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListAbandonedCheckoutsAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, int? limit = null, string? pageInfo = null, int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/checkouts.json?");
            if (createdAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_max") + "=").Append(System.Uri.EscapeDataString(createdAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_min") + "=").Append(System.Uri.EscapeDataString(createdAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IDraftOrderClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new DraftOrder
        /// </summary>
        /// <param name="customerId">Used to load the customer. When a customer is loaded, the customer’s email address  is also associated.</param>
        /// <param name="useCustomerDefaultAddress">An optional boolean that you can send as part of a draft order object
        /// <br/>            &lt;br /&gt;        to load customer shipping information. Valid values: true or false.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CreateDraftOrderAsync(long? customerId = null, string? useCustomerDefaultAddress = null, CreateDraftOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of draft orders
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response</param>
        /// <param name="ids">Filter by list of IDs</param>
        /// <param name="limit">Amount of results</param>
        /// <param name="sinceId">Restrict results to after the specified ID</param>
        /// <param name="updatedAtMax">Show orders last updated before date (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show orders last updated after date (format: 2014-04-25T16:15:47-04:00)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListDraftOrdersAsync(string? fields = null, string? ids = null, int? limit = null, string? pageInfo = null, int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an existing DraftOrder
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> UpdateDraftOrderAsync(long draftOrderId, UpdateDraftOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a single DraftOrder
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> GetDraftOrderAsync(long draftOrderId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an existing DraftOrder
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteExistingDraftOrderAsync(long draftOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a count of all DraftOrders
        /// </summary>
        /// <param name="sinceId">Count draft orders after the specified ID.</param>
        /// <param name="status">Count draft orders that have a given status.</param>
        /// <param name="updatedAtMax">Count draft orders last updated before the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="updatedAtMin">Count draft orders last updated after the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetCountOfAllDraftOrdersAsync(int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an invoice
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> SendInvoiceAsync(long draftOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a draft order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CompleteDraftOrderAsync(long draftOrderId, string? paymentPending = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class DraftOrderClient : ShopifyClientBase, IDraftOrderClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public DraftOrderClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new DraftOrder
        /// </summary>
        /// <param name="customerId">Used to load the customer. When a customer is loaded, the customer’s email address  is also associated.</param>
        /// <param name="useCustomerDefaultAddress">An optional boolean that you can send as part of a draft order object
        /// <br/>            &lt;br /&gt;        to load customer shipping information. Valid values: true or false.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CreateDraftOrderAsync(long? customerId = null, string? useCustomerDefaultAddress = null, CreateDraftOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders.json?");
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customer_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (useCustomerDefaultAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("use_customer_default_address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(useCustomerDefaultAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of draft orders
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response</param>
        /// <param name="ids">Filter by list of IDs</param>
        /// <param name="limit">Amount of results</param>
        /// <param name="sinceId">Restrict results to after the specified ID</param>
        /// <param name="updatedAtMax">Show orders last updated before date (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show orders last updated after date (format: 2014-04-25T16:15:47-04:00)</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListDraftOrdersAsync(string? fields = null, string? ids = null, int? limit = null, string? pageInfo = null, int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders.json?");
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an existing DraftOrder
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> UpdateDraftOrderAsync(long draftOrderId, UpdateDraftOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (draftOrderId == null)
                throw new System.ArgumentNullException("draftOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/{draft_order_id}.json");
            urlBuilder_.Replace("{draft_order_id}", System.Uri.EscapeDataString(ConvertToString(draftOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a single DraftOrder
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> GetDraftOrderAsync(long draftOrderId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (draftOrderId == null)
                throw new System.ArgumentNullException("draftOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/{draft_order_id}.json?");
            urlBuilder_.Replace("{draft_order_id}", System.Uri.EscapeDataString(ConvertToString(draftOrderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an existing DraftOrder
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteExistingDraftOrderAsync(long draftOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (draftOrderId == null)
                throw new System.ArgumentNullException("draftOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/{draft_order_id}.json");
            urlBuilder_.Replace("{draft_order_id}", System.Uri.EscapeDataString(ConvertToString(draftOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a count of all DraftOrders
        /// </summary>
        /// <param name="sinceId">Count draft orders after the specified ID.</param>
        /// <param name="status">Count draft orders that have a given status.</param>
        /// <param name="updatedAtMax">Count draft orders last updated before the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="updatedAtMin">Count draft orders last updated after the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetCountOfAllDraftOrdersAsync(int? sinceId = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/count.json?");
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CountItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an invoice
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> SendInvoiceAsync(long draftOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (draftOrderId == null)
                throw new System.ArgumentNullException("draftOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/{draft_order_id}/send_invoice.json");
            urlBuilder_.Replace("{draft_order_id}", System.Uri.EscapeDataString(ConvertToString(draftOrderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a draft order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CompleteDraftOrderAsync(long draftOrderId, string? paymentPending = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (draftOrderId == null)
                throw new System.ArgumentNullException("draftOrderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/draft_orders/{draft_order_id}/complete.json?");
            urlBuilder_.Replace("{draft_order_id}", System.Uri.EscapeDataString(ConvertToString(draftOrderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (paymentPending != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("payment_pending") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paymentPending, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IOrderClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a list of orders
        /// </summary>
        /// <param name="attributionAppId">Show orders attributed to a certain app, specified by the app ID. Set as &lt;code&gt;current&lt;/code&gt; to show orders for the app currently consuming the API.</param>
        /// <param name="createdAtMax">Show orders created at or before date.</param>
        /// <param name="createdAtMin">Show orders created at or after date.</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="financialStatus">Filter orders by their financial status.</param>
        /// <param name="fulfillmentStatus">Filter orders by their fulfillment status.</param>
        /// <param name="ids">Retrieve only orders specified by a comma-separated list of order IDs.</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="processedAtMax">Show orders imported at or before date.</param>
        /// <param name="processedAtMin">Show orders imported at or after date.</param>
        /// <param name="sinceId">Show orders after the specified ID.</param>
        /// <param name="status">Filter orders by their status.</param>
        /// <param name="updatedAtMax">Show orders last updated at or before date.</param>
        /// <param name="updatedAtMin">Show orders last updated at or after date.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListOrdersAsync(long? attributionAppId = null, System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? fields = null, string? financialStatus = null, string? fulfillmentStatus = null, string? ids = null, int? limit = null, string? pageInfo = null, System.DateTimeOffset? processedAtMax = null, System.DateTimeOffset? processedAtMin = null, int? sinceId = null, Status? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CreateOrderAsync(CreateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific order
        /// </summary>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> GetSpecificOrderAsync(long orderId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> UpdateOrderAsync(long orderId, UpdateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve an order count
        /// </summary>
        /// <param name="createdAtMax">Orders created before date specified.</param>
        /// <param name="createdAtMin">Orders created after date specified.</param>
        /// <param name="financialStatus">Orders of a given financial status.</param>
        /// <param name="fulfillmentStatus">Orders of a given fulfillment status.</param>
        /// <param name="status">Orders of a given status.</param>
        /// <param name="updatedAtMax">Orders last updated before date specified.</param>
        /// <param name="updatedAtMin">Orders last updated after date specified.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetOrderCountAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? financialStatus = null, string? fulfillmentStatus = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CloseOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Re-open a closed order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ReOpenClosedOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <param name="amount">The amount to refund. If set, Shopify attempts to refund the specified amount, depending on its status. Shopify refunds through a manual gateway in cases where the original transaction was not made in Shopify. Refunds through a manual gateway are recorded as a refund on Shopify, but the customer is not refunded.</param>
        /// <param name="currency">The currency of the refund that's issued when the order is canceled. Required for multi-currency orders whenever the &lt;code&gt;amount&lt;/code&gt; property is provided.</param>
        /// <param name="email">Whether to send an email to the customer notifying them of the cancellation.</param>
        /// <param name="reason">The reason for the order cancellation. Valid values: &lt;code&gt;customer&lt;/code&gt;, &lt;code&gt;inventory&lt;/code&gt;, &lt;code&gt;fraud&lt;/code&gt;, &lt;code&gt;declined&lt;/code&gt;, and &lt;code&gt;other&lt;/code&gt;.)</param>
        /// <param name="refund">The refund transactions to perform. Required for some more complex refund situations. For more information, see the &lt;a href="/docs/admin-api/rest/reference/orders/refund#create-{{ current_version }}" &gt;Refund API&lt;/a&gt;.</param>
        /// <param name="restock">Whether to restock refunded items back to your store's inventory.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CancelOrderAsync(long orderId, string? amount = null, string? currency = null, bool? email = null, string? reason = null, object? refund = null, bool? restock = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class OrderClient : ShopifyClientBase, IOrderClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public OrderClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a list of orders
        /// </summary>
        /// <param name="attributionAppId">Show orders attributed to a certain app, specified by the app ID. Set as &lt;code&gt;current&lt;/code&gt; to show orders for the app currently consuming the API.</param>
        /// <param name="createdAtMax">Show orders created at or before date.</param>
        /// <param name="createdAtMin">Show orders created at or after date.</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="financialStatus">Filter orders by their financial status.</param>
        /// <param name="fulfillmentStatus">Filter orders by their fulfillment status.</param>
        /// <param name="ids">Retrieve only orders specified by a comma-separated list of order IDs.</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="processedAtMax">Show orders imported at or before date.</param>
        /// <param name="processedAtMin">Show orders imported at or after date.</param>
        /// <param name="sinceId">Show orders after the specified ID.</param>
        /// <param name="status">Filter orders by their status.</param>
        /// <param name="updatedAtMax">Show orders last updated at or before date.</param>
        /// <param name="updatedAtMin">Show orders last updated at or after date.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListOrdersAsync(long? attributionAppId = null, System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? fields = null, string? financialStatus = null, string? fulfillmentStatus = null, string? ids = null, int? limit = null, string? pageInfo = null, System.DateTimeOffset? processedAtMax = null, System.DateTimeOffset? processedAtMin = null, int? sinceId = null, Status? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders.json?");
            if (attributionAppId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("attribution_app_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(attributionAppId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_max") + "=").Append(System.Uri.EscapeDataString(createdAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_min") + "=").Append(System.Uri.EscapeDataString(createdAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (financialStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("financial_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(financialStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillmentStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillment_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processed_at_max") + "=").Append(System.Uri.EscapeDataString(processedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (processedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("processed_at_min") + "=").Append(System.Uri.EscapeDataString(processedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CreateOrderAsync(CreateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders.json");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve a specific order
        /// </summary>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> GetSpecificOrderAsync(long orderId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> UpdateOrderAsync(long orderId, UpdateOrderRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve an order count
        /// </summary>
        /// <param name="createdAtMax">Orders created before date specified.</param>
        /// <param name="createdAtMin">Orders created after date specified.</param>
        /// <param name="financialStatus">Orders of a given financial status.</param>
        /// <param name="fulfillmentStatus">Orders of a given fulfillment status.</param>
        /// <param name="status">Orders of a given status.</param>
        /// <param name="updatedAtMax">Orders last updated before date specified.</param>
        /// <param name="updatedAtMin">Orders last updated after date specified.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetOrderCountAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? financialStatus = null, string? fulfillmentStatus = null, string? status = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/count.json?");
            if (createdAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_max") + "=").Append(System.Uri.EscapeDataString(createdAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_min") + "=").Append(System.Uri.EscapeDataString(createdAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (financialStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("financial_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(financialStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fulfillmentStatus != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fulfillment_status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CountItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CloseOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/close.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Re-open a closed order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ReOpenClosedOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/open.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <param name="amount">The amount to refund. If set, Shopify attempts to refund the specified amount, depending on its status. Shopify refunds through a manual gateway in cases where the original transaction was not made in Shopify. Refunds through a manual gateway are recorded as a refund on Shopify, but the customer is not refunded.</param>
        /// <param name="currency">The currency of the refund that's issued when the order is canceled. Required for multi-currency orders whenever the &lt;code&gt;amount&lt;/code&gt; property is provided.</param>
        /// <param name="email">Whether to send an email to the customer notifying them of the cancellation.</param>
        /// <param name="reason">The reason for the order cancellation. Valid values: &lt;code&gt;customer&lt;/code&gt;, &lt;code&gt;inventory&lt;/code&gt;, &lt;code&gt;fraud&lt;/code&gt;, &lt;code&gt;declined&lt;/code&gt;, and &lt;code&gt;other&lt;/code&gt;.)</param>
        /// <param name="refund">The refund transactions to perform. Required for some more complex refund situations. For more information, see the &lt;a href="/docs/admin-api/rest/reference/orders/refund#create-{{ current_version }}" &gt;Refund API&lt;/a&gt;.</param>
        /// <param name="restock">Whether to restock refunded items back to your store's inventory.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CancelOrderAsync(long orderId, string? amount = null, string? currency = null, bool? email = null, string? reason = null, object? refund = null, bool? restock = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/cancel.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (amount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("amount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(amount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (reason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refund != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refund") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refund, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (restock != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("restock") + "=").Append(System.Uri.EscapeDataString(ConvertToString(restock, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IOrderRiskClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an order risk for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CreateOrderRiskForOrderAsync(long orderId, CreateOrderRiskRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of all order risks for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListOrderRisksForOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single order risk by its ID
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> GetOrderRiskByItsIDAsync(long orderId, long riskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an order risk
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> UpdateOrderRiskAsync(long orderId, long riskId, UpdateOrderRiskRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an order risk for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteOrderRiskForOrderAsync(long orderId, long riskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class OrderRiskClient : ShopifyClientBase, IOrderRiskClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public OrderRiskClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an order risk for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CreateOrderRiskForOrderAsync(long orderId, CreateOrderRiskRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/risks.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of all order risks for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListOrderRisksForOrderAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/risks.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single order risk by its ID
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> GetOrderRiskByItsIDAsync(long orderId, long riskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (riskId == null)
                throw new System.ArgumentNullException("riskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/risks/{risk_id}.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{risk_id}", System.Uri.EscapeDataString(ConvertToString(riskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an order risk
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> UpdateOrderRiskAsync(long orderId, long riskId, UpdateOrderRiskRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (riskId == null)
                throw new System.ArgumentNullException("riskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/risks/{risk_id}.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{risk_id}", System.Uri.EscapeDataString(ConvertToString(riskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes an order risk for an order
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteOrderRiskForOrderAsync(long orderId, long riskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (riskId == null)
                throw new System.ArgumentNullException("riskId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/risks/{risk_id}.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{risk_id}", System.Uri.EscapeDataString(ConvertToString(riskId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IRefundClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of refunds for an order
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency for the underlying transaction.</param>
        /// <param name="limit">The maximum number of results to retrieve.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListRefundsForOrderAsync(long orderId, string? fields = null, bool? inShopCurrency = null, int? limit = null, string? pageInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a refund
        /// </summary>
        /// <param name="currency">&lt;p&gt;The three-letter code (&lt;a href="https://en.wikipedia.org/wiki/ISO_4217" target="_blank"&gt;ISO 4217&lt;/a&gt; format) for the currency used for the refund.&lt;/p&gt;</param>
        /// <param name="discrepancyReason">An optional comment that explains a discrepancy between calculated and actual refund amounts. Used to populate the &lt;code&gt;reason&lt;/code&gt; property of the resulting &lt;code&gt;order_adjustment&lt;/code&gt; object attached to the refund. Valid values: &lt;code&gt;restock&lt;/code&gt;, &lt;code&gt;damage&lt;/code&gt;, &lt;code&gt;customer&lt;/code&gt;, and &lt;code&gt;other&lt;/code&gt;.</param>
        /// <param name="note">An optional note attached to a refund.</param>
        /// <param name="notify">Whether to send a refund notification to the customer.</param>
        /// <param name="refundLineItems">A list of line item IDs, quantities to refund, and restock instructions. Each entry has the following properties:</param>
        /// <param name="restock">Whether to add the line items back to the store inventory. Use &lt;code&gt;restock_type&lt;/code&gt; for refund line items instead.</param>
        /// <param name="shipping">Specify how much shipping to refund. It has the following properties:</param>
        /// <param name="transactions">A list of &lt;a href="/api/admin-rest/current/resources/transaction"&gt;transactions&lt;/a&gt;
        /// <br/>            &lt;br /&gt;          to process as refunds. Use the &lt;code&gt;calculate&lt;/code&gt; endpoint to obtain these transactions.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CreateRefundAsync(long orderId, string? currency = null, string? discrepancyReason = null, string? note = null, string? notify = null, string? refundLineItems = null, string? restock = null, string? shipping = null, string? transactions = null, CreateRefundRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific refund
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency for the underlying transaction.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> GetSpecificRefundAsync(long orderId, long refundId, string? fields = null, bool? inShopCurrency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculates a refund
        /// </summary>
        /// <param name="currency">&lt;p&gt;The three-letter code (&lt;a href="https://en.wikipedia.org/wiki/ISO_4217" target="_blank"&gt;ISO 4217&lt;/a&gt; format) for the
        /// <br/>            &lt;br /&gt;          currency used for the refund. &lt;strong&gt;Note:&lt;/strong&gt; Required whenever the shipping &lt;code&gt;amount&lt;/code&gt; property is provided.&lt;/p&gt;</param>
        /// <param name="refundLineItems">A list of line item IDs, quantities to refund, and restock instructions. Each entry has the following properties:</param>
        /// <param name="shipping">Specify how much shipping to refund. It has the following properties:</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CalculateRefundAsync(long orderId, string? currency = null, string? refundLineItems = null, string? shipping = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class RefundClient : ShopifyClientBase, IRefundClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public RefundClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of refunds for an order
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency for the underlying transaction.</param>
        /// <param name="limit">The maximum number of results to retrieve.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListRefundsForOrderAsync(long orderId, string? fields = null, bool? inShopCurrency = null, int? limit = null, string? pageInfo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/refunds.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inShopCurrency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("in_shop_currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inShopCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a refund
        /// </summary>
        /// <param name="currency">&lt;p&gt;The three-letter code (&lt;a href="https://en.wikipedia.org/wiki/ISO_4217" target="_blank"&gt;ISO 4217&lt;/a&gt; format) for the currency used for the refund.&lt;/p&gt;</param>
        /// <param name="discrepancyReason">An optional comment that explains a discrepancy between calculated and actual refund amounts. Used to populate the &lt;code&gt;reason&lt;/code&gt; property of the resulting &lt;code&gt;order_adjustment&lt;/code&gt; object attached to the refund. Valid values: &lt;code&gt;restock&lt;/code&gt;, &lt;code&gt;damage&lt;/code&gt;, &lt;code&gt;customer&lt;/code&gt;, and &lt;code&gt;other&lt;/code&gt;.</param>
        /// <param name="note">An optional note attached to a refund.</param>
        /// <param name="notify">Whether to send a refund notification to the customer.</param>
        /// <param name="refundLineItems">A list of line item IDs, quantities to refund, and restock instructions. Each entry has the following properties:</param>
        /// <param name="restock">Whether to add the line items back to the store inventory. Use &lt;code&gt;restock_type&lt;/code&gt; for refund line items instead.</param>
        /// <param name="shipping">Specify how much shipping to refund. It has the following properties:</param>
        /// <param name="transactions">A list of &lt;a href="/api/admin-rest/current/resources/transaction"&gt;transactions&lt;/a&gt;
        /// <br/>            &lt;br /&gt;          to process as refunds. Use the &lt;code&gt;calculate&lt;/code&gt; endpoint to obtain these transactions.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CreateRefundAsync(long orderId, string? currency = null, string? discrepancyReason = null, string? note = null, string? notify = null, string? refundLineItems = null, string? restock = null, string? shipping = null, string? transactions = null, CreateRefundRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/refunds.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (currency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (discrepancyReason != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("discrepancy_reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(discrepancyReason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (note != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("note") + "=").Append(System.Uri.EscapeDataString(ConvertToString(note, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (notify != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("notify") + "=").Append(System.Uri.EscapeDataString(ConvertToString(notify, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refund_line_items") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (restock != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("restock") + "=").Append(System.Uri.EscapeDataString(ConvertToString(restock, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shipping != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shipping") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipping, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (transactions != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("transactions") + "=").Append(System.Uri.EscapeDataString(ConvertToString(transactions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific refund
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency for the underlying transaction.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> GetSpecificRefundAsync(long orderId, long refundId, string? fields = null, bool? inShopCurrency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (refundId == null)
                throw new System.ArgumentNullException("refundId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/refunds/{refund_id}.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{refund_id}", System.Uri.EscapeDataString(ConvertToString(refundId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inShopCurrency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("in_shop_currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inShopCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Calculates a refund
        /// </summary>
        /// <param name="currency">&lt;p&gt;The three-letter code (&lt;a href="https://en.wikipedia.org/wiki/ISO_4217" target="_blank"&gt;ISO 4217&lt;/a&gt; format) for the
        /// <br/>            &lt;br /&gt;          currency used for the refund. &lt;strong&gt;Note:&lt;/strong&gt; Required whenever the shipping &lt;code&gt;amount&lt;/code&gt; property is provided.&lt;/p&gt;</param>
        /// <param name="refundLineItems">A list of line item IDs, quantities to refund, and restock instructions. Each entry has the following properties:</param>
        /// <param name="shipping">Specify how much shipping to refund. It has the following properties:</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CalculateRefundAsync(long orderId, string? currency = null, string? refundLineItems = null, string? shipping = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/refunds/calculate.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (currency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (refundLineItems != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("refund_line_items") + "=").Append(System.Uri.EscapeDataString(ConvertToString(refundLineItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (shipping != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("shipping") + "=").Append(System.Uri.EscapeDataString(ConvertToString(shipping, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ITransactionClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of transactions
        /// </summary>
        /// <param name="fields">Show only certain fields, specifed by a comma-separated list of fields names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency.</param>
        /// <param name="sinceId">Retrieve only transactions after the specified ID.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> ListTransactionsAsync(long orderId, string? fields = null, bool? inShopCurrency = null, int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a transaction for an order
        /// </summary>
        /// <param name="source">An optional origin of the transaction. Set to &lt;code&gt;external&lt;/code&gt; to import a cash transaction for the associated order.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> CreateTransactionForOrderAsync(long orderId, string? source = null, CreateTransactionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of an order's transactions
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetCountOfOrdersTransactionsAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific transaction
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> GetSpecificTransactionAsync(long orderId, long transactionId, string? fields = null, bool? inShopCurrency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class TransactionClient : ShopifyClientBase, ITransactionClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public TransactionClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of transactions
        /// </summary>
        /// <param name="fields">Show only certain fields, specifed by a comma-separated list of fields names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency.</param>
        /// <param name="sinceId">Retrieve only transactions after the specified ID.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> ListTransactionsAsync(long orderId, string? fields = null, bool? inShopCurrency = null, int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/transactions.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inShopCurrency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("in_shop_currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inShopCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a transaction for an order
        /// </summary>
        /// <param name="source">An optional origin of the transaction. Set to &lt;code&gt;external&lt;/code&gt; to import a cash transaction for the associated order.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> CreateTransactionForOrderAsync(long orderId, string? source = null, CreateTransactionRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/transactions.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (source != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of an order's transactions
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CountItem>> GetCountOfOrdersTransactionsAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/transactions/count.json");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CountItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a specific transaction
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="inShopCurrency">Show amounts in the shop currency.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> GetSpecificTransactionAsync(long orderId, long transactionId, string? fields = null, bool? inShopCurrency = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/orders/{order_id}/transactions/{transaction_id}.json?");
            urlBuilder_.Replace("{order_id}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{transaction_id}", System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (inShopCurrency != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("in_shop_currency") + "=").Append(System.Uri.EscapeDataString(ConvertToString(inShopCurrency, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorResponse>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else

                        if (status_ == 200 || status_ == 204)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AppliedDiscount
    {
        /// <summary>
        /// Title of the discount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Reason for the discount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// he value of the discount. If the type of the discount is fixed_amount, then this is a fixed dollar amount. If the type is percentage, then this is the percentage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The type of discount. Known values are "percentage" and "fixed_amount".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? ValueType { get; set; } = default!;

        /// <summary>
        /// The applied amount of the discount, based on the setting of value_type. 
        /// <br/>When ValueType is set to fixed_amount discount amount = quantity * value
        /// <br/>When ValueType is set to percentage discount amount = floor(price * quantity * value) / 100
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateDraftOrder
    {
        /// <summary>
        /// The unique numeric identifier for the order associated to the draft order, once created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Name of the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the invoice was emailed to the customer, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_sent_at")]
        public System.DateTimeOffset? InvoiceSentAt { get; set; } = default!;

        /// <summary>
        /// The URL for the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_url")]
        public string? InvoiceUrl { get; set; } = default!;

        /// <summary>
        /// Product variant line item or custom line item associated to the draft order. Each draft order must include at least one line_item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<DraftLineItem>? LineItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_line")]
        public DraftShippingLine? ShippingLine { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Sets whether or not taxes are exempt for the draft order. If this field is set to false, then Shopify will refer to the taxable field for each line_item. If a customer is applied to the draft order, then Shopify will use the customer's tax_exempt field instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// An array of tax_line objects, each of which details the total taxes applicable to the order. When creating an order through the API, tax lines may be specified on the order or the line items but not both. Tax lines specified on the order are split on the taxable line items in the created order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]
        public AppliedDiscount? AppliedDiscount { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// Date at which order is created and the draft order changes to completed status. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed_at")]
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the draft order was created in Shopify, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Once a draft order is set to status completed the only further draft order modifications that can be made are adding tags or metafields. No other draft order actions are permitted.
        /// <br/>Known values are "open", "invoice_sent", and "completed".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<DraftOrderMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// An optional boolean that you can send as part of a draft order object to load customer shipping information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("use_customer_default_address")]
        public bool? UseCustomerDefaultAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateDraftOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("draft_order")]
        public CreateDraftOrder? DraftOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateOrder
    {
        /// <summary>
        /// Unique identifier of the app who created the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("app_id")]
        public long? AppId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The IP address of the browser used by the customer when placing the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// Indicates whether or not the person who placed the order would like to receive email updates from the shop.
        /// <br/>This is set when checking the "I want to receive occasional emails about new products, promotions and other news" checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The reason why the order was cancelled. If the order was not cancelled, this value is null. Known values are "customer", "fraud", "inventory" and "other".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancel_reason")]
        public string? CancelReason { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was cancelled. If the order was not cancelled, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancelled_at")]
        public System.DateTimeOffset? CancelledAt { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular cart that is attached to a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]
        public string? CartToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client_details")]
        public ClientDetails? ClientDetails { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was closed. If the order was not clsoed, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was created in Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three letter language code, optionally followed by a region modifier. Example values could be 'en', 'en-CA', 'en-PIRATE'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier of the POS device used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// Applicable discount codes that can be applied to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]
        public System.Collections.Generic.ICollection<DiscountCode>? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_applications")]
        public System.Collections.Generic.ICollection<DiscountApplication>? DiscountApplications { get; set; } = default!;

        /// <summary>
        /// The order's email address. Note: On and after 2015-11-03, you should be using !:ContactEmail to refer to the customer's email address.
        /// <br/>Between 2015-11-03 and 2015-12-03, updates to an order's email will also update the customer's email. This is temporary so apps can be migrated over to
        /// <br/>doing customer updates rather than order updates to change the contact email. After 2015-12-03, updating updating an order's email will no longer update
        /// <br/>the customer's email and apps will have to use the customer update endpoint to do so.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The financial status of an order. Known values are "authorized", "paid", "pending", "partially_paid", "partially_refunded", "refunded" and "voided".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("financial_status")]
        public string? FinancialStatus { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Fulfillment objects for this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillments")]
        public System.Collections.Generic.ICollection<Fulfillment>? Fulfillments { get; set; } = default!;

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The customer's phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the buyer landed when entering the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.LineItem objects, each one containing information about an item in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<LineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the physical location at which the order was processed. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The customer's order name as represented by a number, e.g. '#1001'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// Numerical identifier unique to the shop. A number is sequential and starts at 1000.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_number")]
        public int? OrderNumber { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the order status web page. The URL will be null unless the order was created from a checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_status_url")]
        public string? OrderStatusUrl { get; set; } = default!;

        /// <summary>
        /// The list of all payment gateways used for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_gateway_names")]
        public System.Collections.Generic.ICollection<string>? PaymentGatewayNames { get; set; } = default!;

        /// <summary>
        /// The date that the order was processed at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The type of payment processing method. Known values are 'checkout', 'direct', 'manual', 'offsite', 'express', 'free' and 'none'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing_method")]
        public string? ProcessingMethod { get; set; } = default!;

        /// <summary>
        /// The website that the customer clicked on to come to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Refund objects applied to the order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]
        public System.Collections.Generic.ICollection<Refund>? Refunds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.ShippingLine objects, each of which details the shipping methods used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]
        public System.Collections.Generic.ICollection<ShippingLine>? ShippingLines { get; set; } = default!;

        /// <summary>
        /// Where the order originated. May only be set during creation, and is not writeable thereafter.
        /// <br/>Orders created via the API may be assigned any string of your choice except for "web", "pos", "iphone", and "android".
        /// <br/>Default is "api".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the total taxes applicable to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// States whether this is a test order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total amount of the discounts applied to the price of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the tips in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tip_received")]
        public decimal? TotalTipReceived { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, with taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The sum of all the weights of the line items in the order, in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]
        public long? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The unique numerical identifier for the user logged into the terminal at the time the order was processed at. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Transaction objects that detail all of the transactions in
        /// <br/>this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<OrderMetafield>? Metafields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("current_total_duties_set")]
        public PriceSet? CurrentTotalDutiesSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_total_duties_set")]
        public PriceSet? OriginalTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used used to display prices to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]
        public string? PresentmentCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price_set")]
        public PriceSet? TotalLineItemsPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts_set")]
        public PriceSet? TotalDiscountsSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_shipping_price_set")]
        public PriceSet? TotalShippingPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price_set")]
        public PriceSet? SubtotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_price_set")]
        public PriceSet? TotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]
        public PriceSet? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// Indicates whether taxes on an order are estimated. Will be set to false when taxes on an order are finalized and aren't subject to any change.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_taxes")]
        public bool? EstimatedTaxes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public CreateOrder? Order { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateOrderRisk
    {
        /// <summary>
        /// Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order.
        /// <br/>Note: Setting this parameter does not cancel the order. This must be done by the Orders API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause_cancel")]
        public bool? CauseCancel { get; set; } = default!;

        /// <summary>
        /// The ID of the checkout that the order risk belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checkout_id")]
        public long? CheckoutId { get; set; } = default!;

        /// <summary>
        /// States whether or not the risk is displayed. Valid values are "true" or "false".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("display")]
        public bool? Display { get; set; } = default!;

        /// <summary>
        /// The id of the order the order risk belongs to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// A message that should be displayed to the merchant to indicate the results of the fraud check.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The recommended action given to the merchant. Known values are 'cancel', 'investigate' and 'accept'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recommendation")]
        public string? Recommendation { get; set; } = default!;

        /// <summary>
        /// A number between 0 and 1 indicating percentage likelihood of being fraud.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public decimal? Score { get; set; } = default!;

        /// <summary>
        /// This indicates the source of the risk assessment. Known values are 'External', 'Internal' and 'Gateway'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateOrderRiskRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("order_risk")]
        public CreateOrderRisk? OrderRisk { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateRefund
    {
        /// <summary>
        /// The unique identifier of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// The date and time when the refund was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Whether to send a refund notification to the customer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notify")]
        public bool? Notify { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

        /// <summary>
        /// The three-letter code (ISO 4217 format) for the currency used for the refund. Note: Required whenever the shipping amount property is provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.RefundOrderAdjustment objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_adjustments")]
        public System.Collections.Generic.ICollection<RefundOrderAdjustment>? OrderAdjustments { get; set; } = default!;

        /// <summary>
        /// The date and time when the refund was imported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The optional note attached to a refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// An optional comment that explains a discrepancy between calculated and actual refund amounts. 
        /// <br/>Used to populate the reason property of the resulting order adjustment object attached to the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discrepancy_reason")]
        public string? DiscrepancyReason { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.RefundLineItem objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refund_line_items")]
        public System.Collections.Generic.ICollection<RefundLineItem>? RefundLineItems { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Transaction objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the user who performed the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// A list of duties that have been returned as part of the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duties")]
        public System.Collections.Generic.ICollection<RefundDuty>? Duties { get; set; } = default!;

        /// <summary>
        /// A list of refunded duties
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refund_duties")]
        public System.Collections.Generic.ICollection<RefundDutyType>? RefundDuties { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateRefundRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("refund")]
        public CreateRefund? Refund { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateTransaction
    {
        /// <summary>
        /// The amount of money that the transaction was for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The authorization code associated with the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorization")]
        public string? Authorization { get; set; } = default!;

        /// <summary>
        /// The date and time when the transaction was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The unique identifier for the device.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public string? DeviceId { get; set; } = default!;

        /// <summary>
        /// The name of the gateway the transaction was issued through.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]
        public string? Gateway { get; set; } = default!;

        /// <summary>
        /// The origin of the transaction. This is set by Shopify and cannot be overridden. Example values include: 'web', 'pos', 'iphone', 'android'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The origin of the transaction. Set to "external" to create a cash transaction for the associated order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payment_details")]
        public PaymentDetails? PaymentDetails { get; set; } = default!;

        /// <summary>
        /// The kind of transaction. Known values are 'authorization', 'capture', 'sale', 'void' and 'refund'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        public string? Kind { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Shopify does not currently offer documentation for this object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public object? Receipt { get; set; } = default!;

        /// <summary>
        /// A standardized error code, e.g. 'incorrect_number', independent of the payment provider. Value can be null. A full list of known values can be found at https://help.shopify.com/api/reference/transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error_code")]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// The status of the transaction. Valid values are: pending, failure, success or error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// Whether the transaction is for testing purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// The unique identifier for the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parent_id")]
        public long? ParentId { get; set; } = default!;

        /// <summary>
        /// The maximum amount that can be refunded
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maximum_refundable")]
        public decimal? MaximumRefundable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency_exchange_adjustment")]
        public CurrencyExchangeAdjustment? CurrencyExchangeAdjustment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateTransactionRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public CreateTransaction? Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CurrencyExchangeAdjustment
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// The difference between the amounts on the associated transaction and the parent transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("adjustment")]
        public decimal? Adjustment { get; set; } = default!;

        /// <summary>
        /// The amount of the parent transaction in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("original_amount")]
        public decimal? OriginalAmount { get; set; } = default!;

        /// <summary>
        /// The amount of the associated transaction in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("final_amount")]
        public decimal? FinalAmount { get; set; } = default!;

        /// <summary>
        /// The shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DiscountAllocation
    {
        /// <summary>
        /// The discount amount allocated to the line (not sure why it is a string)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The index of the associated discount application in the order's discount_applications list.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_application_index")]
        public long? DiscountApplicationIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount_set")]
        public PriceSet? AmountSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DiscountApplication
    {
        /// <summary>
        /// The discount application type. Valid values:
        /// <br/>manual: The discount was manually applied by the merchant(for example, by using an app or creating a draft order).
        /// <br/>script: The discount was applied by a Shopify Script.
        /// <br/>discount_code: The discount was applied by a discount code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The discount code that was used to apply the discount. Available only for discount code applications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// The title of the discount application, as defined by the merchant. Available only for manual discount applications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// The description of the discount application, as defined by the merchant or the Shopify Script. Available only for manual and script discount applications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The value of the discount application as a decimal. This represents the intention of the discount application.
        /// <br/>For example, if the intent was to apply a 20% discount, then the value will be 20.0.
        /// <br/>If the intent was to apply a $15 discount, then the value will be 15.0.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The type of the value. Valid values:
        /// <br/>fixed_amount: A fixed amount discount value in the currency of the order.
        /// <br/>percentage: A percentage discount value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? ValueType { get; set; } = default!;

        /// <summary>
        /// The method by which the discount application value has been allocated to entitled lines. Valid values:
        /// <br/>across: The value is spread across all entitled lines.
        /// <br/>each: The value is applied onto every entitled line.
        /// <br/>one: The value is applied onto a single line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allocation_method")]
        public string? AllocationMethod { get; set; } = default!;

        /// <summary>
        /// The lines on the order, of the type defined by target_type, that the discount is allocated over. Valid values:
        /// <br/>all: The discount is allocated onto all lines,
        /// <br/>entitled: The discount is allocated only onto lines it is entitled for.
        /// <br/>explicit: The discount is allocated onto explicitly selected lines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target_selection")]
        public string? TargetSelection { get; set; } = default!;

        /// <summary>
        /// The type of line on the order that the discount is applicable on. Valid values:
        /// <br/>line_item: The discount applies to line items.
        /// <br/>shipping_line: The discount applies to shipping lines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target_type")]
        public string? TargetType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DraftLineItem
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillable_quantity")]
        public int? FulfillableQuantity { get; set; } = default!;

        /// <summary>
        /// Service provider who is doing the fulfillment. Valid values are either "manual" or the name of the provider. eg: "amazon", "shipwire", etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_service")]
        public string? FulfillmentService { get; set; } = default!;

        /// <summary>
        /// The fulfillment status of this line item. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The weight of the item in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grams")]
        public long? Grams { get; set; } = default!;

        /// <summary>
        /// The price of the item before discounts have been applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal? Price { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the product in the fulfillment. Can be null if the original product associated with the order is deleted at a later date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("product_id")]
        public long? ProductId { get; set; } = default!;

        /// <summary>
        /// The number of products that were purchased.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// States whether or not the fulfillment requires shipping.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requires_shipping")]
        public bool? RequiresShipping { get; set; } = default!;

        /// <summary>
        /// A unique identifier of the item in the fulfillment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = default!;

        /// <summary>
        /// The title of the product.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// The id of the product variant. Can be null if the product purchased is not a variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_id")]
        public long? VariantId { get; set; } = default!;

        /// <summary>
        /// The title of the product variant. Can be null if the product purchased is not a variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_title")]
        public string? VariantTitle { get; set; } = default!;

        /// <summary>
        /// The name of the product variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The name of the supplier of the item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        /// <summary>
        /// States whether the order used a gift card.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gift_card")]
        public bool? GiftCard { get; set; } = default!;

        /// <summary>
        /// States whether or not the product was taxable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxable")]
        public bool? Taxable { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the taxes applicable to this OpenShopify.Admin.Builder.Models.LineItem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// The payment gateway used to tender the tip, such as shopify_payments. Present only on tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip_payment_gateway")]
        public string? TipPaymentGateway { get; set; } = default!;

        /// <summary>
        /// The payment method used to tender the tip, such as Visa. Present only on tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip_payment_method")]
        public string? TipPaymentMethod { get; set; } = default!;

        /// <summary>
        /// The total discount amount applied to this line item. This value is not subtracted in the line item price.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discount")]
        public decimal? TotalDiscount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discount_set")]
        public PriceSet? TotalDiscountSet { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_allocations")]
        public System.Collections.Generic.ICollection<DiscountAllocation>? DiscountAllocations { get; set; } = default!;

        /// <summary>
        /// An array of custom information for an item that has been added to the cart.
        /// <br/>Often used to provide product customization options.
        /// <br/>An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the taxes applicable to this OpenShopify.Admin.Builder.Models.LineItem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<LineItemProperty>? Properties { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_inventory_management")]
        public string? VariantInventoryManagement { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("product_exists")]
        public bool? ProductExists { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price_set")]
        public PriceSet? PriceSet { get; set; } = default!;

        /// <summary>
        /// A list of duty objects, each containing information about a duty on the line item
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duties")]
        public System.Collections.Generic.ICollection<LineItemDuty>? Duties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin_location")]
        public LineItemOriginLocation? OriginLocation { get; set; } = default!;

        /// <summary>
        /// Indicates if this is a product variant line item, or a custom line item. If set to true indicates a custom line item. If set to false indicates a product variant line item. This is a read only field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("custom")]
        public bool? Custom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]
        public AppliedDiscount? AppliedDiscount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DraftOrderMetafield
    {
        /// <summary>
        /// The date and time when the metafield was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the metafield was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Identifier for the metafield (maximum of 30 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        /// <summary>
        /// Information to be stored as metadata. Must be either a string or an int.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        /// <summary>
        /// States whether the information in the value is stored as a 'string' or 'integer.'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? ValueType { get; set; } = default!;

        /// <summary>
        /// Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string? Namespace { get; set; } = default!;

        /// <summary>
        /// Additional information about the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_id")]
        public long? OwnerId { get; set; } = default!;

        /// <summary>
        /// The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_resource")]
        public string? OwnerResource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DraftShippingLine
    {
        /// <summary>
        /// Whether this is a regular shipping line or custom shipping line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("custom")]
        public bool? Custom { get; set; } = default!;

        /// <summary>
        /// The handle of the shipping rate which was selected and applied. Required for regular shipping lines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("handle")]
        public string? Handle { get; set; } = default!;

        /// <summary>
        /// The title of the shipping method. Required for custom shipping lines. (maximum: 255 characters)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// The price of the shipping method. Required for custom shipping lines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal? Price { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Fulfillment
    {
        /// <summary>
        /// The date and time when the fulfillment was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// A historical record of each item in the fulfillment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<LineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// A textfield with information about the receipt.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public object? Receipt { get; set; } = default!;

        /// <summary>
        /// The status of the fulfillment. Valid values are 'pending', 'open', 'success', 'cancelled',
        /// <br/>'error' and 'failure'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the location that the fulfillment should be processed for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify. It appears to be the customer's email address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// A flag indicating whether the customer should be notified. If set to true, an email will be
        /// <br/>sent when the fulfillment is created or updated. The default value is false for fulfillments
        /// <br/>on any orders created initially through the API. For all other orders, the default value is true.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notify_customer")]
        public bool? NotifyCustomer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("destination")]
        public Address? Destination { get; set; } = default!;

        /// <summary>
        /// The name of the shipping company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tracking_company")]
        public string? TrackingCompany { get; set; } = default!;

        /// <summary>
        /// The shipping number, provided by the shipping company. If multiple tracking numbers
        /// <br/>exist (OpenShopify.Admin.Builder.Models.FulfillmentBase.TrackingNumbers), returns the first number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tracking_number")]
        public string? TrackingNumber { get; set; } = default!;

        /// <summary>
        /// A list of shipping numbers, provided by the shipping company. May be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tracking_numbers")]
        public System.Collections.Generic.ICollection<string>? TrackingNumbers { get; set; } = default!;

        /// <summary>
        /// The tracking url, provided by the shipping company. May be null. If multiple tracking URLs
        /// <br/>exist (OpenShopify.Admin.Builder.Models.FulfillmentBase.TrackingUrls), returns the first URL.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tracking_url")]
        public string? TrackingUrl { get; set; } = default!;

        /// <summary>
        /// An array of one or more tracking urls, provided by the shipping company. May be null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tracking_urls")]
        public System.Collections.Generic.ICollection<string>? TrackingUrls { get; set; } = default!;

        /// <summary>
        /// The date and time when the fulfillment was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// States the name of the inventory management service.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_inventory_management")]
        public string? VariantInventoryManagement { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("service")]
        public string? Service { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipment_status")]
        public string? ShipmentStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class LineItem
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// The amount available to fulfill. This is the quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillable_quantity")]
        public int? FulfillableQuantity { get; set; } = default!;

        /// <summary>
        /// Service provider who is doing the fulfillment. Valid values are either "manual" or the name of the provider. eg: "amazon", "shipwire", etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_service")]
        public string? FulfillmentService { get; set; } = default!;

        /// <summary>
        /// The fulfillment status of this line item. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The weight of the item in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grams")]
        public long? Grams { get; set; } = default!;

        /// <summary>
        /// The price of the item before discounts have been applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal? Price { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the product in the fulfillment. Can be null if the original product associated with the order is deleted at a later date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("product_id")]
        public long? ProductId { get; set; } = default!;

        /// <summary>
        /// The number of products that were purchased.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// States whether or not the fulfillment requires shipping.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requires_shipping")]
        public bool? RequiresShipping { get; set; } = default!;

        /// <summary>
        /// A unique identifier of the item in the fulfillment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = default!;

        /// <summary>
        /// The title of the product.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// The id of the product variant. Can be null if the product purchased is not a variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_id")]
        public long? VariantId { get; set; } = default!;

        /// <summary>
        /// The title of the product variant. Can be null if the product purchased is not a variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_title")]
        public string? VariantTitle { get; set; } = default!;

        /// <summary>
        /// The name of the product variant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The name of the supplier of the item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        /// <summary>
        /// States whether the order used a gift card.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gift_card")]
        public bool? GiftCard { get; set; } = default!;

        /// <summary>
        /// States whether or not the product was taxable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxable")]
        public bool? Taxable { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the taxes applicable to this OpenShopify.Admin.Builder.Models.LineItem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// The payment gateway used to tender the tip, such as shopify_payments. Present only on tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip_payment_gateway")]
        public string? TipPaymentGateway { get; set; } = default!;

        /// <summary>
        /// The payment method used to tender the tip, such as Visa. Present only on tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip_payment_method")]
        public string? TipPaymentMethod { get; set; } = default!;

        /// <summary>
        /// The total discount amount applied to this line item. This value is not subtracted in the line item price.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discount")]
        public decimal? TotalDiscount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discount_set")]
        public PriceSet? TotalDiscountSet { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_allocations")]
        public System.Collections.Generic.ICollection<DiscountAllocation>? DiscountAllocations { get; set; } = default!;

        /// <summary>
        /// An array of custom information for an item that has been added to the cart.
        /// <br/>Often used to provide product customization options.
        /// <br/>An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the taxes applicable to this OpenShopify.Admin.Builder.Models.LineItem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<LineItemProperty>? Properties { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variant_inventory_management")]
        public string? VariantInventoryManagement { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("product_exists")]
        public bool? ProductExists { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price_set")]
        public PriceSet? PriceSet { get; set; } = default!;

        /// <summary>
        /// A list of duty objects, each containing information about a duty on the line item
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duties")]
        public System.Collections.Generic.ICollection<LineItemDuty>? Duties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin_location")]
        public LineItemOriginLocation? OriginLocation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class LineItemDuty
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("harmonized_system_code")]
        public string? HarmonizedSystemCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country_code_of_origin")]
        public string? CountryCodeOfOrigin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shop_money")]
        public Price? ShopMoney { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("presentment_money")]
        public Price? PresentmentMoney { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class LineItemOriginLocation
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// The two-letter code (ISO 3166-1 format) for the country of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The two-letter abbreviation for the region of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The two-letter abbreviation for the region of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The name of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// The suite number of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The suite number of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The city of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object representing a properties for OpenShopify.Admin.Builder.Models.LineItem.Properties
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class LineItemProperty
    {
        /// <summary>
        /// The name of the note attribute.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public object? Name { get; set; } = default!;

        /// <summary>
        /// The value of the note attribute.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An object representing a note attribute for !:Order.NoteAttributes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class NoteAttribute
    {
        /// <summary>
        /// The name of the note attribute.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The value of the note attribute.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class OrderMetafield
    {
        /// <summary>
        /// The date and time when the metafield was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the metafield was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Identifier for the metafield (maximum of 30 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        /// <summary>
        /// Information to be stored as metadata. Must be either a string or an int.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        /// <summary>
        /// States whether the information in the value is stored as a 'string' or 'integer.'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? ValueType { get; set; } = default!;

        /// <summary>
        /// Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string? Namespace { get; set; } = default!;

        /// <summary>
        /// Additional information about the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_id")]
        public long? OwnerId { get; set; } = default!;

        /// <summary>
        /// The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_resource")]
        public string? OwnerResource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PaymentDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("avs_result_code")]
        public string? AvsResultCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credit_card_bin")]
        public string? CreditCardBin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cvv_result_code")]
        public string? CvvResultCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credit_card_number")]
        public string? CreditCardNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credit_card_company")]
        public string? CreditCardCompany { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PriceSet
    {

        [System.Text.Json.Serialization.JsonPropertyName("shop_money")]
        public Price? ShopMoney { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("presentment_money")]
        public Price? PresentmentMoney { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Refund
    {
        /// <summary>
        /// The unique identifier of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// The date and time when the refund was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Whether to send a refund notification to the customer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("notify")]
        public bool? Notify { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping")]
        public Shipping? Shipping { get; set; } = default!;

        /// <summary>
        /// The three-letter code (ISO 4217 format) for the currency used for the refund. Note: Required whenever the shipping amount property is provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.RefundOrderAdjustment objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_adjustments")]
        public System.Collections.Generic.ICollection<RefundOrderAdjustment>? OrderAdjustments { get; set; } = default!;

        /// <summary>
        /// The date and time when the refund was imported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The optional note attached to a refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// An optional comment that explains a discrepancy between calculated and actual refund amounts. 
        /// <br/>Used to populate the reason property of the resulting order adjustment object attached to the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discrepancy_reason")]
        public string? DiscrepancyReason { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.RefundLineItem objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refund_line_items")]
        public System.Collections.Generic.ICollection<RefundLineItem>? RefundLineItems { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Transaction objects
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the user who performed the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// A list of duties that have been returned as part of the refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duties")]
        public System.Collections.Generic.ICollection<RefundDuty>? Duties { get; set; } = default!;

        /// <summary>
        /// A list of refunded duties
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refund_duties")]
        public System.Collections.Generic.ICollection<RefundDutyType>? RefundDuties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class RefundDuty
    {

        [System.Text.Json.Serialization.JsonPropertyName("duty_id")]
        public long? DutyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount_set")]
        public PriceSet? AmountSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class RefundDutyType
    {

        [System.Text.Json.Serialization.JsonPropertyName("duty_id")]
        public long? DutyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refund_type")]
        public string? RefundType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class RefundLineItem
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("line_item")]
        public LineItem? LineItem { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the refund line item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_item_id")]
        public long? LineItemId { get; set; } = default!;

        /// <summary>
        /// The quantity of the associated line item that was returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; } = default!;

        /// <summary>
        /// Tax amount refunded
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// Item subtotal
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal")]
        public decimal? Subtotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_set")]
        public PriceSet? SubtotalSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]
        public PriceSet? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// How this refund line item affects inventory levels.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("restock_type")]
        public string? RestockType { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the location where the items will be restocked.
        /// <br/>Required when restock_type has the value return or cancel.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class RefundOrderAdjustment
    {
        /// <summary>
        /// The object's unique id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// The unique identifier of the refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refund_id")]
        public long? RefundId { get; set; } = default!;

        /// <summary>
        /// The amount refunded (it is negative and does not include tax).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The tax amount refunded (negative).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_amount")]
        public decimal? TaxAmount { get; set; } = default!;

        /// <summary>
        /// The type of adjustment. Values include "refund_discrepancy", "shipping_refund"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        public string? Kind { get; set; } = default!;

        /// <summary>
        /// Reason for the refund
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount_set")]
        public PriceSet? AmountSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tax_amount_set")]
        public PriceSet? TaxAmountSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Shipping
    {
        /// <summary>
        /// Whether to refund all remaining shipping.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("full_refund")]
        public bool? FullRefund { get; set; } = default!;

        /// <summary>
        /// Set a specific amount to refund for shipping. Takes precedence over full_refund.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The maximum amount that can be refunded
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maximum_refundable")]
        public decimal? MaximumRefundable { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ShippingLine
    {
        /// <summary>
        /// The carrier provided identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("carrier_identifier")]
        public string? CarrierIdentifier { get; set; } = default!;

        /// <summary>
        /// A reference to the shipping method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// The phone number used for the shipment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The price of this shipping method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal? Price { get; set; } = default!;

        /// <summary>
        /// The discounted price of this shipping method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discounted_price")]
        public decimal? DiscountedPrice { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_allocations")]
        public System.Collections.Generic.ICollection<DiscountAllocation>? DiscountAllocations { get; set; } = default!;

        /// <summary>
        /// The source of the shipping method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        /// <summary>
        /// The title of the shipping method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// A list of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the taxes applicable to this OpenShopify.Admin.Builder.Models.ShippingLine.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price_set")]
        public PriceSet? PriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discounted_price_set")]
        public PriceSet? DiscountedPriceSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class TaxLine
    {
        /// <summary>
        /// The amount of tax to be charged.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal? Price { get; set; } = default!;

        /// <summary>
        /// The rate of tax to be applied.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public decimal? Rate { get; set; } = default!;

        /// <summary>
        /// The name of the tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price_set")]
        public PriceSet? PriceSet { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Transaction
    {
        /// <summary>
        /// The amount of money that the transaction was for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The authorization code associated with the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorization")]
        public string? Authorization { get; set; } = default!;

        /// <summary>
        /// The date and time when the transaction was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The unique identifier for the device.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public string? DeviceId { get; set; } = default!;

        /// <summary>
        /// The name of the gateway the transaction was issued through.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]
        public string? Gateway { get; set; } = default!;

        /// <summary>
        /// The origin of the transaction. This is set by Shopify and cannot be overridden. Example values include: 'web', 'pos', 'iphone', 'android'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The origin of the transaction. Set to "external" to create a cash transaction for the associated order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payment_details")]
        public PaymentDetails? PaymentDetails { get; set; } = default!;

        /// <summary>
        /// The kind of transaction. Known values are 'authorization', 'capture', 'sale', 'void' and 'refund'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        public string? Kind { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Shopify does not currently offer documentation for this object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]
        public object? Receipt { get; set; } = default!;

        /// <summary>
        /// A standardized error code, e.g. 'incorrect_number', independent of the payment provider. Value can be null. A full list of known values can be found at https://help.shopify.com/api/reference/transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error_code")]
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// The status of the transaction. Valid values are: pending, failure, success or error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// Whether the transaction is for testing purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// The unique identifier for the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// This property is undocumented by Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parent_id")]
        public long? ParentId { get; set; } = default!;

        /// <summary>
        /// The maximum amount that can be refunded
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maximum_refundable")]
        public decimal? MaximumRefundable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency_exchange_adjustment")]
        public CurrencyExchangeAdjustment? CurrencyExchangeAdjustment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateDraftOrder
    {
        /// <summary>
        /// The unique numeric identifier for the order associated to the draft order, once created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Name of the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the invoice was emailed to the customer, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_sent_at")]
        public System.DateTimeOffset? InvoiceSentAt { get; set; } = default!;

        /// <summary>
        /// The URL for the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_url")]
        public string? InvoiceUrl { get; set; } = default!;

        /// <summary>
        /// Product variant line item or custom line item associated to the draft order. Each draft order must include at least one line_item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<DraftLineItem>? LineItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_line")]
        public DraftShippingLine? ShippingLine { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Sets whether or not taxes are exempt for the draft order. If this field is set to false, then Shopify will refer to the taxable field for each line_item. If a customer is applied to the draft order, then Shopify will use the customer's tax_exempt field instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// An array of tax_line objects, each of which details the total taxes applicable to the order. When creating an order through the API, tax lines may be specified on the order or the line items but not both. Tax lines specified on the order are split on the taxable line items in the created order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]
        public AppliedDiscount? AppliedDiscount { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// Date at which order is created and the draft order changes to completed status. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed_at")]
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the draft order was created in Shopify, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Once a draft order is set to status completed the only further draft order modifications that can be made are adding tags or metafields. No other draft order actions are permitted.
        /// <br/>Known values are "open", "invoice_sent", and "completed".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<DraftOrderMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// An optional boolean that you can send as part of a draft order object to load customer shipping information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("use_customer_default_address")]
        public bool? UseCustomerDefaultAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateDraftOrderRequest
    {
        /// <summary>
        /// The unique numeric identifier for the order associated to the draft order, once created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Name of the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the invoice was emailed to the customer, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_sent_at")]
        public System.DateTimeOffset? InvoiceSentAt { get; set; } = default!;

        /// <summary>
        /// The URL for the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_url")]
        public string? InvoiceUrl { get; set; } = default!;

        /// <summary>
        /// Product variant line item or custom line item associated to the draft order. Each draft order must include at least one line_item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<DraftLineItem>? LineItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_line")]
        public DraftShippingLine? ShippingLine { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Sets whether or not taxes are exempt for the draft order. If this field is set to false, then Shopify will refer to the taxable field for each line_item. If a customer is applied to the draft order, then Shopify will use the customer's tax_exempt field instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// An array of tax_line objects, each of which details the total taxes applicable to the order. When creating an order through the API, tax lines may be specified on the order or the line items but not both. Tax lines specified on the order are split on the taxable line items in the created order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]
        public AppliedDiscount? AppliedDiscount { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// Date at which order is created and the draft order changes to completed status. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed_at")]
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        /// <summary>
        /// This auto-generated property is the date and time when the draft order was created in Shopify, in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified. The API returns this value in ISO 8601 format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Once a draft order is set to status completed the only further draft order modifications that can be made are adding tags or metafields. No other draft order actions are permitted.
        /// <br/>Known values are "open", "invoice_sent", and "completed".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<DraftOrderMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// An optional boolean that you can send as part of a draft order object to load customer shipping information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("use_customer_default_address")]
        public bool? UseCustomerDefaultAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("draft_order")]
        public UpdateDraftOrder? DraftOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateOrder
    {
        /// <summary>
        /// Unique identifier of the app who created the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("app_id")]
        public long? AppId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The IP address of the browser used by the customer when placing the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// Indicates whether or not the person who placed the order would like to receive email updates from the shop.
        /// <br/>This is set when checking the "I want to receive occasional emails about new products, promotions and other news" checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The reason why the order was cancelled. If the order was not cancelled, this value is null. Known values are "customer", "fraud", "inventory" and "other".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancel_reason")]
        public string? CancelReason { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was cancelled. If the order was not cancelled, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancelled_at")]
        public System.DateTimeOffset? CancelledAt { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular cart that is attached to a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]
        public string? CartToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client_details")]
        public ClientDetails? ClientDetails { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was closed. If the order was not clsoed, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was created in Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three letter language code, optionally followed by a region modifier. Example values could be 'en', 'en-CA', 'en-PIRATE'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier of the POS device used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// Applicable discount codes that can be applied to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]
        public System.Collections.Generic.ICollection<DiscountCode>? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_applications")]
        public System.Collections.Generic.ICollection<DiscountApplication>? DiscountApplications { get; set; } = default!;

        /// <summary>
        /// The order's email address. Note: On and after 2015-11-03, you should be using !:ContactEmail to refer to the customer's email address.
        /// <br/>Between 2015-11-03 and 2015-12-03, updates to an order's email will also update the customer's email. This is temporary so apps can be migrated over to
        /// <br/>doing customer updates rather than order updates to change the contact email. After 2015-12-03, updating updating an order's email will no longer update
        /// <br/>the customer's email and apps will have to use the customer update endpoint to do so.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The financial status of an order. Known values are "authorized", "paid", "pending", "partially_paid", "partially_refunded", "refunded" and "voided".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("financial_status")]
        public string? FinancialStatus { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Fulfillment objects for this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillments")]
        public System.Collections.Generic.ICollection<Fulfillment>? Fulfillments { get; set; } = default!;

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The customer's phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the buyer landed when entering the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.LineItem objects, each one containing information about an item in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<LineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the physical location at which the order was processed. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The customer's order name as represented by a number, e.g. '#1001'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// Numerical identifier unique to the shop. A number is sequential and starts at 1000.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_number")]
        public int? OrderNumber { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the order status web page. The URL will be null unless the order was created from a checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_status_url")]
        public string? OrderStatusUrl { get; set; } = default!;

        /// <summary>
        /// The list of all payment gateways used for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_gateway_names")]
        public System.Collections.Generic.ICollection<string>? PaymentGatewayNames { get; set; } = default!;

        /// <summary>
        /// The date that the order was processed at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The type of payment processing method. Known values are 'checkout', 'direct', 'manual', 'offsite', 'express', 'free' and 'none'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing_method")]
        public string? ProcessingMethod { get; set; } = default!;

        /// <summary>
        /// The website that the customer clicked on to come to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Refund objects applied to the order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]
        public System.Collections.Generic.ICollection<Refund>? Refunds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.ShippingLine objects, each of which details the shipping methods used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]
        public System.Collections.Generic.ICollection<ShippingLine>? ShippingLines { get; set; } = default!;

        /// <summary>
        /// Where the order originated. May only be set during creation, and is not writeable thereafter.
        /// <br/>Orders created via the API may be assigned any string of your choice except for "web", "pos", "iphone", and "android".
        /// <br/>Default is "api".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the total taxes applicable to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// States whether this is a test order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total amount of the discounts applied to the price of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the tips in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tip_received")]
        public decimal? TotalTipReceived { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, with taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The sum of all the weights of the line items in the order, in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]
        public long? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The unique numerical identifier for the user logged into the terminal at the time the order was processed at. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Transaction objects that detail all of the transactions in
        /// <br/>this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<OrderMetafield>? Metafields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("current_total_duties_set")]
        public PriceSet? CurrentTotalDutiesSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_total_duties_set")]
        public PriceSet? OriginalTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used used to display prices to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]
        public string? PresentmentCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price_set")]
        public PriceSet? TotalLineItemsPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts_set")]
        public PriceSet? TotalDiscountsSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_shipping_price_set")]
        public PriceSet? TotalShippingPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price_set")]
        public PriceSet? SubtotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_price_set")]
        public PriceSet? TotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]
        public PriceSet? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// Indicates whether taxes on an order are estimated. Will be set to false when taxes on an order are finalized and aren't subject to any change.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_taxes")]
        public bool? EstimatedTaxes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateOrderRequest
    {
        /// <summary>
        /// Unique identifier of the app who created the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("app_id")]
        public long? AppId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The IP address of the browser used by the customer when placing the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// Indicates whether or not the person who placed the order would like to receive email updates from the shop.
        /// <br/>This is set when checking the "I want to receive occasional emails about new products, promotions and other news" checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The reason why the order was cancelled. If the order was not cancelled, this value is null. Known values are "customer", "fraud", "inventory" and "other".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancel_reason")]
        public string? CancelReason { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was cancelled. If the order was not cancelled, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancelled_at")]
        public System.DateTimeOffset? CancelledAt { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular cart that is attached to a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]
        public string? CartToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client_details")]
        public ClientDetails? ClientDetails { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was closed. If the order was not clsoed, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was created in Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three letter language code, optionally followed by a region modifier. Example values could be 'en', 'en-CA', 'en-PIRATE'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier of the POS device used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// Applicable discount codes that can be applied to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]
        public System.Collections.Generic.ICollection<DiscountCode>? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_applications")]
        public System.Collections.Generic.ICollection<DiscountApplication>? DiscountApplications { get; set; } = default!;

        /// <summary>
        /// The order's email address. Note: On and after 2015-11-03, you should be using !:ContactEmail to refer to the customer's email address.
        /// <br/>Between 2015-11-03 and 2015-12-03, updates to an order's email will also update the customer's email. This is temporary so apps can be migrated over to
        /// <br/>doing customer updates rather than order updates to change the contact email. After 2015-12-03, updating updating an order's email will no longer update
        /// <br/>the customer's email and apps will have to use the customer update endpoint to do so.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The financial status of an order. Known values are "authorized", "paid", "pending", "partially_paid", "partially_refunded", "refunded" and "voided".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("financial_status")]
        public string? FinancialStatus { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Fulfillment objects for this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillments")]
        public System.Collections.Generic.ICollection<Fulfillment>? Fulfillments { get; set; } = default!;

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The customer's phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the buyer landed when entering the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.LineItem objects, each one containing information about an item in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<LineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the physical location at which the order was processed. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The customer's order name as represented by a number, e.g. '#1001'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// Numerical identifier unique to the shop. A number is sequential and starts at 1000.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_number")]
        public int? OrderNumber { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the order status web page. The URL will be null unless the order was created from a checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_status_url")]
        public string? OrderStatusUrl { get; set; } = default!;

        /// <summary>
        /// The list of all payment gateways used for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_gateway_names")]
        public System.Collections.Generic.ICollection<string>? PaymentGatewayNames { get; set; } = default!;

        /// <summary>
        /// The date that the order was processed at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The type of payment processing method. Known values are 'checkout', 'direct', 'manual', 'offsite', 'express', 'free' and 'none'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing_method")]
        public string? ProcessingMethod { get; set; } = default!;

        /// <summary>
        /// The website that the customer clicked on to come to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Refund objects applied to the order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]
        public System.Collections.Generic.ICollection<Refund>? Refunds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.ShippingLine objects, each of which details the shipping methods used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]
        public System.Collections.Generic.ICollection<ShippingLine>? ShippingLines { get; set; } = default!;

        /// <summary>
        /// Where the order originated. May only be set during creation, and is not writeable thereafter.
        /// <br/>Orders created via the API may be assigned any string of your choice except for "web", "pos", "iphone", and "android".
        /// <br/>Default is "api".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the total taxes applicable to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// States whether this is a test order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total amount of the discounts applied to the price of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the tips in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tip_received")]
        public decimal? TotalTipReceived { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, with taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The sum of all the weights of the line items in the order, in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]
        public long? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The unique numerical identifier for the user logged into the terminal at the time the order was processed at. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Transaction objects that detail all of the transactions in
        /// <br/>this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<OrderMetafield>? Metafields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("current_total_duties_set")]
        public PriceSet? CurrentTotalDutiesSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_total_duties_set")]
        public PriceSet? OriginalTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used used to display prices to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]
        public string? PresentmentCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price_set")]
        public PriceSet? TotalLineItemsPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts_set")]
        public PriceSet? TotalDiscountsSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_shipping_price_set")]
        public PriceSet? TotalShippingPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price_set")]
        public PriceSet? SubtotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_price_set")]
        public PriceSet? TotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]
        public PriceSet? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// Indicates whether taxes on an order are estimated. Will be set to false when taxes on an order are finalized and aren't subject to any change.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_taxes")]
        public bool? EstimatedTaxes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public UpdateOrder? Order { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateOrderRisk
    {
        /// <summary>
        /// Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order.
        /// <br/>Note: Setting this parameter does not cancel the order. This must be done by the Orders API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause_cancel")]
        public bool? CauseCancel { get; set; } = default!;

        /// <summary>
        /// The ID of the checkout that the order risk belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checkout_id")]
        public long? CheckoutId { get; set; } = default!;

        /// <summary>
        /// States whether or not the risk is displayed. Valid values are "true" or "false".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("display")]
        public bool? Display { get; set; } = default!;

        /// <summary>
        /// The id of the order the order risk belongs to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// A message that should be displayed to the merchant to indicate the results of the fraud check.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The recommended action given to the merchant. Known values are 'cancel', 'investigate' and 'accept'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recommendation")]
        public string? Recommendation { get; set; } = default!;

        /// <summary>
        /// A number between 0 and 1 indicating percentage likelihood of being fraud.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public decimal? Score { get; set; } = default!;

        /// <summary>
        /// This indicates the source of the risk assessment. Known values are 'External', 'Internal' and 'Gateway'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateOrderRiskRequest
    {
        /// <summary>
        /// Use this flag when a fraud check is accompanied with a call to the Orders API to cancel the order. This will indicate to the merchant that this risk was severe enough to force cancellation of the order.
        /// <br/>Note: Setting this parameter does not cancel the order. This must be done by the Orders API.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cause_cancel")]
        public bool? CauseCancel { get; set; } = default!;

        /// <summary>
        /// The ID of the checkout that the order risk belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checkout_id")]
        public long? CheckoutId { get; set; } = default!;

        /// <summary>
        /// States whether or not the risk is displayed. Valid values are "true" or "false".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("display")]
        public bool? Display { get; set; } = default!;

        /// <summary>
        /// The id of the order the order risk belongs to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// A message that should be displayed to the merchant to indicate the results of the fraud check.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The recommended action given to the merchant. Known values are 'cancel', 'investigate' and 'accept'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("recommendation")]
        public string? Recommendation { get; set; } = default!;

        /// <summary>
        /// A number between 0 and 1 indicating percentage likelihood of being fraud.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public decimal? Score { get; set; } = default!;

        /// <summary>
        /// This indicates the source of the risk assessment. Known values are 'External', 'Internal' and 'Gateway'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order_risk")]
        public UpdateOrderRisk? OrderRisk { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603