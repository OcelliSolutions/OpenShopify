//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ocelli.OpenShopify
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ICustomerClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of customers
        /// </summary>
        /// <param name="createdAtMax">Show customers created before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="createdAtMin">Show customers created after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="ids">Restrict results to customers specified by a comma-separated list of IDs.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to those after the specified ID.</param>
        /// <param name="updatedAtMax">Show customers last updated before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show customers last updated after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> ListCustomersAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? fields = null, string? ids = null, int? limit = null, string? pageInfo = null, int? sinceId = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> CreateCustomerAsync(CreateCustomerRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for customers that match a supplied query
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <param name="query">Text to search for in the shop's customer data.
        /// <br/>            &lt;br /&gt;&lt;strong&gt;Note:&lt;/strong&gt; Supported queries: &lt;code&gt;accepts_marketing&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;activation_date&lt;/code&gt;, &lt;code&gt;address1&lt;/code&gt;, &lt;code&gt;address2&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;company&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;customer_date&lt;/code&gt;, &lt;code&gt;customer_first_name&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;customer_last_name&lt;/code&gt;, &lt;code&gt;customer_tag&lt;/code&gt;, &lt;code&gt; email&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;email_marketing_state&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;first_order_date&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;last_abandoned_order_date&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;multipass_identifier&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;orders_count&lt;/code&gt;, &lt;code&gt;order_date&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;province&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;shop_id&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;total_spent&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;updated_at&lt;/code&gt;, &lt;code&gt;verified_email&lt;/code&gt;, &lt;code&gt;product_subscriber_status&lt;/code&gt;. All other queries
        /// <br/>            &lt;br /&gt;returns all customers.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> SearchForCustomersThatMatchSuppliedQueryAsync(string? fields = null, int? limit = null, string? pageInfo = null, string? order = null, string? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single customer
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> GetCustomerAsync(long customerId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> UpdateCustomerAsync(long customerId, UpdateCustomerRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a customer (UNDOCUMENTED)
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an account activation URL for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<AccountActivation>> CreateAccountActivationUrlForCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends an account invite to a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerInviteItem>> SendAccountInviteToCustomerAsync(long customerId, CreateCustomerInviteRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CountItem>> CountCustomersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all orders that belong to a customer
        /// </summary>
        /// <param name="status">The status of the orders to return. The status defaults to open.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<OrderList>> ListOrdersThatBelongToCustomerAsync(long customerId, string? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class CustomerClient : ShopifyClientBase, ICustomerClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public CustomerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of customers
        /// </summary>
        /// <param name="createdAtMax">Show customers created before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="createdAtMin">Show customers created after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="ids">Restrict results to customers specified by a comma-separated list of IDs.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to those after the specified ID.</param>
        /// <param name="updatedAtMax">Show customers last updated before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updatedAtMin">Show customers last updated after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> ListCustomersAsync(System.DateTimeOffset? createdAtMax = null, System.DateTimeOffset? createdAtMin = null, string? fields = null, string? ids = null, int? limit = null, string? pageInfo = null, int? sinceId = null, System.DateTimeOffset? updatedAtMax = null, System.DateTimeOffset? updatedAtMin = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers.json?");
            if (createdAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_max") + "=").Append(System.Uri.EscapeDataString(createdAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("created_at_min") + "=").Append(System.Uri.EscapeDataString(createdAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ids != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ids, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMax != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_max") + "=").Append(System.Uri.EscapeDataString(updatedAtMax.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (updatedAtMin != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("updated_at_min") + "=").Append(System.Uri.EscapeDataString(updatedAtMin.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> CreateCustomerAsync(CreateCustomerRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers.json");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches for customers that match a supplied query
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <param name="query">Text to search for in the shop's customer data.
        /// <br/>            &lt;br /&gt;&lt;strong&gt;Note:&lt;/strong&gt; Supported queries: &lt;code&gt;accepts_marketing&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;activation_date&lt;/code&gt;, &lt;code&gt;address1&lt;/code&gt;, &lt;code&gt;address2&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;company&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;customer_date&lt;/code&gt;, &lt;code&gt;customer_first_name&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;customer_last_name&lt;/code&gt;, &lt;code&gt;customer_tag&lt;/code&gt;, &lt;code&gt; email&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;email_marketing_state&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;first_order_date&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;last_abandoned_order_date&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;multipass_identifier&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;orders_count&lt;/code&gt;, &lt;code&gt;order_date&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;province&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;shop_id&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;total_spent&lt;/code&gt;,
        /// <br/>            &lt;br /&gt;&lt;code&gt;updated_at&lt;/code&gt;, &lt;code&gt;verified_email&lt;/code&gt;, &lt;code&gt;product_subscriber_status&lt;/code&gt;. All other queries
        /// <br/>            &lt;br /&gt;returns all customers.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> SearchForCustomersThatMatchSuppliedQueryAsync(string? fields = null, int? limit = null, string? pageInfo = null, string? order = null, string? query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/search.json?");
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single customer
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> GetCustomerAsync(long customerId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}.json?");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerItem>> UpdateCustomerAsync(long customerId, UpdateCustomerRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a customer (UNDOCUMENTED)
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates an account activation URL for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<AccountActivation>> CreateAccountActivationUrlForCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/account_activation_url.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountActivation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<AccountActivation>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sends an account invite to a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerInviteItem>> SendAccountInviteToCustomerAsync(long customerId, CreateCustomerInviteRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/send_invite.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerInviteItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerInviteItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of customers
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CountItem>> CountCustomersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/count.json");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CountItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all orders that belong to a customer
        /// </summary>
        /// <param name="status">The status of the orders to return. The status defaults to open.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<OrderList>> ListOrdersThatBelongToCustomerAsync(long customerId, string? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/orders.json?");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<OrderList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ICustomerAddressClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of addresses for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<AddressList>> ListAddressesForCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new address for a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> CreateAddressForCustomerAsync(long customerId, CreateCustomerAddressRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves details for a single customer address
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> GetCustomerAddressAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing customer address
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> UpdateCustomerAddressAsync(long addressId, long customerId, UpdateCustomerAddressRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes an address from a customer’s address list
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteAddressFromCustomersAddressListAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> PerformBulkOperationsForMultipleCustomerAddressesAsync(long addressIds, long customerId, string? operation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the default address for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> SetDefaultAddressForCustomerAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class CustomerAddressClient : ShopifyClientBase, ICustomerAddressClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public CustomerAddressClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of addresses for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<AddressList>> ListAddressesForCustomerAsync(long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<AddressList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new address for a customer
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> CreateAddressForCustomerAsync(long customerId, CreateCustomerAddressRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses.json");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerAddressItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerAddressItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves details for a single customer address
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> GetCustomerAddressAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses/{address_id}.json");
            urlBuilder_.Replace("{address_id}", System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerAddressItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerAddressItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates an existing customer address
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> UpdateCustomerAddressAsync(long addressId, long customerId, UpdateCustomerAddressRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses/{address_id}.json");
            urlBuilder_.Replace("{address_id}", System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerAddressItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerAddressItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes an address from a customer’s address list
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteAddressFromCustomersAddressListAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses/{address_id}.json");
            urlBuilder_.Replace("{address_id}", System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> PerformBulkOperationsForMultipleCustomerAddressesAsync(long addressIds, long customerId, string? operation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            if (addressIds == null)
                throw new System.ArgumentNullException("addressIds");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses/set.json?");
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("address_ids[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addressIds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (operation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("operation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the default address for a customer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerAddressItem>> SetDefaultAddressForCustomerAsync(long addressId, long customerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customers/{customer_id}/addresses/{address_id}/default.json");
            urlBuilder_.Replace("{address_id}", System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{customer_id}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerAddressItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerAddressItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface ICustomerSavedSearchClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of customer saved searches
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to after the specified ID.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchList>> ListCustomerSavedSearchesAsync(string? fields = null, int? limit = null, string? pageInfo = null, int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a customer saved search
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> CreateCustomerSavedSearchAsync(CreateCustomerSavedSearchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of all customer saved searches
        /// </summary>
        /// <param name="sinceId">Restrict results to after the specified ID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CountItem>> CountCustomerSavedSearchesAsync(int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single customer saved search
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> GetCustomerSavedSearchAsync(long customerSavedSearchId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a customer saved search
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> UpdateCustomerSavedSearchAsync(long customerSavedSearchId, UpdateCustomerSavedSearchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a customer saved search
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse> DeleteCustomerSavedSearchAsync(long customerSavedSearchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all customers returned by a customer saved search
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> ListCustomersReturnedByCustomerSavedSearchAsync(long customerSavedSearchId, string? fields = null, int? limit = null, string? pageInfo = null, string? order = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    internal partial class CustomerSavedSearchClient : ShopifyClientBase, ICustomerSavedSearchClient
    {
        private string _baseUrl = "https://{store_name}.myshopify.com/admin/api/{api_version}";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public CustomerSavedSearchClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a list of customer saved searches
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="sinceId">Restrict results to after the specified ID.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchList>> ListCustomerSavedSearchesAsync(string? fields = null, int? limit = null, string? pageInfo = null, int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches.json?");
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerSavedSearchList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerSavedSearchList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a customer saved search
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> CreateCustomerSavedSearchAsync(CreateCustomerSavedSearchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches.json");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerSavedSearchItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerSavedSearchItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a count of all customer saved searches
        /// </summary>
        /// <param name="sinceId">Restrict results to after the specified ID</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CountItem>> CountCustomerSavedSearchesAsync(int? sinceId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches/count.json?");
            if (sinceId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("since_id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sinceId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CountItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CountItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves a single customer saved search
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> GetCustomerSavedSearchAsync(long customerSavedSearchId, string? fields = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerSavedSearchId == null)
                throw new System.ArgumentNullException("customerSavedSearchId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches/{customer_saved_search_id}.json?");
            urlBuilder_.Replace("{customer_saved_search_id}", System.Uri.EscapeDataString(ConvertToString(customerSavedSearchId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerSavedSearchItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerSavedSearchItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a customer saved search
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerSavedSearchItem>> UpdateCustomerSavedSearchAsync(long customerSavedSearchId, UpdateCustomerSavedSearchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerSavedSearchId == null)
                throw new System.ArgumentNullException("customerSavedSearchId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches/{customer_saved_search_id}.json");
            urlBuilder_.Replace("{customer_saved_search_id}", System.Uri.EscapeDataString(ConvertToString(customerSavedSearchId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerSavedSearchItem>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerSavedSearchItem>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a customer saved search
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse> DeleteCustomerSavedSearchAsync(long customerSavedSearchId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerSavedSearchId == null)
                throw new System.ArgumentNullException("customerSavedSearchId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches/{customer_saved_search_id}.json");
            urlBuilder_.Replace("{customer_saved_search_id}", System.Uri.EscapeDataString(ConvertToString(customerSavedSearchId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return new ShopifyResponse(status_, headers_);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieves all customers returned by a customer saved search
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShopifyResponse<CustomerList>> ListCustomersReturnedByCustomerSavedSearchAsync(long customerSavedSearchId, string? fields = null, int? limit = null, string? pageInfo = null, string? order = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (customerSavedSearchId == null)
                throw new System.ArgumentNullException("customerSavedSearchId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer_saved_searches/{customer_saved_search_id}/customers.json?");
            urlBuilder_.Replace("{customer_saved_search_id}", System.Uri.EscapeDataString(ConvertToString(customerSavedSearchId, System.Globalization.CultureInfo.InvariantCulture)));
            if (fields != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageInfo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page_info") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageInfo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (order != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("order") + "=").Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return new ShopifyResponse<CustomerList>(status_, headers_, objectResponse_.Object);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AccountActivation
    {

        [System.Text.Json.Serialization.JsonPropertyName("account_activation_url")]
        public string? AccountActivationUrl { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Address
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]
        public long CustomerId { get; set; } = default!;

        /// <summary>
        /// The mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// An additional field for the mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// The country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Indicates whether this address is the default address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public bool? Default { get; set; } = default!;

        /// <summary>
        /// The first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The latitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// The name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The province or state name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two-letter province or state code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class AddressList
    {

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Address> Addresses { get; set; } = new System.Collections.ObjectModel.Collection<Address>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ClientDetails
    {
        /// <summary>
        /// Shopify does not offer documentation for this field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accept_language")]
        public string? AcceptLanguage { get; set; } = default!;

        /// <summary>
        /// The browser screen height in pixels, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_height")]
        public string? BrowserHeight { get; set; } = default!;

        /// <summary>
        /// The browser IP address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// The browser screen width in pixels, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_width")]
        public string? BrowserWidth { get; set; } = default!;

        /// <summary>
        /// A hash of the session.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("session_hash")]
        public string? SessionHash { get; set; } = default!;

        /// <summary>
        /// The browser's user agent string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_agent")]
        public string? UserAgent { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]
        public long CustomerId { get; set; } = default!;

        /// <summary>
        /// The mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// An additional field for the mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// The country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Indicates whether this address is the default address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public bool? Default { get; set; } = default!;

        /// <summary>
        /// The first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The latitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// The name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The province or state name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two-letter province or state code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomer
    {
        /// <summary>
        /// Indicates whether the customer has consented to be sent marketing material via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing")]
        public bool? AcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// A list of addresses for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        public System.Collections.Generic.ICollection<CreateAddress>? Addresses { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Currency used for customer's last order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("default_address")]
        public CreateAddress? DefaultAddress { get; set; } = default!;

        /// <summary>
        /// The email address of the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The customer's first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The customer's identifier used with Multipass login
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multipass_identifier")]
        public string? MultipassIdentifier { get; set; } = default!;

        /// <summary>
        /// The customer's last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The id of the customer's last order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_id")]
        public long? LastOrderId { get; set; } = default!;

        /// <summary>
        /// The name of the customer's last order. This is directly related to the Order's name field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_name")]
        public string? LastOrderName { get; set; } = default!;

        /// <summary>
        /// A note about the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The number of orders associated with this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orders_count")]
        public int? OrdersCount { get; set; } = default!;

        /// <summary>
        /// The phone number for the customer. Valid formats can be of different types, for example:
        /// <br/>
        /// <br/>6135551212
        /// <br/>
        /// <br/>+16135551212
        /// <br/>
        /// <br/>555-1212
        /// <br/>
        /// <br/>(613)555-1212
        /// <br/>
        /// <br/>+1 613-555-1212
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The state of the customer in a shop. Valid values are 'disabled', 'decline', 'invited' and 'enabled'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Indicates whether the customer should be charged taxes when placing orders.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// The total amount of money that the customer has spent at the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_spent")]
        public decimal? TotalSpent { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer information was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// States whether or not the email address has been verified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verified_email")]
        public bool? VerifiedEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<CustomerMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead. The date and time (ISO 8601 format) when the customer consented or objected to receiving marketing material by email. Set this value whenever the customer consents or objects to marketing materials.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing_updated_at")]
        [System.Obsolete]
        public System.DateTimeOffset? AcceptsMarketingUpdatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email_marketing_consent")]
        public EmailMarketingConsent? EmailMarketingConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sms_marketing_consent")]
        public SmsMarketingConsent? SmsMarketingConsent { get; set; } = default!;

        /// <summary>
        /// An optional password for the user. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Should be set and match OpenShopify.Admin.Builder.Models.CreateCustomer.Password. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password_confirmation")]
        public string? PasswordConfirmation { get; set; } = default!;

        /// <summary>
        /// Whether an email invite should be sent to the new customer. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("send_email_invite")]
        public bool? SendEmailInvite { get; set; } = default!;

        /// <summary>
        /// Whether a welcome email should be sent to the new customer. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("send_email_welcome")]
        public bool? SendEmailWelcome { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]
        public long CustomerId { get; set; } = default!;

        /// <summary>
        /// The mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// An additional field for the mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// The country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Indicates whether this address is the default address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public bool? Default { get; set; } = default!;

        /// <summary>
        /// The first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The latitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// The name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The province or state name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two-letter province or state code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerAddressRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_address")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomerAddress CustomerAddress { get; set; } = new CreateCustomerAddress();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerInvite
    {
        /// <summary>
        /// The email address of the customer to be invited
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public string? To { get; set; } = default!;

        /// <summary>
        /// The sender of the email
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// the subject
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// a custom message to include
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("custom_message")]
        public string? CustomMessage { get; set; } = default!;

        /// <summary>
        /// blind copy addresses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bcc")]
        public System.Collections.Generic.ICollection<string>? Bcc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerInviteRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_invite")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomerInvite CustomerInvite { get; set; } = new CreateCustomerInvite();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomer Customer { get; set; } = new CreateCustomer();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerSavedSearch
    {
        /// <summary>
        /// The name given by the shop owner to the customer saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The set of conditions that determines which customers will be returned by the saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string? Query { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CreateCustomerSavedSearchRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_saved_search")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateCustomerSavedSearch CustomerSavedSearch { get; set; } = new CreateCustomerSavedSearch();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Customer
    {
        /// <summary>
        /// Indicates whether the customer has consented to be sent marketing material via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing")]
        public bool? AcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// A list of addresses for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        public System.Collections.Generic.ICollection<CustomerAddress>? Addresses { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Currency used for customer's last order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("default_address")]
        public CustomerAddress? DefaultAddress { get; set; } = default!;

        /// <summary>
        /// The email address of the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The customer's first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The customer's identifier used with Multipass login
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multipass_identifier")]
        public string? MultipassIdentifier { get; set; } = default!;

        /// <summary>
        /// The customer's last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The id of the customer's last order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_id")]
        public long? LastOrderId { get; set; } = default!;

        /// <summary>
        /// The name of the customer's last order. This is directly related to the Order's name field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_name")]
        public string? LastOrderName { get; set; } = default!;

        /// <summary>
        /// A note about the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The number of orders associated with this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orders_count")]
        public int? OrdersCount { get; set; } = default!;

        /// <summary>
        /// The phone number for the customer. Valid formats can be of different types, for example:
        /// <br/>
        /// <br/>6135551212
        /// <br/>
        /// <br/>+16135551212
        /// <br/>
        /// <br/>555-1212
        /// <br/>
        /// <br/>(613)555-1212
        /// <br/>
        /// <br/>+1 613-555-1212
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The state of the customer in a shop. Valid values are 'disabled', 'decline', 'invited' and 'enabled'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Indicates whether the customer should be charged taxes when placing orders.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// The total amount of money that the customer has spent at the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_spent")]
        public decimal? TotalSpent { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer information was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// States whether or not the email address has been verified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verified_email")]
        public bool? VerifiedEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<CustomerMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead. The date and time (ISO 8601 format) when the customer consented or objected to receiving marketing material by email. Set this value whenever the customer consents or objects to marketing materials.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing_updated_at")]
        [System.Obsolete]
        public System.DateTimeOffset? AcceptsMarketingUpdatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email_marketing_consent")]
        public EmailMarketingConsent? EmailMarketingConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sms_marketing_consent")]
        public SmsMarketingConsent? SmsMarketingConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]
        public long CustomerId { get; set; } = default!;

        /// <summary>
        /// The mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// An additional field for the mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// The country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Indicates whether this address is the default address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public bool? Default { get; set; } = default!;

        /// <summary>
        /// The first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The latitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// The name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The province or state name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two-letter province or state code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerAddressItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address CustomerAddress { get; set; } = new Address();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerInvite
    {
        /// <summary>
        /// The email address of the customer to be invited
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public string? To { get; set; } = default!;

        /// <summary>
        /// The sender of the email
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// the subject
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// a custom message to include
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("custom_message")]
        public string? CustomMessage { get; set; } = default!;

        /// <summary>
        /// blind copy addresses
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bcc")]
        public System.Collections.Generic.ICollection<string>? Bcc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerInviteItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_invite")]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerInvite CustomerInvite { get; set; } = new CustomerInvite();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Customer Customer { get; set; } = new Customer();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerList
    {

        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Customer> Customers { get; set; } = new System.Collections.ObjectModel.Collection<Customer>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerMetafield
    {
        /// <summary>
        /// The date and time when the metafield was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the metafield was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Identifier for the metafield (maximum of 30 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        /// <summary>
        /// Information to be stored as metadata. Must be either a string or an int.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        /// <summary>
        /// States whether the information in the value is stored as a 'string' or 'integer.'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? ValueType { get; set; } = default!;

        /// <summary>
        /// Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string? Namespace { get; set; } = default!;

        /// <summary>
        /// Additional information about the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_id")]
        public long? OwnerId { get; set; } = default!;

        /// <summary>
        /// The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_resource")]
        public string? OwnerResource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerSavedSearch
    {
        /// <summary>
        /// The name given by the shop owner to the customer saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The set of conditions that determines which customers will be returned by the saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string? Query { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerSavedSearchItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_saved_search")]
        [System.ComponentModel.DataAnnotations.Required]
        public CustomerSavedSearch CustomerSavedSearch { get; set; } = new CustomerSavedSearch();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CustomerSavedSearchList
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_saved_searches")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerSavedSearch> CustomerSavedSearches { get; set; } = new System.Collections.ObjectModel.Collection<CustomerSavedSearch>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class EmailMarketingConsent
    {
        /// <summary>
        /// The current email marketing state for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("opt_in_level")]
        public string? OptInLevel { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer consented to receive marketing material by email. If no date is provided, then the date and time when the consent information was sent is used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consent_updated_at")]
        public System.DateTimeOffset? ConsentUpdatedAt { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Order
    {
        /// <summary>
        /// Unique identifier of the app who created the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("app_id")]
        public long? AppId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]
        public Address? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The IP address of the browser used by the customer when placing the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// Indicates whether or not the person who placed the order would like to receive email updates from the shop.
        /// <br/>This is set when checking the "I want to receive occasional emails about new products, promotions and other news" checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The reason why the order was cancelled. If the order was not cancelled, this value is null. Known values are "customer", "fraud", "inventory" and "other".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancel_reason")]
        public string? CancelReason { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was cancelled. If the order was not cancelled, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancelled_at")]
        public System.DateTimeOffset? CancelledAt { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular cart that is attached to a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]
        public string? CartToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client_details")]
        public ClientDetails? ClientDetails { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was closed. If the order was not clsoed, this value is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was created in Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three letter language code, optionally followed by a region modifier. Example values could be 'en', 'en-CA', 'en-PIRATE'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier of the POS device used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// Applicable discount codes that can be applied to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]
        public System.Collections.Generic.ICollection<DiscountCode>? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// An ordered list of amounts allocated by discount applications. Each discount allocation is associated to a particular discount application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_applications")]
        public System.Collections.Generic.ICollection<DiscountApplication>? DiscountApplications { get; set; } = default!;

        /// <summary>
        /// The order's email address. Note: On and after 2015-11-03, you should be using !:ContactEmail to refer to the customer's email address.
        /// <br/>Between 2015-11-03 and 2015-12-03, updates to an order's email will also update the customer's email. This is temporary so apps can be migrated over to
        /// <br/>doing customer updates rather than order updates to change the contact email. After 2015-12-03, updating updating an order's email will no longer update
        /// <br/>the customer's email and apps will have to use the customer update endpoint to do so.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The financial status of an order. Known values are "authorized", "paid", "pending", "partially_paid", "partially_refunded", "refunded" and "voided".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("financial_status")]
        public string? FinancialStatus { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Fulfillment objects for this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillments")]
        public System.Collections.Generic.ICollection<Fulfillment>? Fulfillments { get; set; } = default!;

        /// <summary>
        /// The fulfillment status for this order. Known values are 'fulfilled', 'null' and 'partial'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The customer's phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors, commonly used for filtering and searching, formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the buyer landed when entering the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.LineItem objects, each one containing information about an item in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]
        public System.Collections.Generic.ICollection<LineItem>? LineItems { get; set; } = default!;

        /// <summary>
        /// The unique numeric identifier for the physical location at which the order was processed. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The customer's order name as represented by a number, e.g. '#1001'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]
        public System.Collections.Generic.ICollection<NoteAttribute>? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// Numerical identifier unique to the shop. A number is sequential and starts at 1000.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the order. This one is used by the shop owner and customer.
        /// <br/>This is different from the id property, which is also a unique numeric identifier for the order, but used for API purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_number")]
        public int? OrderNumber { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the order status web page. The URL will be null unless the order was created from a checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_status_url")]
        public string? OrderStatusUrl { get; set; } = default!;

        /// <summary>
        /// The list of all payment gateways used for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_gateway_names")]
        public System.Collections.Generic.ICollection<string>? PaymentGatewayNames { get; set; } = default!;

        /// <summary>
        /// The date that the order was processed at.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// The type of payment processing method. Known values are 'checkout', 'direct', 'manual', 'offsite', 'express', 'free' and 'none'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing_method")]
        public string? ProcessingMethod { get; set; } = default!;

        /// <summary>
        /// The website that the customer clicked on to come to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// The list of OpenShopify.Admin.Builder.Models.Refund objects applied to the order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]
        public System.Collections.Generic.ICollection<Refund>? Refunds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]
        public Address? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.ShippingLine objects, each of which details the shipping methods used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]
        public System.Collections.Generic.ICollection<ShippingLine>? ShippingLines { get; set; } = default!;

        /// <summary>
        /// Where the order originated. May only be set during creation, and is not writeable thereafter.
        /// <br/>Orders created via the API may be assigned any string of your choice except for "web", "pos", "iphone", and "android".
        /// <br/>Default is "api".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// Price of the order before shipping and taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.TaxLine objects, each of which details the total taxes applicable to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]
        public System.Collections.Generic.ICollection<TaxLine>? TaxLines { get; set; } = default!;

        /// <summary>
        /// States whether or not taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// States whether this is a test order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// Unique identifier for a particular order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total amount of the discounts applied to the price of the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the tips in the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tip_received")]
        public decimal? TotalTipReceived { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, with taxes and discounts included (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order (must be positive).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The sum of all the weights of the line items in the order, in grams.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]
        public long? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was last modified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The unique numerical identifier for the user logged into the terminal at the time the order was processed at. Only present on orders processed at point of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// An array of OpenShopify.Admin.Builder.Models.Transaction objects that detail all of the transactions in
        /// <br/>this order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactions")]
        public System.Collections.Generic.ICollection<Transaction>? Transactions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<OrderMetafield>? Metafields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("current_total_duties_set")]
        public PriceSet? CurrentTotalDutiesSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_total_duties_set")]
        public PriceSet? OriginalTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// The three letter code (ISO 4217) for the currency used used to display prices to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]
        public string? PresentmentCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price_set")]
        public PriceSet? TotalLineItemsPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts_set")]
        public PriceSet? TotalDiscountsSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_shipping_price_set")]
        public PriceSet? TotalShippingPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price_set")]
        public PriceSet? SubtotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_price_set")]
        public PriceSet? TotalPriceSet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]
        public PriceSet? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// Indicates whether taxes on an order are estimated. Will be set to false when taxes on an order are finalized and aren't subject to any change.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_taxes")]
        public bool? EstimatedTaxes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class OrderList
    {

        [System.Text.Json.Serialization.JsonPropertyName("orders")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Order> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Order>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SmsMarketingConsent
    {
        /// <summary>
        /// The current SMS marketing state for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// The marketing subscription opt-in level, as described in the M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by SMS.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("opt_in_level")]
        public string? OptInLevel { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer consented to receive marketing material by SMS. If no date is provided, then the date and time when the consent information was sent is used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consent_updated_at")]
        public System.DateTimeOffset? ConsentUpdatedAt { get; set; } = default!;

        /// <summary>
        /// The source for whether the customer has consented to receive marketing material by SMS.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consent_collected_from")]
        public string? ConsentCollectedFrom { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomer
    {
        /// <summary>
        /// Indicates whether the customer has consented to be sent marketing material via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing")]
        public bool? AcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// A list of addresses for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        public System.Collections.Generic.ICollection<CustomerAddress>? Addresses { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// Currency used for customer's last order
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("default_address")]
        public CustomerAddress? DefaultAddress { get; set; } = default!;

        /// <summary>
        /// The email address of the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The customer's first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The customer's identifier used with Multipass login
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multipass_identifier")]
        public string? MultipassIdentifier { get; set; } = default!;

        /// <summary>
        /// The customer's last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The id of the customer's last order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_id")]
        public long? LastOrderId { get; set; } = default!;

        /// <summary>
        /// The name of the customer's last order. This is directly related to the Order's name field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_name")]
        public string? LastOrderName { get; set; } = default!;

        /// <summary>
        /// A note about the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The number of orders associated with this customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orders_count")]
        public int? OrdersCount { get; set; } = default!;

        /// <summary>
        /// The phone number for the customer. Valid formats can be of different types, for example:
        /// <br/>
        /// <br/>6135551212
        /// <br/>
        /// <br/>+16135551212
        /// <br/>
        /// <br/>555-1212
        /// <br/>
        /// <br/>(613)555-1212
        /// <br/>
        /// <br/>+1 613-555-1212
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The state of the customer in a shop. Valid values are 'disabled', 'decline', 'invited' and 'enabled'.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// Tags are additional short descriptors formatted as a string of comma-separated values.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Indicates whether the customer should be charged taxes when placing orders.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public System.Collections.Generic.ICollection<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// The total amount of money that the customer has spent at the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_spent")]
        public decimal? TotalSpent { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer information was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// States whether or not the email address has been verified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verified_email")]
        public bool? VerifiedEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metafields")]
        public System.Collections.Generic.ICollection<CustomerMetafield>? Metafields { get; set; } = default!;

        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead. The date and time (ISO 8601 format) when the customer consented or objected to receiving marketing material by email. Set this value whenever the customer consents or objects to marketing materials.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing_updated_at")]
        [System.Obsolete]
        public System.DateTimeOffset? AcceptsMarketingUpdatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email_marketing_consent")]
        public EmailMarketingConsent? EmailMarketingConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sms_marketing_consent")]
        public SmsMarketingConsent? SmsMarketingConsent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

        /// <summary>
        /// An optional password for the user. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Should be set and match OpenShopify.Admin.Builder.Models.UpdateCustomer.Password. Default is null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password_confirmation")]
        public string? PasswordConfirmation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomerAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]
        public long CustomerId { get; set; } = default!;

        /// <summary>
        /// The mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// An additional field for the mailing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// The city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        /// <summary>
        /// The country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Indicates whether this address is the default address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default")]
        public bool? Default { get; set; } = default!;

        /// <summary>
        /// The first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The latitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude. Auto-populated by Shopify on the order's Billing/Shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// The name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The province or state name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two-letter province or state code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// The ZIP or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string? Zip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomerAddressRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_address")]
        [System.ComponentModel.DataAnnotations.Required]
        public UpdateCustomerAddress CustomerAddress { get; set; } = new UpdateCustomerAddress();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public UpdateCustomer Customer { get; set; } = new UpdateCustomer();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomerSavedSearch
    {
        /// <summary>
        /// The name given by the shop owner to the customer saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The set of conditions that determines which customers will be returned by the saved search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string? Query { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The date and time when the customer saved search was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("admin_graphql_api_id")]
        public string? AdminGraphqlApiId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class UpdateCustomerSavedSearchRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("customer_saved_search")]
        [System.ComponentModel.DataAnnotations.Required]
        public UpdateCustomerSavedSearch CustomerSavedSearch { get; set; } = new UpdateCustomerSavedSearch();

    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603