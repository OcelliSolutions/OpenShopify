openapi: 3.0.1
info:
  title: Online Store
  description: Online Store
  version: '2022-04'
servers:
  - url: 'https://{store_name}.myshopify.com/admin/api/{api_version}'
    variables:
      store_name:
        default: sample_store
        description: The sub-domain of the storefront.
      api_version:
        default: '2022-04'
        description: The api version.
paths:
  '/blogs/{blog_id}/articles.json':
    get:
      tags:
        - Article
      summary: Retrieves a list of all articles from a blog
      operationId: ListArticlesFromBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: author
          in: query
          description: Filter articles by article author.
          schema:
            type: string
        - name: created_at_max
          in: query
          description: 'Show articles created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show articles created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Retrieve an article with a specific handle.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show articles published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show articles published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Retrieve results based on their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: tag
          in: query
          description: Filter articles with a specific tag.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show articles last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show articles last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Article
      summary: Creates an article for a blog
      operationId: CreateArticleForBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/blogs/{blog_id}/articles/count.json':
    get:
      tags:
        - Article
      summary: Retrieves a count of all articles from a blog
      operationId: GetCountOfAllArticlesFromBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Count articles created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count articles created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Count articles published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count articles published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Count articles with a given published status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count articles last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count articles last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/blogs/{blog_id}/articles/{article_id}.json':
    get:
      tags:
        - Article
      summary: Receive a single Article
      operationId: GetArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specifed by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Article
      summary: Updates an article
      operationId: UpdateArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Article
      summary: Deletes an article
      operationId: DeleteArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /articles/authors.json:
    get:
      tags:
        - Article
      summary: Retrieves a list of all article authors
      operationId: ListArticleAuthors
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /articles/tags.json:
    get:
      tags:
        - Article
      summary: Retrieves a list of all article tags
      operationId: ListArticleTags
      parameters:
        - name: limit
          in: query
          description: The maximum number of tags to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: popular
          in: query
          description: 'A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/blogs/{blog_id}/articles/tags.json':
    get:
      tags:
        - Article
      summary: Retrieves a list of all article tags from a specific blog
      operationId: ListArticleTagsFromSpecificBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The maximum number of tags to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: popular
          in: query
          description: 'A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/themes/{theme_id}/assets.json':
    get:
      tags:
        - Asset
      summary: Retrieves a list of assets for a theme
      operationId: ListAssetsForTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: Specify which fields to show using a comma-separated list of field names.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Asset
      summary: Creates or updates an asset for a theme
      operationId: CreateOrUpdatesAssetForTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: source_key
          in: query
          description: The path within the theme to an existing asset. Include in the body of the PUT request to create a duplicate asset.
          schema:
            type: string
        - name: src
          in: query
          description: The source URL of an image. Include in the body of the PUT request to upload the image to Shopify.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Asset
      summary: Deletes an asset from a theme
      operationId: DeleteAssetFromTheme
      parameters:
        - name: 'asset[key]'
          in: query
          description: Deletes a single asset from a theme by specifying the asset's key.
          schema:
            type: string
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs.json:
    get:
      tags:
        - Blog
      summary: Retrieve a list of all blogs
      operationId: ListBlogs
      parameters:
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
        - name: handle
          in: query
          description: Filter by blog handle
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int32
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Blog
      summary: Create a new Blog
      operationId: CreateBlog
      parameters:
        - name: title
          in: query
          description: 'The title of the blog. Maximum length: 255 characters.'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/count.json:
    get:
      tags:
        - Blog
      summary: Receive a count of all Blogs
      operationId: GetCountOfAllBlogs
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/blogs/{blog_id}.json':
    get:
      tags:
        - Blog
      summary: Receive a single Blog
      operationId: GetBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Blog
      summary: Modify an existing Blog
      operationId: UpdateBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Blog
      summary: Remove an existing Blog
      operationId: DeleteExistingBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /comments.json:
    get:
      tags:
        - Comment
      summary: Retrieves a list of comments
      operationId: ListComments
      parameters:
        - name: created_at_max
          in: query
          description: 'Show comments created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show comments created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show comments published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show comments published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results by their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: status
          in: query
          description: Filter results by their status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show comments last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show comments last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Comment
      summary: Creates a comment for an article
      operationId: CreateCommentForArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /comments/count.json:
    get:
      tags:
        - Comment
      summary: Retrieves a count of comments
      operationId: GetCountOfComments
      parameters:
        - name: created_at_max
          in: query
          description: 'Count comments created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count comments created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Count comments published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count comments published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Retrieve a count of comments with a given published status.
          schema:
            type: string
        - name: status
          in: query
          description: Retrieve a count of comments with a given status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count comments last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count comments last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}.json':
    get:
      tags:
        - Comment
      summary: Retrieves a single comment by its ID
      operationId: GetCommentByItsID
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Comment
      summary: Updates a comment of an article
      operationId: UpdateCommentOfArticle
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}/spam.json':
    post:
      tags:
        - Comment
      summary: Marks a comment as spam
      operationId: MarkCommentAsSpam
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}/not_spam.json':
    post:
      tags:
        - Comment
      summary: Marks a comment as not spam
      operationId: MarkCommentAsNotSpam
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}/approve.json':
    post:
      tags:
        - Comment
      summary: Approves a comment
      operationId: ApproveComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}/remove.json':
    post:
      tags:
        - Comment
      summary: Removes a comment
      operationId: DeleteComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/comments/{comment_id}/restore.json':
    post:
      tags:
        - Comment
      summary: Restores a previously removed comment
      operationId: RestorePreviouslyRemovedComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pages.json:
    get:
      tags:
        - Page
      summary: Retrieves a list of pages
      operationId: ListPages
      parameters:
        - name: created_at_max
          in: query
          description: 'Show pages created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show pages created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Retrieve a page with a given handle.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show pages published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show pages published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: 'Restrict results to pages with a given published status:'
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: title
          in: query
          description: Retrieve pages with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show pages last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show pages last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Page
      summary: Creates a page
      operationId: CreatePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /pages/count.json:
    get:
      tags:
        - Page
      summary: Retrieves a page count
      operationId: GetPageCount
      parameters:
        - name: created_at_max
          in: query
          description: 'Count pages created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count pages created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Show pages published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show pages published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: 'Count pages with a given published status:'
          schema:
            type: string
        - name: title
          in: query
          description: Count pages with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count pages last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count pages last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/pages/{page_id}.json':
    get:
      tags:
        - Page
      summary: Retrieves a single page by its ID
      operationId: GetPageByItsID
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Page
      summary: Updates a page
      operationId: UpdatePage
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Page
      summary: Deletes a page
      operationId: DeletePage
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /redirects.json:
    get:
      tags:
        - Redirect
      summary: Retrieves a list of URL redirects
      operationId: ListUrlRedirects
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: path
          in: query
          description: Show redirects with a given path.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: target
          in: query
          description: Show redirects with a given target.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Redirect
      summary: Creates a redirect
      operationId: CreateRedirect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRedirectRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRedirectRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /redirects/count.json:
    get:
      tags:
        - Redirect
      summary: Retrieves a count of URL redirects
      operationId: GetCountOfUrlRedirects
      parameters:
        - name: path
          in: query
          description: Count redirects with given path.
          schema:
            type: string
        - name: target
          in: query
          description: Count redirects with given target.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/redirects/{redirect_id}.json':
    get:
      tags:
        - Redirect
      summary: Retrieves a single redirect
      operationId: GetRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Redirect
      summary: Updates an existing redirect
      operationId: UpdateRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRedirectRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRedirectRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Redirect
      summary: Deletes a redirect
      operationId: DeleteRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /script_tags.json:
    get:
      tags:
        - ScriptTag
      summary: Retrieves a list of all script tags
      operationId: ListScriptTags
      parameters:
        - name: created_at_max
          in: query
          description: 'Show script tags created before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show script tags created after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int32
        - name: src
          in: query
          description: Show script tags with this URL.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show script tags last updated before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show script tags last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ScriptTag
      summary: Creates a new script tag
      operationId: CreateScriptTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScriptTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateScriptTagRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /script_tags/count.json:
    get:
      tags:
        - ScriptTag
      summary: Retrieves a count of all script tags
      operationId: GetCountOfAllScriptTags
      parameters:
        - name: src
          in: query
          description: Count only script tags with a given URL.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/script_tags/{script_tag_id}.json':
    get:
      tags:
        - ScriptTag
      summary: Retrieves a single script tag
      operationId: GetScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ScriptTag
      summary: Updates a script tag
      operationId: UpdateScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScriptTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateScriptTagRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ScriptTag
      summary: Deletes a script tag
      operationId: DeleteScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /themes.json:
    get:
      tags:
        - Theme
      summary: Retrieves a list of themes
      operationId: ListThemes
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Theme
      summary: Creates a theme
      operationId: CreateTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/themes/{theme_id}.json':
    get:
      tags:
        - Theme
      summary: Retrieves a single theme by its ID
      operationId: GetThemeByItsID
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Theme
      summary: Modify an existing Theme
      operationId: UpdateTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Theme
      summary: Remove an existing Theme
      operationId: DeleteExistingTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ArticleImage:
      type: object
      properties:
        attachment:
          type: string
          description: A base64 image string only used when creating an image. It will be converted to the OpenShopify.Admin.Builder.Models.ArticleImage.Src property.
          nullable: true
        created_at:
          type: string
          description: The date and time the image was created.
          format: date-time
          nullable: true
        src:
          type: string
          description: The image's src URL.
          nullable: true
      additionalProperties: { }
      description: Represents a Shopify article's image.
    CountItem:
      type: object
      properties:
        count:
          type: integer
          format: int32
      additionalProperties: { }
    CreateArticle:
      type: object
      properties:
        author:
          type: string
          description: The name of the author of this article
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the article was created.
          format: date-time
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for an article automatically generated from its title. It is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        published:
          type: boolean
          description: States whether or not the article is visible.
          nullable: true
        published_at:
          type: string
          description: The date and time when the article was published.
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'The text of the summary of the article, complete with HTML markup.'
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template an article is using if it is using an alternate template. If an article is using the default article.liquid template, the value returned is null.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the article was last updated.
          format: date-time
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
      additionalProperties: { }
    CreateArticleRequest:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/CreateArticle'
      additionalProperties: { }
    CreateAsset:
      type: object
      properties:
        attachment:
          type: string
          description: An asset attached to a store's theme.
          nullable: true
        checksum:
          type: string
          description: "The MD5 representation of the content, consisting of a string of 32 hexadecimal digits.\r\nMay be null if an asset has not been updated recently."
          nullable: true
        content_type:
          type: string
          description: "MIME representation of the content, consisting of the type and subtype of the asset, \r\ne.g. \"image/gif\""
          nullable: true
        created_at:
          type: string
          description: The date and time when the asset was created.
          format: date-time
          nullable: true
        key:
          type: string
          description: "The path to the asset within a shop, prefixed with the asset's 'bucket' type,\r\n e.g. 'templates/index.liquid' or 'assets/bg-body.gif'."
          nullable: true
        public_url:
          type: string
          description: The public facing URL of the asset.
          nullable: true
        size:
          type: integer
          description: The asset size in bytes.
          format: int64
          nullable: true
        source_key:
          type: string
          description: "When set in an asset and used in !:AssetService.CreateOrUpdate(long, Asset), \r\na new asset will be created and copied from an asset with the key matching this source key."
          nullable: true
        src:
          type: string
          description: Specifies the location of an asset.
          nullable: true
        theme_id:
          type: integer
          description: A unique numeric identifier for the theme.
          format: int64
          nullable: true
        updated_at:
          type: string
          description: The date and time when an asset was last updated.
          format: date-time
          nullable: true
        value:
          type: string
          description: The asset that you are adding.
          nullable: true
      additionalProperties: { }
    CreateAssetRequest:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/CreateAsset'
      additionalProperties: { }
    CreateBlog:
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\"no\" (default): Readers cannot post comments to blog articles.\r\n\"moderate\": Readers can post comments to blog articles, but comments must be moderated before they appear.\r\n\"yes\": Readers can post comments to blog articles without moderation."
          nullable: true
        created_at:
          type: string
          description: The date and time when the blog was created.
          format: date-time
          nullable: true
        feedburner:
          description: Feedburner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. This property will default to blank or "null" unless feedburner is enabled through the shop admin.
        feedburner_url:
          type: string
          description: URL to the feedburner location for blogs that have enabled feedburner through their store admin.
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for a blog automatically generated from its title. This handle is used by the Liquid templating language to refer to the blog.
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when changes were last made to the blog''s properties. Note that this is not updated when creating, modifying or deleting articles in the blog.'
          format: date-time
          nullable: true
      additionalProperties: { }
    CreateBlogRequest:
      type: object
      properties:
        blog:
          $ref: '#/components/schemas/CreateBlog'
      additionalProperties: { }
    CreateComment:
      type: object
      additionalProperties: { }
    CreateCommentRequest:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/CreateComment'
      additionalProperties: { }
    CreatePage:
      type: object
      properties:
        title:
          type: string
          description: The name of the page.
          nullable: true
        body_html:
          type: string
          description: 'The content of the page, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the page was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the page was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: The date and time when the page was published. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the page automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/PageMetafield'
      additionalProperties: { }
    CreatePageRequest:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/CreatePage'
      additionalProperties: { }
    CreateRedirect:
      type: object
      properties:
        path:
          type: string
          description: 'The "before" path to be redirected. When the user navigates to this path, they will be redirected to the path specified by target.'
          nullable: true
        target:
          type: string
          description: "The \"after\" path or URL to be redirected to. This property can be set to any path on the shop's site, or any URL, even one on a \r\ncompletely different domain."
          nullable: true
      additionalProperties: { }
    CreateRedirectRequest:
      type: object
      properties:
        redirect:
          $ref: '#/components/schemas/CreateRedirect'
      additionalProperties: { }
    CreateScriptTag:
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was created.
          format: date-time
          nullable: true
        display_scope:
          type: string
          description: 'Where the script tag should be included on the store. Known values are ''online_store'', ''order_status'' or ''all''. Defaults to ''all''.'
          nullable: true
        event:
          type: string
          description: DOM event which triggers the loading of the script. The only known value is 'onload'.
          nullable: true
        src:
          type: string
          description: Specifies the location of the ScriptTag.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was updated.
          format: date-time
          nullable: true
      additionalProperties: { }
    CreateScriptTagRequest:
      type: object
      properties:
        script_tag:
          $ref: '#/components/schemas/CreateScriptTag'
      additionalProperties: { }
    CreateTheme:
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the theme was created.
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the theme.
          nullable: true
        role:
          type: string
          description: 'Specifies how the theme is being used within the shop. Known values are ''main'', ''mobile'' and ''unpublished''.'
          nullable: true
        updated_at:
          type: string
          description: The date and time when the theme was last updated.
          format: date-time
          nullable: true
        previewable:
          type: boolean
          description: Indicates if the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Indicates if files are still being copied into place for this theme.
          nullable: true
        theme_store_id:
          type: integer
          description: The theme's store id. Can be null if not published in the store.
          format: int64
          nullable: true
      additionalProperties: { }
    CreateThemeRequest:
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/CreateTheme'
      additionalProperties: { }
    ErrorResponse:
      type: object
      properties:
        errors:
          type: string
          nullable: true
      additionalProperties: false
    PageMetafield:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the metafield was created.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the metafield was last updated.
          format: date-time
          nullable: true
        key:
          type: string
          description: Identifier for the metafield (maximum of 30 characters).
          nullable: true
        value:
          description: Information to be stored as metadata. Must be either a string or an int.
        value_type:
          type: string
          description: States whether the information in the value is stored as a 'string' or 'integer.'
          nullable: true
        namespace:
          type: string
          description: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
          nullable: true
        description:
          type: string
          description: Additional information about the metafield.
          nullable: true
        owner_id:
          type: integer
          description: 'The Id of the Shopify Resource that the metafield is associated with. This value could be the id of things like product, order, variant, collection.'
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: 'The name of the Shopify Resource that the metafield is associated with. This could be things like product, order, variant, collection.'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateArticle:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the author of this article
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the article was created.
          format: date-time
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for an article automatically generated from its title. It is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        published:
          type: boolean
          description: States whether or not the article is visible.
          nullable: true
        published_at:
          type: string
          description: The date and time when the article was published.
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'The text of the summary of the article, complete with HTML markup.'
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template an article is using if it is using an alternate template. If an article is using the default article.liquid template, the value returned is null.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the article was last updated.
          format: date-time
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateArticleRequest:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the author of this article
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the article was created.
          format: date-time
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for an article automatically generated from its title. It is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        published:
          type: boolean
          description: States whether or not the article is visible.
          nullable: true
        published_at:
          type: string
          description: The date and time when the article was published.
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'The text of the summary of the article, complete with HTML markup.'
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template an article is using if it is using an alternate template. If an article is using the default article.liquid template, the value returned is null.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the article was last updated.
          format: date-time
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        article:
          $ref: '#/components/schemas/UpdateArticle'
      additionalProperties: { }
    UpdateBlog:
      required:
        - id
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\"no\" (default): Readers cannot post comments to blog articles.\r\n\"moderate\": Readers can post comments to blog articles, but comments must be moderated before they appear.\r\n\"yes\": Readers can post comments to blog articles without moderation."
          nullable: true
        created_at:
          type: string
          description: The date and time when the blog was created.
          format: date-time
          nullable: true
        feedburner:
          description: Feedburner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. This property will default to blank or "null" unless feedburner is enabled through the shop admin.
        feedburner_url:
          type: string
          description: URL to the feedburner location for blogs that have enabled feedburner through their store admin.
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for a blog automatically generated from its title. This handle is used by the Liquid templating language to refer to the blog.
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when changes were last made to the blog''s properties. Note that this is not updated when creating, modifying or deleting articles in the blog.'
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateBlogRequest:
      required:
        - id
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\"no\" (default): Readers cannot post comments to blog articles.\r\n\"moderate\": Readers can post comments to blog articles, but comments must be moderated before they appear.\r\n\"yes\": Readers can post comments to blog articles without moderation."
          nullable: true
        created_at:
          type: string
          description: The date and time when the blog was created.
          format: date-time
          nullable: true
        feedburner:
          description: Feedburner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. This property will default to blank or "null" unless feedburner is enabled through the shop admin.
        feedburner_url:
          type: string
          description: URL to the feedburner location for blogs that have enabled feedburner through their store admin.
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for a blog automatically generated from its title. This handle is used by the Liquid templating language to refer to the blog.
          nullable: true
        tags:
          type: string
          description: 'Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        updated_at:
          type: string
          description: 'The date and time when changes were last made to the blog''s properties. Note that this is not updated when creating, modifying or deleting articles in the blog.'
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        blog:
          $ref: '#/components/schemas/UpdateBlog'
      additionalProperties: { }
    UpdateComment:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateCommentRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        comment:
          $ref: '#/components/schemas/UpdateComment'
      additionalProperties: { }
    UpdatePage:
      required:
        - id
      type: object
      properties:
        title:
          type: string
          description: The name of the page.
          nullable: true
        body_html:
          type: string
          description: 'The content of the page, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the page was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the page was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: The date and time when the page was published. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the page automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/PageMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdatePageRequest:
      required:
        - id
      type: object
      properties:
        title:
          type: string
          description: The name of the page.
          nullable: true
        body_html:
          type: string
          description: 'The content of the page, complete with HTML formatting.'
          nullable: true
        created_at:
          type: string
          description: The date and time when the page was created. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: The date and time when the page was last modified. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        published_at:
          type: string
          description: The date and time when the page was published. The API returns this value in ISO 8601 format.
          format: date-time
          nullable: true
        handle:
          type: string
          description: "A human-friendly unique string for the page automatically generated from its title.\r\nThey are used by the Liquid templating language to refer to objects."
          nullable: true
        template_suffix:
          type: string
          description: "The suffix of the liquid template being used.\r\nBy default, the original template is called product.liquid, without any suffix.\r\nAny additional templates will be: product.suffix.liquid."
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/PageMetafield'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        page:
          $ref: '#/components/schemas/UpdatePage'
      additionalProperties: { }
    UpdateRedirect:
      required:
        - id
      type: object
      properties:
        path:
          type: string
          description: 'The "before" path to be redirected. When the user navigates to this path, they will be redirected to the path specified by target.'
          nullable: true
        target:
          type: string
          description: "The \"after\" path or URL to be redirected to. This property can be set to any path on the shop's site, or any URL, even one on a \r\ncompletely different domain."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateRedirectRequest:
      required:
        - id
      type: object
      properties:
        path:
          type: string
          description: 'The "before" path to be redirected. When the user navigates to this path, they will be redirected to the path specified by target.'
          nullable: true
        target:
          type: string
          description: "The \"after\" path or URL to be redirected to. This property can be set to any path on the shop's site, or any URL, even one on a \r\ncompletely different domain."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        redirect:
          $ref: '#/components/schemas/UpdateRedirect'
      additionalProperties: { }
    UpdateScriptTag:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was created.
          format: date-time
          nullable: true
        display_scope:
          type: string
          description: 'Where the script tag should be included on the store. Known values are ''online_store'', ''order_status'' or ''all''. Defaults to ''all''.'
          nullable: true
        event:
          type: string
          description: DOM event which triggers the loading of the script. The only known value is 'onload'.
          nullable: true
        src:
          type: string
          description: Specifies the location of the ScriptTag.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was updated.
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateScriptTagRequest:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was created.
          format: date-time
          nullable: true
        display_scope:
          type: string
          description: 'Where the script tag should be included on the store. Known values are ''online_store'', ''order_status'' or ''all''. Defaults to ''all''.'
          nullable: true
        event:
          type: string
          description: DOM event which triggers the loading of the script. The only known value is 'onload'.
          nullable: true
        src:
          type: string
          description: Specifies the location of the ScriptTag.
          nullable: true
        updated_at:
          type: string
          description: The date and time when the OpenShopify.Admin.Builder.Models.ScriptTag was updated.
          format: date-time
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        script_tag:
          $ref: '#/components/schemas/UpdateScriptTag'
      additionalProperties: { }
    UpdateTheme:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the theme was created.
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the theme.
          nullable: true
        role:
          type: string
          description: 'Specifies how the theme is being used within the shop. Known values are ''main'', ''mobile'' and ''unpublished''.'
          nullable: true
        updated_at:
          type: string
          description: The date and time when the theme was last updated.
          format: date-time
          nullable: true
        previewable:
          type: boolean
          description: Indicates if the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Indicates if files are still being copied into place for this theme.
          nullable: true
        theme_store_id:
          type: integer
          description: The theme's store id. Can be null if not published in the store.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: { }
    UpdateThemeRequest:
      required:
        - id
      type: object
      properties:
        created_at:
          type: string
          description: The date and time when the theme was created.
          format: date-time
          nullable: true
        name:
          type: string
          description: The name of the theme.
          nullable: true
        role:
          type: string
          description: 'Specifies how the theme is being used within the shop. Known values are ''main'', ''mobile'' and ''unpublished''.'
          nullable: true
        updated_at:
          type: string
          description: The date and time when the theme was last updated.
          format: date-time
          nullable: true
        previewable:
          type: boolean
          description: Indicates if the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Indicates if files are still being copied into place for this theme.
          nullable: true
        theme_store_id:
          type: integer
          description: The theme's store id. Can be null if not published in the store.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        theme:
          $ref: '#/components/schemas/UpdateTheme'
      additionalProperties: { }
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Shopify-Access-Token
      in: header
security:
  - ApiKey: [ ]