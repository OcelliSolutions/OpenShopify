openapi: 3.0.1
info:
  title: Online Store
  description: Online Store
  version: '2022-10'
servers:
  - url: 'https://{store_name}.myshopify.com/admin/api/{api_version}'
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
      api_version:
        default: '2022-10'
        description: The api version.
  - url: 'https://{store_name}.myshopify.com/admin'
    description: Some endpoints do not use the standard routing. This is an alternate.
    variables:
      store_name:
        default: '{{store_name}}'
        description: The sub-domain of the storefront.
paths:
  '/blogs/{blog_id}/articles.json':
    get:
      tags:
        - Article
      summary: Retrieves a list of all articles from a blog
      description: 'Retrieves a list of all articles from a blog. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).'
      operationId: ListArticlesFromBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: author
          in: query
          description: Filter articles by article author.
          schema:
            type: string
        - name: created_at_max
          in: query
          description: 'Show articles created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show articles created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Retrieve an article with a specific handle.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show articles published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show articles published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Retrieve results based on their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          description: Filter articles with a specific tag.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show articles last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show articles last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleList'
    post:
      tags:
        - Article
      summary: Creates an article for a blog
      operationId: CreateArticleForBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleForBlogRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateArticleForBlogRequest'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleItem'
  '/blogs/{blog_id}/articles/count.json':
    get:
      tags:
        - Article
      summary: Retrieves a count of all articles from a blog
      operationId: CountArticlesFromBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: created_at_max
          in: query
          description: 'Count articles created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count articles created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Count articles published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count articles published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Count articles with a given published status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count articles last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count articles last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/blogs/{blog_id}/articles/{article_id}.json':
    get:
      tags:
        - Article
      summary: Receive a single Article
      description: Retrieves a single article
      operationId: GetArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specifed by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleItem'
    put:
      tags:
        - Article
      summary: Updates an article
      operationId: UpdateArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleItem'
    delete:
      tags:
        - Article
      summary: Deletes an article
      operationId: DeleteArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /articles/authors.json:
    get:
      tags:
        - Article
      summary: Retrieves a list of all article authors
      operationId: ListArticleAuthors
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorList'
  /articles/tags.json:
    get:
      tags:
        - Article
      summary: Retrieves a list of all article tags
      operationId: ListArticleTags
      parameters:
        - name: limit
          in: query
          description: The maximum number of tags to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: popular
          in: query
          description: 'A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
  '/blogs/{blog_id}/articles/tags.json':
    get:
      tags:
        - Article
      summary: Retrieves a list of all article tags from a specific blog
      operationId: ListArticleTagsFromSpecificBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The maximum number of tags to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: popular
          in: query
          description: 'A flag for ordering retrieved tags. If present in the request, then the results will be ordered by popularity, starting with the most popular tag.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
  '/articles/{article_id}.json':
    put:
      tags:
        - Article
      summary: Remove the image from an article
      operationId: DeleteImageFromArticle
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleItem'
  '/themes/{theme_id}/assets.json':
    get:
      tags:
        - Asset
      summary: Retrieves a list of assets for a theme
      description: "Retrieves a list of assets for a theme.\r\n\r\n**Note:** Retrieving a list of assets returns only metadata about each asset. To retrieve an asset's content, you need to retrieve the asset individually."
      operationId: ListAssetsForTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: Specify which fields to show using a comma-separated list of field names.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetList'
    put:
      tags:
        - Asset
      summary: Creates or updates an asset for a theme
      description: "Creates or updates an asset for a theme.\r\n\r\nIn the PUT request, you can include the `src` or `source_key` property to create the asset from an existing file."
      operationId: CreateOrUpdatesAssetForTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatesAssetForThemeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdatesAssetForThemeRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetItem'
    delete:
      tags:
        - Asset
      summary: Deletes an asset from a theme
      operationId: DeleteAssetFromTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: 'asset[key]'
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /blogs.json:
    get:
      tags:
        - Blog
      summary: Retrieve a list of all blogs
      description: 'Retrieve a list of all blogs. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).'
      operationId: ListBlogs
      parameters:
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
        - name: handle
          in: query
          description: Filter by blog handle
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogList'
    post:
      tags:
        - Blog
      summary: Create a new Blog
      operationId: CreateBlog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogItem'
  /blogs/count.json:
    get:
      tags:
        - Blog
      summary: Receive a count of all Blogs
      description: Get a count of all blogs
      operationId: CountBlogs
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/blogs/{blog_id}.json':
    get:
      tags:
        - Blog
      summary: Receive a single Blog
      description: Get a single blog by its ID
      operationId: GetBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: comma-separated list of fields to include in the response
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogItem'
    put:
      tags:
        - Blog
      summary: Modify an existing Blog
      description: Update a blog
      operationId: UpdateBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogItem'
    delete:
      tags:
        - Blog
      summary: Remove an existing Blog
      description: Delete a blog
      operationId: DeleteBlog
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /comments.json:
    get:
      tags:
        - Comment
      summary: Retrieves a list of comments
      description: 'Retrieves a list of comments. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).'
      operationId: ListComments
      parameters:
        - name: created_at_max
          in: query
          description: 'Show comments created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show comments created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to retrieve.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show comments published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show comments published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Filter results by their published status.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Filter results by their status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show comments last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show comments last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
    post:
      tags:
        - Comment
      summary: Creates a comment for an article
      operationId: CreateCommentForArticle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentForArticleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentForArticleRequest'
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  /comments/count.json:
    get:
      tags:
        - Comment
      summary: Retrieves a count of comments
      operationId: CountComments
      parameters:
        - name: created_at_max
          in: query
          description: 'Count comments created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count comments created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Count comments published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Count comments published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: Retrieve a count of comments with a given published status.
          schema:
            type: string
        - name: status
          in: query
          description: Retrieve a count of comments with a given status.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count comments last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count comments last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/comments/{comment_id}.json':
    get:
      tags:
        - Comment
      summary: Retrieves a single comment by its ID
      operationId: GetComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
    put:
      tags:
        - Comment
      summary: Updates a comment of an article
      operationId: UpdateCommentOfArticle
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentOfArticleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCommentOfArticleRequest'
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  '/comments/{comment_id}/spam.json':
    post:
      tags:
        - Comment
      summary: Marks a comment as spam
      operationId: MarkCommentAsSpam
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  '/comments/{comment_id}/not_spam.json':
    post:
      tags:
        - Comment
      summary: Marks a comment as not spam
      operationId: MarkCommentAsNotSpam
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  '/comments/{comment_id}/approve.json':
    post:
      tags:
        - Comment
      summary: Approves a comment
      operationId: ApproveComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  '/comments/{comment_id}/remove.json':
    post:
      tags:
        - Comment
      summary: Removes a comment
      operationId: DeleteComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  '/comments/{comment_id}/restore.json':
    post:
      tags:
        - Comment
      summary: Restores a previously removed comment
      operationId: RestorePreviouslyDeletedComment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentItem'
  /pages.json:
    get:
      tags:
        - Page
      summary: Retrieves a list of pages
      description: 'Retrieve a list of all pages. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, refer to [Make paginated requests to the REST Admin API](/api/usage/pagination-rest).'
      operationId: ListPages
      parameters:
        - name: created_at_max
          in: query
          description: 'Show pages created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show pages created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: handle
          in: query
          description: Retrieve a page with a given handle.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: published_at_max
          in: query
          description: 'Show pages published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show pages published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: 'Restrict results to pages with a given published status:'
          schema:
            $ref: '#/components/schemas/PagePublishStatus'
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          description: Retrieve pages with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show pages last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show pages last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageList'
    post:
      tags:
        - Page
      summary: Creates a page
      operationId: CreatePage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePageRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageItem'
  /pages/count.json:
    get:
      tags:
        - Page
      summary: Retrieves a page count
      operationId: GetPageCount
      parameters:
        - name: created_at_max
          in: query
          description: 'Count pages created before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Count pages created after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_max
          in: query
          description: 'Show pages published before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_at_min
          in: query
          description: 'Show pages published after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: published_status
          in: query
          description: 'Count pages with a given published status:'
          schema:
            $ref: '#/components/schemas/PagePublishStatus'
        - name: title
          in: query
          description: Count pages with a given title.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Count pages last updated before date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Count pages last updated after date (format: 2014-04-25T16:15:47-04:00).'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/pages/{page_id}.json':
    get:
      tags:
        - Page
      summary: Retrieves a single page by its ID
      operationId: GetPage
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageItem'
    put:
      tags:
        - Page
      summary: Updates a page
      operationId: UpdatePage
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePageRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageItem'
    delete:
      tags:
        - Page
      summary: Deletes a page
      operationId: DeletePage
      parameters:
        - name: page_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageItem'
  /redirects.json:
    get:
      tags:
        - Redirect
      summary: Retrieves a list of URL redirects
      description: 'Retrieves a list of URL redirects. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).'
      operationId: ListUrlRedirects
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to show.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: path
          in: query
          description: Show redirects with a given path.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: target
          in: query
          description: Show redirects with a given target.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectList'
    post:
      tags:
        - Redirect
      summary: Creates a redirect
      description: 'Creates a redirect. When you provide a full URL as the value of the `path` property, it will be saved as an absolute path without the domain. For example, `"path": "http://www.johns-apparel.com/springwear"` will be saved as `"path": "springwear"`.'
      operationId: CreateRedirect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRedirectRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRedirectRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectItem'
  /redirects/count.json:
    get:
      tags:
        - Redirect
      summary: Retrieves a count of URL redirects
      operationId: CountUrlRedirects
      parameters:
        - name: path
          in: query
          description: Count redirects with given path.
          schema:
            type: string
        - name: target
          in: query
          description: Count redirects with given target.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/redirects/{redirect_id}.json':
    get:
      tags:
        - Redirect
      summary: Retrieves a single redirect
      operationId: GetRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectItem'
    put:
      tags:
        - Redirect
      summary: Updates an existing redirect
      description: 'Updates an existing [redirect](https://shopify.dev/api/admin-rest/latest/resources/redirect)'
      operationId: UpdateRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRedirectRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRedirectRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectItem'
    delete:
      tags:
        - Redirect
      summary: Deletes a redirect
      operationId: DeleteRedirect
      parameters:
        - name: redirect_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
  /script_tags.json:
    get:
      tags:
        - ScriptTag
      summary: Retrieves a list of all script tags
      description: 'Retrieves a list of all script tags. **Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).'
      operationId: ListScriptTags
      parameters:
        - name: created_at_max
          in: query
          description: 'Show script tags created before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: created_at_min
          in: query
          description: 'Show script tags created after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return.
          schema:
            type: integer
            format: int32
        - name: page_info
          in: query
          description: A unique ID used to access a certain page of results.
          schema:
            type: string
        - name: since_id
          in: query
          description: Restrict results to after the specified ID.
          schema:
            type: integer
            format: int64
        - name: src
          in: query
          description: Show script tags with this URL.
          schema:
            type: string
        - name: updated_at_max
          in: query
          description: 'Show script tags last updated before this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
        - name: updated_at_min
          in: query
          description: 'Show script tags last updated after this date. (format: 2014-04-25T16:15:47-04:00)'
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptTagList'
    post:
      tags:
        - ScriptTag
      summary: Creates a new script tag
      operationId: CreateScriptTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScriptTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateScriptTagRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptTagItem'
  /script_tags/count.json:
    get:
      tags:
        - ScriptTag
      summary: Retrieves a count of all script tags
      operationId: CountScriptTags
      parameters:
        - name: src
          in: query
          description: Count only script tags with a given URL.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountItem'
  '/script_tags/{script_tag_id}.json':
    get:
      tags:
        - ScriptTag
      summary: Retrieves a single script tag
      operationId: GetScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: A comma-separated list of fields to include in the response.
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptTagItem'
    put:
      tags:
        - ScriptTag
      summary: Updates a script tag
      operationId: UpdateScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScriptTagRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateScriptTagRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptTagItem'
    delete:
      tags:
        - ScriptTag
      summary: Deletes a script tag
      operationId: DeleteScriptTag
      parameters:
        - name: script_tag_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptTagItem'
  /themes.json:
    get:
      tags:
        - Theme
      summary: Retrieves a list of themes
      operationId: ListThemes
      parameters:
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              description: 'The link header includes a `rel` parameter, where `relation-types` describes the relation of the linked page to the current page of results. The value can either be `previous` or `next`. If your initial request doesn''t return enough records to generate an additional page of results, then the response won''t have a link header.'
              schema:
                type: string
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeList'
    post:
      tags:
        - Theme
      summary: Creates a theme
      description: "Creates a theme by providing the public URL of a ZIP file that contains the theme. \r\n\r\nA new theme is always unpublished by default. To publish a theme when you create it, include `\"role\": \"main\"` in the POST request. The theme will be published only after all of its files have been extracted and stored by Shopify, which might take a couple of minutes."
      operationId: CreateTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
        required: true
      responses:
        '201':
          description: Created
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeItem'
  '/themes/{theme_id}.json':
    get:
      tags:
        - Theme
      summary: Retrieves a single theme by its ID
      operationId: GetTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 'Show only certain fields, specified by a comma-separated list of field names.'
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeItem'
    put:
      tags:
        - Theme
      summary: Modify an existing Theme
      description: Updates an existing theme.
      operationId: UpdateTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
        required: true
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeItem'
    delete:
      tags:
        - Theme
      summary: Remove an existing Theme
      description: 'Deletes a theme. A theme can''t be deleted while it''s uploading, updating, or if the theme is the last published theme.'
      operationId: DeleteTheme
      parameters:
        - name: theme_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
          headers:
            X-Shopify-Shop-Api-Call-Limit:
              description: How many requests you’ve made for a particular store
              schema:
                type: string
            Retry-After:
              description: Contains the number of seconds to wait until you can make a request again.
              schema:
                type: string
components:
  schemas:
    Article:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the author of the article.
          nullable: true
        blog_id:
          type: integer
          description: The ID of the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the article that's automatically generated from the article's title.The handle is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        metafields:
          type: string
          description: "The additional information attached to an Article object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        published:
          type: boolean
          description: Whether the article is visible.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the article was published.'
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'A summary of the article, which can include HTML markup. The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.'
          nullable: true
        tags:
          type: string
          description: A comma-separated list of tags. Tags are additional short descriptors formatted as a string of comma-separated values.
          nullable: true
        template_suffix:
          type: string
          description: 'The name of the template an article is using if it''s using an alternate template. If an article is using the default `article.liquid` template, then the value returned is `null`.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ArticleImage:
      type: object
      properties:
        attachment:
          type: string
          description: A base64 image string only used when creating an image. It will be converted to the OpenShopify.Admin.Builder.Models.ArticleImage.Src property.
          nullable: true
        created_at:
          type: string
          description: The date and time the image was created.
          format: date-time
          nullable: true
        src:
          type: string
          description: The image's src URL.
          nullable: true
      additionalProperties: { }
      description: Represents a Shopify article's image.
    ArticleItem:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
      additionalProperties: { }
    ArticleList:
      required:
        - articles
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
      additionalProperties: { }
    Asset:
      type: object
      properties:
        attachment:
          type: string
          description: A base64-encoded image.
          nullable: true
        checksum:
          type: string
          description: 'The [MD5](https://en.wikipedia.org/wiki/MD5) representation of the content, consisting of a string of 32 hexadecimal digits. May be null if an asset has not been updated recently.'
          nullable: true
        content_type:
          type: string
          description: 'The [MIME](https://en.wikipedia.org/wiki/Media_type) representation of the content, consisting of the type and subtype of the asset.'
          nullable: true
        key:
          type: string
          description: 'The path to the asset within a theme. It consists of the file''s directory and filename. For example, the asset `assets/bg-body-green.gif` is in the **assets** directory, so its key is `assets/bg-body-green.gif`.'
          nullable: true
        public_url:
          type: string
          description: The public-facing URL of the asset.
          nullable: true
        size:
          type: number
          description: The asset size in bytes.
          format: decimal
          nullable: true
        theme_id:
          type: integer
          description: The ID for the theme that an asset belongs to.
          format: int64
          nullable: true
        value:
          type: string
          description: 'The text content of the asset, such as the HTML and Liquid markup of a template file.'
          nullable: true
        warnings:
          type: array
          items:
            type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    AssetItem:
      required:
        - asset
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/Asset'
      additionalProperties: { }
    AssetList:
      required:
        - assets
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      additionalProperties: { }
    AuthorList:
      type: object
      properties:
        authors:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    Blog:
      required:
        - id
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\r\n*   **no (default)**: Readers cannot post comments to blog articles. \r\n*   **moderate**: Readers can post comments to blog articles, but comments must be moderated before they appear. \r\n*   **yes**: Readers can post comments to blog articles without moderation."
          nullable: true
        feedburner:
          description: 'FeedBurner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled.'
          nullable: true
        feedburner_location:
          type: string
          description: 'The URL that points to the FeedBurner location for blogs that have FeedBurner enabled. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string that is automatically generated from the title if no handle is sent during the creation of a blog. Duplicate handles are appended with an incremental number, for example, `blog-2`. The handle is customizable and is used by the Liquid templating language to refer to the blog. If you change the handle of a blog, then it can negatively affect the SEO of the shop. We recommend that you create a URL redirect to avoid any SEO issues.'
          nullable: true
        metafields:
          type: string
          description: "Attaches additional metadata to a store's resources:\r\n\r\n*   **key (required)**: Identifier for the metafield (maximum of 30 characters). \r\n*   **namespace (required)**: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters). \r\n*   **value (required)**: Information to be stored as metadata. \r\n*   **type (required)**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        tags:
          type: string
          description: 'A list of tags associated with the 200 most recent blog articles. Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3. Tags are limited to 255 characters.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        admin_graphql_api_id:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    BlogItem:
      required:
        - blog
      type: object
      properties:
        blog:
          $ref: '#/components/schemas/Blog'
      additionalProperties: { }
    BlogList:
      required:
        - blogs
      type: object
      properties:
        blogs:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
      additionalProperties: { }
    Comment:
      required:
        - id
      type: object
      properties:
        article_id:
          type: integer
          description: A unique numeric identifier for the article that the comment belongs to.
          format: int64
          nullable: true
        author:
          type: string
          description: The name of the author of the comment.
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article that the comment belongs to.
          format: int64
          nullable: true
        body:
          type: string
          description: 'The basic [Textile markup](https://en.wikipedia.org/wiki/Textile_(markup_language)) of a comment.'
          nullable: true
        body_html:
          type: string
          description: 'The text of the comment, complete with HTML markup.'
          nullable: true
        email:
          type: string
          description: The email address of the author of the comment.
          nullable: true
        ip:
          type: string
          description: The IP address from which the comment was posted.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was published.'
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/CommentStatus'
        user_agent:
          type: string
          description: The user agent string provided by the software used to create the comment (usually a browser).
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    CommentItem:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
      additionalProperties: { }
    CommentList:
      required:
        - comments
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      additionalProperties: { }
    CommentStatus:
      enum:
        - pending
        - unapproved (default)
        - published
        - spam
        - removed
      type: string
      additionalProperties: { }
    CountItem:
      type: object
      properties:
        count:
          type: integer
          format: int32
      additionalProperties: { }
    CreateArticle:
      type: object
      properties:
        author:
          type: string
          description: The name of the author of the article.
          nullable: true
        blog_id:
          type: integer
          description: The ID of the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the article that's automatically generated from the article's title.The handle is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        metafields:
          type: string
          description: "The additional information attached to an Article object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        published:
          type: boolean
          description: Whether the article is visible.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the article was published.'
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'A summary of the article, which can include HTML markup. The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.'
          nullable: true
        tags:
          type: string
          description: A comma-separated list of tags. Tags are additional short descriptors formatted as a string of comma-separated values.
          nullable: true
        template_suffix:
          type: string
          description: 'The name of the template an article is using if it''s using an alternate template. If an article is using the default `article.liquid` template, then the value returned is `null`.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
      additionalProperties: false
    CreateArticleForBlogRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/CreateArticle'
      additionalProperties: false
    CreateAsset:
      type: object
      properties:
        attachment:
          type: string
          description: A base64-encoded image.
          nullable: true
        checksum:
          type: string
          description: 'The [MD5](https://en.wikipedia.org/wiki/MD5) representation of the content, consisting of a string of 32 hexadecimal digits. May be null if an asset has not been updated recently.'
          nullable: true
        content_type:
          type: string
          description: 'The [MIME](https://en.wikipedia.org/wiki/Media_type) representation of the content, consisting of the type and subtype of the asset.'
          nullable: true
        key:
          type: string
          description: 'The path to the asset within a theme. It consists of the file''s directory and filename. For example, the asset `assets/bg-body-green.gif` is in the **assets** directory, so its key is `assets/bg-body-green.gif`.'
          nullable: true
        public_url:
          type: string
          description: The public-facing URL of the asset.
          nullable: true
        size:
          type: number
          description: The asset size in bytes.
          format: decimal
          nullable: true
        theme_id:
          type: integer
          description: The ID for the theme that an asset belongs to.
          format: int64
          nullable: true
        value:
          type: string
          description: 'The text content of the asset, such as the HTML and Liquid markup of a template file.'
          nullable: true
        warnings:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    CreateBlog:
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\r\n*   **no (default)**: Readers cannot post comments to blog articles. \r\n*   **moderate**: Readers can post comments to blog articles, but comments must be moderated before they appear. \r\n*   **yes**: Readers can post comments to blog articles without moderation."
          nullable: true
        feedburner:
          type: string
          description: 'FeedBurner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled.'
          nullable: true
        feedburner_location:
          type: string
          description: 'The URL that points to the FeedBurner location for blogs that have FeedBurner enabled. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string that is automatically generated from the title if no handle is sent during the creation of a blog. Duplicate handles are appended with an incremental number, for example, `blog-2`. The handle is customizable and is used by the Liquid templating language to refer to the blog. If you change the handle of a blog, then it can negatively affect the SEO of the shop. We recommend that you create a URL redirect to avoid any SEO issues.'
          nullable: true
        metafields:
          type: string
          description: "Attaches additional metadata to a store's resources:\r\n\r\n*   **key (required)**: Identifier for the metafield (maximum of 30 characters). \r\n*   **namespace (required)**: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters). \r\n*   **value (required)**: Information to be stored as metadata. \r\n*   **type (required)**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        tags:
          type: string
          description: 'A list of tags associated with the 200 most recent blog articles. Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3. Tags are limited to 255 characters.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        admin_graphql_api_id:
          type: string
          description: The GraphQL GID of the blog.
          nullable: true
      additionalProperties: false
    CreateBlogRequest:
      required:
        - blog
      type: object
      properties:
        blog:
          $ref: '#/components/schemas/CreateBlog'
      additionalProperties: false
    CreateCommentForArticle:
      type: object
      properties:
        article_id:
          type: integer
          description: A unique numeric identifier for the article that the comment belongs to.
          format: int64
          nullable: true
        author:
          type: string
          description: The name of the author of the comment.
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article that the comment belongs to.
          format: int64
          nullable: true
        body:
          type: string
          description: 'The basic [Textile markup](https://en.wikipedia.org/wiki/Textile_(markup_language)) of a comment.'
          nullable: true
        body_html:
          type: string
          description: 'The text of the comment, complete with HTML markup.'
          nullable: true
        email:
          type: string
          description: The email address of the author of the comment.
          nullable: true
        ip:
          type: string
          description: The IP address from which the comment was posted.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was published.'
          format: date-time
          nullable: true
        status:
          type: string
          description: "The status of the comment. Valid values:\r\n\r\n*   **pending**: The comment has been created but is awaiting spam detection. Depending on the result of the spam detection and the shop owner's comment preferences, this property will be transitioned to either `spam`, `unapproved`, or `approved`. \r\n*   **unapproved (default)**: The comment is awaiting approval by the shop owner. It's not visible to the readers of the blog. \r\n*   **published**: The comment has been approved (if the blog requires comments to be approved) and is visible to readers of the blog. \r\n*   **spam**: The comment has been marked as spam and removed from the Shopify admin. It's not visible to readers of the blog. \r\n*   **removed**: The comment has been removed by the shop owner. It's not visible to readers of the blog."
          nullable: true
        user_agent:
          type: string
          description: The user agent string provided by the software used to create the comment (usually a browser).
          nullable: true
      additionalProperties: false
    CreateCommentForArticleRequest:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/CreateCommentForArticle'
      additionalProperties: false
    CreateOrUpdatesAssetForThemeRequest:
      required:
        - asset
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/CreateAsset'
      additionalProperties: false
    CreatePage:
      type: object
      properties:
        author:
          type: string
          description: The name of the person who created the page.
          nullable: true
        body_html:
          type: string
          description: 'The text content of the page, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-friendly string for the page, generated automatically from its title. In themes, the Liquid templating language refers to a page by its handle.'
          nullable: true
        metafield:
          type: string
          description: "Additional information attached to the Page object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/docs/admin-api/rest/reference/metafield) resource."
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the page was published. Returns `null` when the page is hidden.'
          format: date-time
          nullable: true
        shop_id:
          type: integer
          description: The ID of the shop to which the page belongs.
          format: int64
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the [template](/api/liquid/objects/template) that is used to render the page. If the value is an empty string or `null`, then the default page template is used.'
          nullable: true
        title:
          type: string
          description: The title of the page.
          nullable: true
        admin_graphql_api_id:
          type: string
          description: The GraphQL GID of the page.
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.PageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.PageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.PageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
      additionalProperties: false
    CreatePageRequest:
      required:
        - page
      type: object
      properties:
        page:
          $ref: '#/components/schemas/CreatePage'
      additionalProperties: false
    CreateRedirect:
      type: object
      properties:
        path:
          type: string
          description: 'The old path to be redirected. When the user visits this path, they will be redirected to the target. (maximum: 1024 characters)'
          nullable: true
        target:
          type: string
          description: 'The target location where the user will be redirected. When the user visits the old path specified by the `path` property, they will be redirected to this location. This property can be set to any path on the shop''s site, or to an external URL. (maximum: 255 characters)'
          nullable: true
      additionalProperties: false
    CreateRedirectRequest:
      required:
        - redirect
      type: object
      properties:
        redirect:
          $ref: '#/components/schemas/CreateRedirect'
      additionalProperties: false
    CreateScriptTag:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ScriptTagEvent'
        src:
          type: string
          description: The URL of the remote script.
          nullable: true
        display_scope:
          $ref: '#/components/schemas/ScriptTagDisplayScope'
        cache:
          type: boolean
          description: "Whether the Shopify CDN can cache and serve the script tag. Valid values: \r\n\r\n*   `true`: The script will be cached and served by the CDN. The cache expires 15 minutes after the script tag is successfully returned. \r\n*   `false`: The script will be served as is. \r\n\r\n Default value: `false`."
          nullable: true
      additionalProperties: false
    CreateScriptTagRequest:
      required:
        - script_tag
      type: object
      properties:
        script_tag:
          $ref: '#/components/schemas/CreateScriptTag'
      additionalProperties: false
    CreateTheme:
      type: object
      properties:
        name:
          type: string
          description: The name of the theme.
          nullable: true
        previewable:
          type: boolean
          description: Whether the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Whether files are still being copied into place for this theme.
          nullable: true
        role:
          $ref: '#/components/schemas/ThemeRole'
        theme_store_id:
          type: integer
          description: 'A unique identifier applied to Shopify-made themes that are installed from the [Shopify Theme Store](https://themes.shopify.com/) Theme Store. Not all themes available in the Theme Store are developed by Shopify. Returns `null` if the store''s theme isn''t made by Shopify, or if it wasn''t installed from the Theme Store.'
          format: int64
          nullable: true
        src:
          type: string
          nullable: true
      additionalProperties: false
    CreateThemeRequest:
      required:
        - theme
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/CreateTheme'
      additionalProperties: false
    Metafield:
      required:
        - id
      type: object
      properties:
        description:
          type: string
          description: A description of the information that the metafield contains.
          nullable: true
        key:
          type: string
          description: 'The key of the metafield. Keys can be up to 64 characters long and can contain alphanumeric characters, hyphens, underscores, and periods.'
          nullable: true
        namespace:
          type: string
          description: A container for a group of metafields. Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name. Must have between 3-255 characters.
          nullable: true
        owner_id:
          type: integer
          description: The unique ID of the resource that the metafield is attached to.
          format: int64
          nullable: true
        owner_resource:
          type: string
          description: The type of resource that the metafield is attached to.
          nullable: true
        value:
          description: 'The data to store in the metafield. The value is always stored as a string, regardless of the metafield''s type.'
          nullable: true
        type:
          $ref: '#/components/schemas/MetafieldType'
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    MetafieldType:
      enum:
        - boolean
        - color
        - date
        - date_time
        - dimension
        - file_reference
        - json
        - multi_line_text_field
        - number_decimal
        - number_integer
        - page_reference
        - product_reference
        - rating
        - single_line_text_field
        - variant_reference
        - volume
        - weight
      type: string
      additionalProperties: { }
    Page:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the person who created the page.
          nullable: true
        body_html:
          type: string
          description: 'The text content of the page, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-friendly string for the page, generated automatically from its title. In themes, the Liquid templating language refers to a page by its handle.'
          nullable: true
        metafield:
          type: string
          description: "Additional information attached to the Page object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/docs/admin-api/rest/reference/metafield) resource."
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the page was published. Returns `null` when the page is hidden.'
          format: date-time
          nullable: true
        shop_id:
          type: integer
          description: The ID of the shop to which the page belongs.
          format: int64
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the [template](/api/liquid/objects/template) that is used to render the page. If the value is an empty string or `null`, then the default page template is used.'
          nullable: true
        title:
          type: string
          description: The title of the page.
          nullable: true
        admin_graphql_api_id:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.PageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.PageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.PageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    PageItem:
      required:
        - page
      type: object
      properties:
        page:
          $ref: '#/components/schemas/Page'
      additionalProperties: { }
    PageList:
      required:
        - pages
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/components/schemas/Page'
      additionalProperties: { }
    PagePublishStatus:
      enum:
        - published
        - unpublished
        - any
      type: string
      additionalProperties: { }
    Redirect:
      required:
        - id
      type: object
      properties:
        path:
          type: string
          description: 'The old path to be redirected. When the user visits this path, they will be redirected to the target. (maximum: 1024 characters)'
          nullable: true
        target:
          type: string
          description: 'The target location where the user will be redirected. When the user visits the old path specified by the `path` property, they will be redirected to this location. This property can be set to any path on the shop''s site, or to an external URL. (maximum: 255 characters)'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    RedirectItem:
      required:
        - redirect
      type: object
      properties:
        redirect:
          $ref: '#/components/schemas/Redirect'
      additionalProperties: { }
    RedirectList:
      required:
        - redirects
      type: object
      properties:
        redirects:
          type: array
          items:
            $ref: '#/components/schemas/Redirect'
      additionalProperties: { }
    ScriptTag:
      required:
        - id
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ScriptTagEvent'
        src:
          type: string
          description: The URL of the remote script.
          nullable: true
        display_scope:
          $ref: '#/components/schemas/ScriptTagDisplayScope'
        cache:
          type: boolean
          description: "Whether the Shopify CDN can cache and serve the script tag. Valid values: \r\n\r\n*   `true`: The script will be cached and served by the CDN. The cache expires 15 minutes after the script tag is successfully returned. \r\n*   `false`: The script will be served as is. \r\n\r\n Default value: `false`."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ScriptTagDisplayScope:
      enum:
        - online_store
        - order_status
        - all
      type: string
      additionalProperties: { }
    ScriptTagEvent:
      enum:
        - onload
      type: string
      additionalProperties: { }
    ScriptTagItem:
      required:
        - script_tag
      type: object
      properties:
        script_tag:
          $ref: '#/components/schemas/ScriptTag'
      additionalProperties: { }
    ScriptTagList:
      required:
        - script_tags
      type: object
      properties:
        script_tags:
          type: array
          items:
            $ref: '#/components/schemas/ScriptTag'
      additionalProperties: { }
    TagList:
      type: object
      properties:
        Tags:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: { }
    Theme:
      required:
        - id
      type: object
      properties:
        name:
          type: string
          description: The name of the theme.
          nullable: true
        previewable:
          type: boolean
          description: Whether the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Whether files are still being copied into place for this theme.
          nullable: true
        role:
          $ref: '#/components/schemas/ThemeRole'
        theme_store_id:
          type: integer
          description: 'A unique identifier applied to Shopify-made themes that are installed from the [Shopify Theme Store](https://themes.shopify.com/) Theme Store. Not all themes available in the Theme Store are developed by Shopify. Returns `null` if the store''s theme isn''t made by Shopify, or if it wasn''t installed from the Theme Store.'
          format: int64
          nullable: true
        src:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
        created_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.'
          format: date-time
          nullable: true
        updated_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.'
          format: date-time
          nullable: true
      additionalProperties: { }
    ThemeItem:
      required:
        - theme
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/Theme'
      additionalProperties: { }
    ThemeList:
      required:
        - themes
      type: object
      properties:
        themes:
          type: array
          items:
            $ref: '#/components/schemas/Theme'
      additionalProperties: { }
    ThemeRole:
      enum:
        - main
        - unpublished
        - demo
        - development
      type: string
      additionalProperties: { }
    UpdateArticle:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the author of the article.
          nullable: true
        blog_id:
          type: integer
          description: The ID of the blog containing the article.
          format: int64
          nullable: true
        body_html:
          type: string
          description: 'The text of the body of the article, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: A human-friendly unique string for the article that's automatically generated from the article's title.The handle is used in the article's URL.
          nullable: true
        image:
          $ref: '#/components/schemas/ArticleImage'
        metafields:
          type: string
          description: "The additional information attached to an Article object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        published:
          type: boolean
          description: Whether the article is visible.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the article was published.'
          format: date-time
          nullable: true
        summary_html:
          type: string
          description: 'A summary of the article, which can include HTML markup. The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.'
          nullable: true
        tags:
          type: string
          description: A comma-separated list of tags. Tags are additional short descriptors formatted as a string of comma-separated values.
          nullable: true
        template_suffix:
          type: string
          description: 'The name of the template an article is using if it''s using an alternate template. If an article is using the default `article.liquid` template, then the value returned is `null`.'
          nullable: true
        title:
          type: string
          description: The title of the article.
          nullable: true
        user_id:
          type: integer
          description: A unique numeric identifier for the author of the article.
          format: int64
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateArticleRequest:
      required:
        - article
      type: object
      properties:
        article:
          $ref: '#/components/schemas/UpdateArticle'
      additionalProperties: false
    UpdateBlog:
      required:
        - id
      type: object
      properties:
        commentable:
          type: string
          description: "Indicates whether readers can post comments to the blog and if comments are moderated or not. Possible values are:\r\n\r\n*   **no (default)**: Readers cannot post comments to blog articles. \r\n*   **moderate**: Readers can post comments to blog articles, but comments must be moderated before they appear. \r\n*   **yes**: Readers can post comments to blog articles without moderation."
          nullable: true
        feedburner:
          description: 'FeedBurner is a web feed management provider and can be enabled to provide custom RSS feeds for Shopify bloggers. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled.'
          nullable: true
        feedburner_location:
          type: string
          description: 'The URL that points to the FeedBurner location for blogs that have FeedBurner enabled. Google has stopped supporting FeedBurner, and new or existing blogs that are not already integrated with FeedBurner can''t use the service. This property will default to blank unless FeedBurner is enabled'
          nullable: true
        handle:
          type: string
          description: 'A human-friendly unique string that is automatically generated from the title if no handle is sent during the creation of a blog. Duplicate handles are appended with an incremental number, for example, `blog-2`. The handle is customizable and is used by the Liquid templating language to refer to the blog. If you change the handle of a blog, then it can negatively affect the SEO of the shop. We recommend that you create a URL redirect to avoid any SEO issues.'
          nullable: true
        metafields:
          type: string
          description: "Attaches additional metadata to a store's resources:\r\n\r\n*   **key (required)**: Identifier for the metafield (maximum of 30 characters). \r\n*   **namespace (required)**: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters). \r\n*   **value (required)**: Information to be stored as metadata. \r\n*   **type (required)**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/api/admin-rest/latest/resources/metafield) resource."
          nullable: true
        tags:
          type: string
          description: 'A list of tags associated with the 200 most recent blog articles. Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3. Tags are limited to 255 characters.'
          nullable: true
        template_suffix:
          type: string
          description: 'States the name of the template a blog is using if it is using an alternate template. If a blog is using the default blog.liquid template, the value returned is "null".'
          nullable: true
        title:
          type: string
          description: The title of the blog.
          nullable: true
        admin_graphql_api_id:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
      additionalProperties: false
    UpdateBlogRequest:
      required:
        - blog
      type: object
      properties:
        blog:
          $ref: '#/components/schemas/UpdateBlog'
      additionalProperties: false
    UpdateCommentOfArticle:
      required:
        - id
      type: object
      properties:
        article_id:
          type: integer
          description: A unique numeric identifier for the article that the comment belongs to.
          format: int64
          nullable: true
        author:
          type: string
          description: The name of the author of the comment.
          nullable: true
        blog_id:
          type: integer
          description: A unique numeric identifier for the blog containing the article that the comment belongs to.
          format: int64
          nullable: true
        body:
          type: string
          description: 'The basic [Textile markup](https://en.wikipedia.org/wiki/Textile_(markup_language)) of a comment.'
          nullable: true
        body_html:
          type: string
          description: 'The text of the comment, complete with HTML markup.'
          nullable: true
        email:
          type: string
          description: The email address of the author of the comment.
          nullable: true
        ip:
          type: string
          description: The IP address from which the comment was posted.
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was published.'
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/CommentStatus'
        user_agent:
          type: string
          description: The user agent string provided by the software used to create the comment (usually a browser).
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateCommentOfArticleRequest:
      required:
        - comment
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/UpdateCommentOfArticle'
      additionalProperties: false
    UpdatePage:
      required:
        - id
      type: object
      properties:
        author:
          type: string
          description: The name of the person who created the page.
          nullable: true
        body_html:
          type: string
          description: 'The text content of the page, complete with HTML markup.'
          nullable: true
        handle:
          type: string
          description: 'A unique, human-friendly string for the page, generated automatically from its title. In themes, the Liquid templating language refers to a page by its handle.'
          nullable: true
        metafield:
          type: string
          description: "Additional information attached to the Page object. It has the following properties: \r\n\r\n*   **key**: An identifier for the metafield. (maximum: 30 characters) \r\n*   **namespace**: A container for a set of metadata. Namespaces help distinguish between metadata created by different apps. (maximum: 20 characters) \r\n*   **value**: The information to be stored as metadata. \r\n*   **type**: The metafield's information type. Refer to the [full list of types](/apps/metafields/types). \r\n*   **description (optional)**: Additional information about the metafield. \r\n\r\nFor more information on attaching metadata to Shopify resources, see the [Metafield](/docs/admin-api/rest/reference/metafield) resource."
          nullable: true
        published_at:
          type: string
          description: 'The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the page was published. Returns `null` when the page is hidden.'
          format: date-time
          nullable: true
        shop_id:
          type: integer
          description: The ID of the shop to which the page belongs.
          format: int64
          nullable: true
        template_suffix:
          type: string
          description: 'The suffix of the [template](/api/liquid/objects/template) that is used to render the page. If the value is an empty string or `null`, then the default page template is used.'
          nullable: true
        title:
          type: string
          description: The title of the page.
          nullable: true
        admin_graphql_api_id:
          type: string
          nullable: true
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/Metafield'
          description: "Additional metadata about the OpenShopify.Admin.Builder.Models.PageBase. Note: This is not naturally returned with a OpenShopify.Admin.Builder.Models.PageBase response, as\r\nShopify will not return OpenShopify.Admin.Builder.Models.PageBase metafields unless specified. Instead, you need to query metafields with !:MetafieldService. \r\nUses include: Creating, updating, and deserializing webhook bodies that include them."
          nullable: true
        id:
          type: integer
          format: int64
      additionalProperties: false
    UpdatePageRequest:
      required:
        - page
      type: object
      properties:
        page:
          $ref: '#/components/schemas/UpdatePage'
      additionalProperties: false
    UpdateRedirect:
      required:
        - id
      type: object
      properties:
        path:
          type: string
          description: 'The old path to be redirected. When the user visits this path, they will be redirected to the target. (maximum: 1024 characters)'
          nullable: true
        target:
          type: string
          description: 'The target location where the user will be redirected. When the user visits the old path specified by the `path` property, they will be redirected to this location. This property can be set to any path on the shop''s site, or to an external URL. (maximum: 255 characters)'
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateRedirectRequest:
      required:
        - redirect
      type: object
      properties:
        redirect:
          $ref: '#/components/schemas/UpdateRedirect'
      additionalProperties: false
    UpdateScriptTag:
      required:
        - id
      type: object
      properties:
        event:
          $ref: '#/components/schemas/ScriptTagEvent'
        src:
          type: string
          description: The URL of the remote script.
          nullable: true
        display_scope:
          $ref: '#/components/schemas/ScriptTagDisplayScope'
        cache:
          type: boolean
          description: "Whether the Shopify CDN can cache and serve the script tag. Valid values: \r\n\r\n*   `true`: The script will be cached and served by the CDN. The cache expires 15 minutes after the script tag is successfully returned. \r\n*   `false`: The script will be served as is. \r\n\r\n Default value: `false`."
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateScriptTagRequest:
      required:
        - script_tag
      type: object
      properties:
        script_tag:
          $ref: '#/components/schemas/UpdateScriptTag'
      additionalProperties: false
    UpdateTheme:
      required:
        - id
      type: object
      properties:
        name:
          type: string
          description: The name of the theme.
          nullable: true
        previewable:
          type: boolean
          description: Whether the theme can currently be previewed.
          nullable: true
        processing:
          type: boolean
          description: Whether files are still being copied into place for this theme.
          nullable: true
        role:
          $ref: '#/components/schemas/ThemeRole'
        theme_store_id:
          type: integer
          description: 'A unique identifier applied to Shopify-made themes that are installed from the [Shopify Theme Store](https://themes.shopify.com/) Theme Store. Not all themes available in the Theme Store are developed by Shopify. Returns `null` if the store''s theme isn''t made by Shopify, or if it wasn''t installed from the Theme Store.'
          format: int64
          nullable: true
        src:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        admin_graphql_api_id:
          type: string
          nullable: true
      additionalProperties: false
    UpdateThemeRequest:
      required:
        - theme
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/UpdateTheme'
      additionalProperties: false
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Shopify-Access-Token
      in: header
security:
  - ApiKey: [ ]