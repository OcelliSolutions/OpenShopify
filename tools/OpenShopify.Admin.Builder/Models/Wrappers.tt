<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	var sections = new List<SectionTemplate>()
	{
		//new (modelName:"AccessScope", hasId:false, canCreate:false, canUpdate:false),
		new (modelName:"StorefrontAccessToken"),
		new (modelName:"Report"),
		new (modelName:"ApplicationCharge"),
		new (modelName:"ApplicationCredit"),
		new (modelName:"RecurringApplicationCharge"),
		new (modelName:"UsageCharge"),
		new (modelName:"Customer"),
		//new (modelName:"Address", "Address", "Addresses", origClass:"CustomerAddressOrig", baseClass:"CustomerAddressBase"),
		//new (modelName:"Address", "CustomerAddress", "CustomerAddresses", origClass: "AddressOrig", baseClass: "AddressBase"),
		//new (modelName:"CustomerAddress", "CustomerAddress","CustomerAddresses"),
		new (modelName:"CustomerSavedSearch", "CustomerSavedSearch", "CustomerSavedSearches"),
		new (modelName:"DeprecatedApiCall", origClass:"DeprecatedAPIcallsOrig", baseClass:"DeprecatedAPIcallsBase", hasId:false, canCreate:false, canUpdate:false),
		new (modelName:"DiscountCode", nullableId:true),
		new (modelName:"PriceRule"),
		new (modelName:"Event"),
		new (modelName:"Webhook"),
		new (modelName:"InventoryItem"),
		new (modelName:"InventoryLevel"),
		new (modelName:"Location"),
		new (modelName:"MarketingEvent"),
		new (modelName:"Metafield"),
		new (modelName:"Article"),
		new (modelName:"Asset", hasId:false),
		new (modelName:"Blog"),
		new (modelName:"Comment"),
		new (modelName:"Page"),
		new (modelName:"Redirect"),
		new (modelName:"ScriptTag"),
		new (modelName:"Theme"),
		new (modelName:"Checkout", "AbandonedCheckout","AbandonedCheckouts", hasId:false, origClass:"CheckoutOrig", baseClass:"CheckoutBase", propertyName:"checkout", propertyNamePlural:"checkouts"),
		new (modelName:"DraftOrder"),
		new (modelName:"DraftOrderInvoice", canCreate:false, canUpdate:false, hasId:false),
		new (modelName:"Order"),
		new (modelName:"OrderRisk", propertyName:"risk", propertyNamePlural:"risks"),
		new (modelName:"Refund"),
		new (modelName:"Transaction"),
		new (modelName:"GiftCard"),
		new (modelName:"User"),
		new (modelName:"Collect"),
		new (modelName:"Collection"),
		new (modelName:"CustomCollection"),
		new (modelName:"Product"),
		new (modelName:"ProductImage", propertyName:"image", propertyNamePlural:"images"),
		new (modelName:"ProductVariant", propertyName:"variant", propertyNamePlural:"variants"),
		new (modelName:"SmartCollection"),
		new (modelName:"Checkout"),
		new (modelName:"CollectionListing"),
		new (modelName:"MobilePlatformApplication"),
		new (modelName:"Payment"),
		new (modelName:"ProductResourceFeedback", hasId:false),
		new (modelName:"ProductListing"),
		new (modelName:"ResourceFeedback", hasId:false, propertyNamePlural:"resource_feedback"),
		new (modelName:"FulfillmentOrder", "AssignedFulfillmentOrder", "AssignedFulfillmentOrders",origClass:"FulfillmentOrderOrig", baseClass:"FulfillmentOrderBase", propertyName:"fulfillment_order", propertyNamePlural:"fulfillment_orders"),
		//new (modelName:"FulfillmentOrder", "CancellationRequest", "CancellationRequest", origClass:"FulfillmentOrderOrig", baseClass:"FulfillmentOrderBase", hasId:false),
		new (modelName:"CarrierService"),
		new (modelName:"Fulfillment"),
		new (modelName: "FulfillmentForOneOrManyFulfillmentOrders", propertyName:"fulfillment", propertyNamePlural:"fulfillments"),
		//new (modelName:"Fulfillment", "CreateFulfillmentForOneOrManyFulfillmentOrdersRequest", "CreateFulfillmentForOneOrManyFulfillmentOrdersRequest",origClass:"FulfillmentOrig", baseClass:"FulfillmentBase", propertyName:"fulfillment", propertyNamePlural:"fulfillments"),
		new (modelName:"FulfillmentEvent"),
		new (modelName:"FulfillmentOrder"),
		//new (modelName:"FulfillmentRequest", hasId:false),
		new (modelName:"FulfillmentService"),
		new (modelName:"LocationsForMove", propertyNamePlural:"locations_for_move", hasId:false),
		new (modelName:"Balance", hasId:false, propertyNamePlural: "balance"),
		new (modelName:"Dispute"),
		new (modelName:"DisputeEvidence"),
		new (modelName:"DisputeFileUpload"),
		new (modelName:"Payout", origClass:"PayoutsOrig", baseClass:"PayoutsBase"),
		new (modelName:"Country", "Country", "Countries"),
		new (modelName:"Currency", "Currency", "Currencies", hasId:false),
		new (modelName:"Policy", "Policy", "Policies", hasId:false),
		new (modelName:"Province"),
		new (modelName:"ShippingZone"),
		new (modelName:"Shop"),
		new (modelName:"TenderTransaction"),
		new (modelName:"DiscountCodeCreation", nullableId:true),
		new (modelName:"Engagement"), 
		new (modelName:"CustomerInvite", baseClass:"CustomerInviteBase"),
		new (modelName:"ShippingRate", canCreate:false, canUpdate:false, hasId:false)
	};
#>
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace OpenShopify.Admin.Builder.Models;
// ReSharper disable All
<#
	foreach (var section in sections)
	{
		#>

public partial record <#= section.ClassName #>Item
{
    [JsonPropertyName("<#= section.PropertyName #>"), Required]
    public <#= section.ModelName #> <#= section.ClassName #> { get; set; } = null!;
}

public partial record <#= section.ClassName #>List
{
    [JsonPropertyName("<#= section.PropertyNamePlural #>"), Required]
    public IEnumerable<<#= section.ModelName #>> <#= section.ClassNamePlural #> { get; set; } = null!;
}
<#
		if (section.CanCreate)
		{
#>
public partial record Create<#= section.ClassName #>Request
{
    [JsonPropertyName("<#= section.PropertyName #>"), Required]
    public Create<#= section.ClassName #> <#= section.ClassName #> { get; set; } = null!;
}

/// <inheritdoc cref="<#= section.BaseClass #>"/>
public partial record Create<#= section.ClassName #> : <#= section.BaseClass #> {}
<#
		}

		if (section.CanCreate)
		{
#>
public partial record Update<#= section.ClassName #>Request
{
    [JsonPropertyName("<#= section.PropertyName #>"), Required]
    public Update<#= section.ClassName #> <#= section.ClassName #> { get; set; } = null!;
}

/// <inheritdoc cref="<#= section.ModelName #>"/>
public partial record Update<#= section.ClassName #> : <#= section.ModelName #>
{
    [JsonIgnore]
    public new System.DateTimeOffset? CreatedAt { get; set; }
    [JsonIgnore]
    public new System.DateTimeOffset? UpdatedAt { get; set; }
}

<#
		}
#>		
/// <inheritdoc cref="<#= section.BaseClass #>"/>
public partial record <#= section.ClassName #> : <#= section.BaseClass #>
{
<#	if (section.HasId)
		{
			if (section.NullableId)
			{
#>
    [JsonPropertyName("id")]
    public long? Id { get; set; }
<#
			}
			else
			{
#>
    [JsonPropertyName("id"), Required]
    public long Id { get; set; }
<#
			}
#>
    [JsonPropertyName("admin_graphql_api_id")]
    public string? AdminGraphQLAPIId { get; set; }
<#
		}
#>
	
    /// <summary>
    /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the asset was created.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("created_at")]
    public System.DateTimeOffset? CreatedAt { get; set; }

    /// <summary>
    /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an asset was last updated.
    /// </summary>
    [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
    public System.DateTimeOffset? UpdatedAt { get; set; }
}

/// <inheritdoc cref="<#= section.OrigClass #>"/>
public partial record <#= section.BaseClass #> : <#= section.OrigClass #>{}

	<#
	}
#><#+
	public partial record SectionTemplate
	{
		public SectionTemplate(string modelName, string className = null, string classNamePlural = null, 
			string propertyName = null, string propertyNamePlural = null, string origClass = null, string baseClass = null,
			bool hasId = true, bool nullableId = false, bool hasAdminGraphQLAPIId = true, bool canCreate = true, bool canUpdate = true)
		{
			ModelName = modelName;
			HasId = hasId;
			NullableId = nullableId;
			HasAdminGraphQlapiId = hasAdminGraphQLAPIId;
			CanCreate = canCreate;
			CanUpdate = canUpdate;
			ClassName = className ?? ModelName;
			OrigClass = origClass ?? $@"{ClassName}Orig";
			BaseClass = baseClass ?? $@"{ClassName}Base";
			ClassNamePlural = classNamePlural ?? $@"{ModelName}s";
			PropertyName = propertyName ?? ToSnakeCase(ClassName);
			PropertyNamePlural = propertyNamePlural ?? ToSnakeCase(ClassNamePlural);
		}

		public string ModelName { get; }
		public string BaseClass { get; }
		public string OrigClass { get; }
		public bool HasId { get; }
		public bool NullableId { get; }
		public bool HasAdminGraphQlapiId { get; }
		public bool CanCreate { get; }
		public bool CanUpdate { get; }
		public string ClassName { get; } 
		public string ClassNamePlural { get; }
		public string PropertyName { get; }
		public string PropertyNamePlural { get; }

		private static string ToSnakeCase(string s)
		{
			return string.IsNullOrWhiteSpace(s) ? null : Regex.Replace(s,"[A-Z]","_$0").ToLower().TrimStart('_');
		}
	}
	
// ReSharper restore All
#>