//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ShopControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves the shop's configuration
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("shop.json")]
        public abstract System.Threading.Tasks.Task GetShopsConfiguration([Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ShopOrig
    {
        /// <summary>
        /// The shop's street address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// The optional second line of the shop's street address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address2")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Address2 { get; set; } = default!;

        /// <summary>
        /// Whether the shop is capable of accepting payments directly through the [Checkout API](/apps/channels/checkout-api).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checkout_api_supported")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? CheckoutApiSupported { get; set; } = default!;

        /// <summary>
        /// The shop's city.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? City { get; set; } = default!;

        /// <summary>
        /// The shop's country. In most cases, this value matches the `country_code`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The two-letter country code corresponding to the shop's country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The shop's normalized country name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? CountryName { get; set; } = default!;

        /// <summary>
        /// Whether the shop is applying taxes on a per-county basis. Only applicable to shops based in the US. Valid values: `true` or `null`."
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("county_taxes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? CountyTaxes { get; set; } = default!;

        /// <summary>
        /// The contact email used for communication between the shop owner and the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? CustomerEmail { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for the shop's default currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The shop's domain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("domain")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Domain { get; set; } = default!;

        /// <summary>
        /// A list of enabled currencies ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify Admin.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enabled_presentment_currencies")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.List<string>? EnabledPresentmentCurrencies { get; set; } = default!;

        /// <summary>
        /// Whether the shop is eligible to receive a free credit card reader from Shopify.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eligible_for_card_reader_giveaway")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? EligibleForCardReaderGiveaway { get; set; } = default!;

        /// <summary>
        /// Whether the shop is eligible to use Shopify Payments.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eligible_for_payments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? EligibleForPayments { get; set; } = default!;

        /// <summary>
        /// The contact email used for communication between Shopify and the shop owner.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// This field has been deprecated, and is currently unused. Hardcoded to `true`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("finances")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.Obsolete]
        public bool? Finances { get; set; } = default!;

        /// <summary>
        /// As of API version 2021-07, this field has been deprecated and is currently unused. Previously indicated whether the shop forced requests made to its resources to be made over SSL using the HTTPS protocol. All requests now use HTTPS, so `force_ssl` is always `true`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("force_ssl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.Obsolete]
        public string? ForceSsl { get; set; } = default!;

        /// <summary>
        /// The GSuite URL for the store, if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("google_apps_domain")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? GoogleAppsDomain { get; set; } = default!;

        /// <summary>
        /// Whether the GSuite login is enabled. Shops with this feature will be able to log in through the GSuite login page. Valid values: `true`, `null`
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("google_apps_login_enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? GoogleAppsLoginEnabled { get; set; } = default!;

        /// <summary>
        /// Whether any active discounts exist for the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("has_discounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? HasDiscounts { get; set; } = default!;

        /// <summary>
        /// Whether any active gift cards exist for the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("has_gift_cards")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? HasGiftCards { get; set; } = default!;

        /// <summary>
        /// Whether the shop has an online store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("has_storefront")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? HasStorefront { get; set; } = default!;

        /// <summary>
        /// The name of the timezone assigned by the [IANA](http://www.iana.org/time-zones).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iana_timezone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? IanaTimezone { get; set; } = default!;

        /// <summary>
        /// The latitude of the shop's location.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude of the shop's location.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// A string representing the way currency is formatted when the currency isn't specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("money_format")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? MoneyFormat { get; set; } = default!;

        /// <summary>
        /// A string representing the way currency is formatted in email notifications when the currency isn't specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("money_in_emails_format")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? MoneyInEmailsFormat { get; set; } = default!;

        /// <summary>
        /// A string representing the way currency is formatted when the currency is specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("money_with_currency_format")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? MoneyWithCurrencyFormat { get; set; } = default!;

        /// <summary>
        /// A string representing the way currency is formatted in email notifications when the currency is specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("money_with_currency_in_emails_format")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? MoneyWithCurrencyInEmailsFormat { get; set; } = default!;

        /// <summary>
        /// Whether the shop has enabled multiple locations.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multi_location_enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? MultiLocationEnabled { get; set; } = default!;

        /// <summary>
        /// The shop's .myshopify.com domain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("myshopify_domain")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? MyshopifyDomain { get; set; } = default!;

        /// <summary>
        /// The name of the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Whether the password protection page is enabled on the shop's online store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("password_enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? PasswordEnabled { get; set; } = default!;

        /// <summary>
        /// The contact phone number for the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The display name of the Shopify plan the shop is on.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plan_display_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? PlanDisplayName { get; set; } = default!;

        /// <summary>
        /// Whether the pre-launch page is enabled on the shop's online store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pre_launch_enabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? PreLaunchEnabled { get; set; } = default!;

        /// <summary>
        /// The cookie consent level defined on the shop's online store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cookie_consent_level")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? CookieConsentLevel { get; set; } = default!;

        /// <summary>
        /// The name of the Shopify plan the shop is on.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plan_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? PlanName { get; set; } = default!;

        /// <summary>
        /// The shop's primary locale, as configured in the language settings of the shop's theme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary_locale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? PrimaryLocale { get; set; } = default!;

        /// <summary>
        /// Formerly used for the ID of the shipping origin location (read only).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary_location_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.Obsolete]
        public long? PrimaryLocationId { get; set; } = default!;

        /// <summary>
        /// The shop's normalized province or state name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Province { get; set; } = default!;

        /// <summary>
        /// The two- or three-letter code for the shop's province or state.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? ProvinceCode { get; set; } = default!;

        /// <summary>
        /// Whether the shop requires an extra Shopify Payments agreement.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requires_extra_payments_agreement")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? RequiresExtraPaymentsAgreement { get; set; } = default!;

        /// <summary>
        /// Whether the shop has any outstanding setup steps.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("setup_required")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? SetupRequired { get; set; } = default!;

        /// <summary>
        /// The username of the shop owner.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shop_owner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? ShopOwner { get; set; } = default!;

        /// <summary>
        /// The handle of the partner account that referred the merchant to Shopify, if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Source { get; set; } = default!;

        /// <summary>
        /// Whether applicable taxes are included in product prices. Valid values: `true` or `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// Whether taxes are charged for shipping. Valid values: `true` or `false`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_shipping")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? TaxShipping { get; set; } = default!;

        /// <summary>
        /// The name of the timezone the shop is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timezone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Timezone { get; set; } = default!;

        /// <summary>
        /// Whether transactional SMS sent by Shopify are disabled on the shop's online store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transactional_sms_disabled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? TransactionalSmsDisabled { get; set; } = default!;

        /// <summary>
        /// The default unit of weight measurement for the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weight_unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? WeightUnit { get; set; } = default!;

        /// <summary>
        /// The shop's zip or postal code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Zip { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603