//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ICountryController
    {

        /// <summary>
        /// Receive a list of all Countries
        /// </summary>

        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>

        /// <param name="since_id">Restrict results to after the specified ID.</param>

        /// <returns>Receive a list of all Countries</returns>

        System.Threading.Tasks.Task ReceiveListOfAllCountriesAsync(string? fields, string? since_id);

        /// <summary>
        /// Creates a country
        /// </summary>

        /// <returns>Creates a country</returns>

        System.Threading.Tasks.Task CreateCountryAsync();

        /// <summary>
        /// Retrieves a count of countries
        /// </summary>

        /// <returns>Retrieves a count of countries</returns>

        System.Threading.Tasks.Task RetrieveCountOfCountriesAsync();

        /// <summary>
        /// Retrieves a specific county
        /// </summary>


        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>

        /// <returns>Retrieves a specific county</returns>

        System.Threading.Tasks.Task RetrieveSpecificCountyAsync(string country_id, string? fields);

        /// <summary>
        /// Updates an existing country
        /// </summary>


        /// <returns>Updates an existing country</returns>

        System.Threading.Tasks.Task UpdateExistingCountryAsync(string country_id);

        /// <summary>
        /// Remove an existing Country
        /// </summary>


        /// <returns>Remove an existing Country</returns>

        System.Threading.Tasks.Task RemoveExistingCountryAsync(string country_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class CountryController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ICountryController _implementation;

        public CountryController(ICountryController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Receive a list of all Countries
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="since_id">Restrict results to after the specified ID.</param>
        /// <returns>Receive a list of all Countries</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("countries.json")]
        public System.Threading.Tasks.Task ReceiveListOfAllCountries([Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] string? since_id)
        {

            return _implementation.ReceiveListOfAllCountriesAsync(fields, since_id);
        }

        /// <summary>
        /// Creates a country
        /// </summary>
        /// <returns>Creates a country</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("countries.json")]
        public System.Threading.Tasks.Task CreateCountry()
        {

            return _implementation.CreateCountryAsync();
        }

        /// <summary>
        /// Retrieves a count of countries
        /// </summary>
        /// <returns>Retrieves a count of countries</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("countries/count.json")]
        public System.Threading.Tasks.Task RetrieveCountOfCountries()
        {

            return _implementation.RetrieveCountOfCountriesAsync();
        }

        /// <summary>
        /// Retrieves a specific county
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Retrieves a specific county</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("countries/{country_id}.json")]
        public System.Threading.Tasks.Task RetrieveSpecificCounty(string country_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields)
        {

            return _implementation.RetrieveSpecificCountyAsync(country_id, fields);
        }

        /// <summary>
        /// Updates an existing country
        /// </summary>
        /// <returns>Updates an existing country</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("countries/{country_id}.json")]
        public System.Threading.Tasks.Task UpdateExistingCountry(string country_id)
        {

            return _implementation.UpdateExistingCountryAsync(country_id);
        }

        /// <summary>
        /// Remove an existing Country
        /// </summary>
        /// <returns>Remove an existing Country</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("countries/{country_id}.json")]
        public System.Threading.Tasks.Task RemoveExistingCountry(string country_id)
        {

            return _implementation.RemoveExistingCountryAsync(country_id);
        }

    }

    


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603