//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CustomerControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of customers
        /// </summary>
        /// <param name="created_at_max">Show customers created before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show customers created after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="ids">Restrict results to customers specified by a comma-separated list of IDs.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="since_id">Restrict results to those after the specified ID.</param>
        /// <param name="updated_at_max">Show customers last updated before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show customers last updated after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <returns>Retrieves a list of customers</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers.json")]
        public abstract System.Threading.Tasks.Task RetrieveListOfCustomers([Microsoft.AspNetCore.Mvc.FromQuery] string? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? ids = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? limit = "50", [Microsoft.AspNetCore.Mvc.FromQuery] string? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? updated_at_min = null);

        /// <summary>
        /// Creates a customer
        /// </summary>
        /// <returns>Creates a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers.json")]
        public abstract System.Threading.Tasks.Task CreateCustomer();

        /// <summary>
        /// Searches for customers that match a supplied query
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <param name="query">Text to search for in the shop's customer data.
        /// <br/>&lt;strong&gt;Note:&lt;/strong&gt; Supported queries: &lt;code&gt;accepts_marketing&lt;/code&gt;,
        /// <br/>&lt;code&gt;activation_date&lt;/code&gt;, &lt;code&gt;address1&lt;/code&gt;, &lt;code&gt;address2&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;,
        /// <br/>&lt;code&gt;company&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;customer_date&lt;/code&gt;, &lt;code&gt;customer_first_name&lt;/code&gt;,
        /// <br/>&lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;customer_last_name&lt;/code&gt;, &lt;code&gt;customer_tag&lt;/code&gt;, &lt;code&gt; email&lt;/code&gt;,
        /// <br/>&lt;code&gt;email_marketing_state&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;first_order_date&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;,
        /// <br/>&lt;code&gt;last_abandoned_order_date&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;multipass_identifier&lt;/code&gt;,
        /// <br/>&lt;code&gt;orders_count&lt;/code&gt;, &lt;code&gt;order_date&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;province&lt;/code&gt;,
        /// <br/>&lt;code&gt;shop_id&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;total_spent&lt;/code&gt;,
        /// <br/>&lt;code&gt;updated_at&lt;/code&gt;, &lt;code&gt;verified_email&lt;/code&gt;, &lt;code&gt;product_subscriber_status&lt;/code&gt;. All other queries
        /// <br/>returns all customers.</param>
        /// <returns>Searches for customers that match a supplied query</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/search.json")]
        public abstract System.Threading.Tasks.Task SearchForCustomersThatMatchSuppliedQuery([Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? limit = "50", [Microsoft.AspNetCore.Mvc.FromQuery] string? order = "last_order_date DESC", [Microsoft.AspNetCore.Mvc.FromQuery] string? query = null);

        /// <summary>
        /// Retrieves a single customer
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Retrieves a single customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/{customer_id}.json")]
        public abstract System.Threading.Tasks.Task RetrieveSingleCustomer(string customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Updates a customer
        /// </summary>
        /// <returns>Updates a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/{customer_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateCustomer(string customer_id);

        /// <summary>
        /// Creates an account activation URL for a customer
        /// </summary>
        /// <returns>Creates an account activation URL for a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/{customer_id}/account_activation_url.json")]
        public abstract System.Threading.Tasks.Task CreateAccountActivationURLForCustomer(string customer_id);

        /// <summary>
        /// Sends an account invite to a customer
        /// </summary>
        /// <returns>Sends an account invite to a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/{customer_id}/send_invite.json")]
        public abstract System.Threading.Tasks.Task SendAccountInviteToCustomer(string customer_id);

        /// <summary>
        /// Retrieves a count of customers
        /// </summary>
        /// <returns>Retrieves a count of customers</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/count.json")]
        public abstract System.Threading.Tasks.Task RetrieveCountOfCustomers();

        /// <summary>
        /// Retrieves all orders that belong to a customer
        /// </summary>
        /// <param name="status">The status of the orders to return. The status defaults to open.</param>
        /// <returns>Retrieves all orders that belong to a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/customers/{customer_id}/orders.json")]
        public abstract System.Threading.Tasks.Task RetrieveAllOrdersThatBelongToCustomer(string customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {
        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead.
        /// <br/>Whether the customer has consented to receive marketing material by email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing")]
        public string? Accepts_marketing { get; set; } = default!;

        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead.
        /// <br/>The date and time (ISO 8601 format)
        /// <br/>when the customer consented or objected to receiving marketing material by email. Set this value whenever
        /// <br/>the customer consents or objects to marketing materials.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accepts_marketing_updated_at")]
        public string? Accepts_marketing_updated_at { get; set; } = default!;

        /// <summary>
        /// A list of the ten most recently updated addresses for the customer. Each address has the following properties:
        /// <br/> 
        /// <br/> address1: The customer's mailing address.
        /// <br/> address2: An additional field for the customer's mailing address.
        /// <br/> city: The customer's city, town, or village.
        /// <br/> company: The customer's company.
        /// <br/> country: The customer's country.
        /// <br/> country_code: The two-letter country code corresponding to the customer's country.
        /// <br/> country_name: The customer's normalized country name.
        /// <br/> customer_id: A unique identifier for the customer.
        /// <br/> default: Whether this address is the default address for the customer.
        /// <br/> first_name: The customer's first name.
        /// <br/> id: A unique identifier for the address.
        /// <br/> last_name: The customer's last name.
        /// <br/> name: The customer's first and last names.
        /// <br/> phone: The customer's phone number at this address.
        /// <br/> province: The customer's region name. Typically a province, a state, or a prefecture.
        /// <br/> province_code: The code for the region of the address, such as the province, state, or district. For example QC for Quebec, Canada.
        /// <br/> zip: The customer's postal code, also known as zip, postcode, Eircode, etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        public string? Addresses { get; set; } = default!;

        /// <summary>
        /// The three-letter code (ISO 4217 format) for the currency
        /// <br/> that the customer used when they paid for their last order. Defaults to the shop currency. Returns the shop currency for test orders.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The date and time (ISO 8601 format) when the customer was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public string? Created_at { get; set; } = default!;

        /// <summary>
        /// The default address for the customer. The default address has the following properties:
        /// <br/> 
        /// <br/> address1: The first line of the customer's mailing address.
        /// <br/> address2: An additional field for the customer's mailing address.
        /// <br/> city: The customer's city, town, or village.
        /// <br/> company: The customer's company.
        /// <br/> country: The customer's country.
        /// <br/> country_code: The two-letter country code corresponding to the customer's country.
        /// <br/> country_name: The customer's normalized country name.
        /// <br/> customer_id: A unique identifier for the customer.
        /// <br/> default: Returns true for each default address.
        /// <br/> first_name: The customer's first name.
        /// <br/> id: A unique identifier for the address.
        /// <br/> last_name: The customer's last name.
        /// <br/> name: The customer's first and last names.
        /// <br/> phone: The customer's phone number at this address.
        /// <br/> province: The customer's region name. Typically a province, a state, or a prefecture.
        /// <br/> province_code: The two-letter code for the customer's region.
        /// <br/> zip: The customer's postal code, also known as zip, postcode, Eircode, etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("default_address")]
        public string? Default_address { get; set; } = default!;

        /// <summary>
        /// The unique email address of the customer. Attempting to assign the same email address to
        /// <br/> multiple customers returns an error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The marketing consent information when the customer consented to receiving marketing
        /// <br/> material by email. The email property is required to create a customer with email
        /// <br/> consent information and to update a customer for email consent that doesn't have an email recorded.
        /// <br/> The customer must have a unique email address associated to the record. The email marketing consent has the following properties: 
        /// <br/> 
        /// <br/> state: The current email marketing state for the customer.
        /// <br/> opt_in_level: The marketing subscription opt-in level, as described in the
        /// <br/> M3AAWG Sender Best Common Practices,
        /// <br/> that the customer gave when they consented to receive marketing material by email.
        /// <br/> consent_updated_at: The date and time when the customer consented to receive marketing material by email.
        /// <br/> If no date is provided, then the date and time when the consent information was sent is used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email_marketing_consent")]
        public string? Email_marketing_consent { get; set; } = default!;

        /// <summary>
        /// The customer's first name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        public string? First_name { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The customer's last name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        public string? Last_name { get; set; } = default!;

        /// <summary>
        /// The ID of the customer's last order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_id")]
        public string? Last_order_id { get; set; } = default!;

        /// <summary>
        /// The name of the customer's last order. This is directly related to the name field on the Order resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("last_order_name")]
        public string? Last_order_name { get; set; } = default!;

        /// <summary>
        /// Attaches additional metadata to a shop's resources:
        /// <br/> 
        /// <br/> key (required): An identifier for the metafield (maximum of 30 characters).
        /// <br/> namespace(required): A container for a set of metadata (maximum of 20 characters). Namespaces help distinguish between metadata that you created and metadata created by another individual with a similar namespace.
        /// <br/> value (required): Information to be stored as metadata.
        /// <br/> type (required): The type. Refer to the full list of types.
        /// <br/> description (optional): Additional information about the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metafield")]
        public string? Metafield { get; set; } = default!;

        /// <summary>
        /// As of API version 2022-04, this field is deprecated. Use email_marketing_consent instead.
        /// <br/>The marketing subscription opt-in level, as described in the 
        /// <br/>M3AAWG Sender Best Common Practices, that the customer gave when they consented to receive marketing material by email.
        /// <br/>If the customer does not accept email marketing, then this property will be set to null.
        /// <br/>Valid values:
        /// <br/>
        /// <br/> single_opt_in
        /// <br/> confirmed_opt_in
        /// <br/> unknown
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("marketing_opt_in_level")]
        public string? Marketing_opt_in_level { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the customer that's used with '         'Multipass login.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("multipass_identifier")]
        public string? Multipass_identifier { get; set; } = default!;

        /// <summary>
        /// A note about the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The number of orders associated with this customer. Test and archived orders aren't counted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orders_count")]
        public string? Orders_count { get; set; } = default!;

        /// <summary>
        /// The unique phone number (E.164 format) for this customer. Attempting to assign the same phone number to multiple customers
        /// <br/> returns an error. The property can be set using different formats, but each format must represent a number that can be dialed
        /// <br/> from anywhere in the world. The following formats are all valid:
        /// <br/> 
        /// <br/> 6135551212
        /// <br/> +16135551212
        /// <br/> (613)555-1212
        /// <br/> +1 613-555-1212
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The marketing consent information when the customer consented to receiving marketing
        /// <br/> material by SMS. The phone property is required to create a customer with SMS
        /// <br/> consent information and to perform an SMS update on a customer that doesn't have a phone number recorded.
        /// <br/> The customer must have a unique phone number associated to the record. The SMS marketing consent has the following properties: 
        /// <br/> 
        /// <br/> state: The current SMS marketing state for the customer.
        /// <br/> opt_in_level: The marketing subscription opt-in level, as described in the
        /// <br/> M3AAWG Sender Best Common Practices,
        /// <br/> that the customer gave when they consented to receive marketing material by SMS.
        /// <br/> consent_updated_at: The date and time when the customer consented to receive marketing material by SMS.
        /// <br/> If no date is provided, then the date and time when the consent information was sent is used.
        /// <br/> consent_collected_from: The source for whether the customer has consented to receive marketing material by SMS.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sms_marketing_consent")]
        public string? Sms_marketing_consent { get; set; } = default!;

        /// <summary>
        /// The state of the customer's account with a shop. Default value: disabled. Valid values:
        /// <br/> 
        /// <br/> disabled: The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
        /// <br/> invited: The customer has received an email invite to create an account.
        /// <br/> enabled: The customer has created an account.
        /// <br/> declined: The customer declined the email invite to create an account.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        /// <summary>
        /// Tags that the shop owner has attached to the customer, formatted as a string of comma-separated values. A customer can have up to 250 tags. Each tag can have up to 255 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying taxes on their order. If true, then taxes won't be applied to an order at checkout. If false, then taxes will be applied at checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]
        public string? Tax_exempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only. Valid values:
        /// <br/> 
        /// <br/> EXEMPT_ALL: This customer is exempt from all Canadian taxes.
        /// <br/> CA_STATUS_CARD_EXEMPTION: This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
        /// <br/> CA_DIPLOMAT_EXEMPTION: This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
        /// <br/> CA_BC_RESELLER_EXEMPTION: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
        /// <br/> CA_MB_RESELLER_EXEMPTION: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
        /// <br/> CA_SK_RESELLER_EXEMPTION: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
        /// <br/> CA_BC_COMMERCIAL_FISHERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
        /// <br/> CA_MB_COMMERCIAL_FISHERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
        /// <br/> CA_NS_COMMERCIAL_FISHERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
        /// <br/> CA_PE_COMMERCIAL_FISHERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
        /// <br/> CA_SK_COMMERCIAL_FISHERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
        /// <br/> CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
        /// <br/> CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION: This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
        /// <br/> CA_BC_SUB_CONTRACTOR_EXEMPTION: This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
        /// <br/> CA_SK_SUB_CONTRACTOR_EXEMPTION: This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
        /// <br/> CA_BC_CONTRACTOR_EXEMPTION: This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
        /// <br/> CA_SK_CONTRACTOR_EXEMPTION: This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
        /// <br/> CA_ON_PURCHASE_EXEMPTION: This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
        /// <br/> CA_MB_FARMER_EXEMPTION: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
        /// <br/> CA_NS_FARMER_EXEMPTION: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
        /// <br/> CA_SK_FARMER_EXEMPTION: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]
        public string? Tax_exemptions { get; set; } = default!;

        /// <summary>
        /// The total amount of money that the customer has spent across their order history.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_spent")]
        public string? Total_spent { get; set; } = default!;

        /// <summary>
        /// The date and time (ISO 8601 format) when the customer information was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public string? Updated_at { get; set; } = default!;

        /// <summary>
        /// Whether the customer has verified their email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verified_email")]
        public string? Verified_email { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603