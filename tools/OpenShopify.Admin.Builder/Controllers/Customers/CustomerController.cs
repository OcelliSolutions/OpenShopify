//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CustomerControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of customers
        /// </summary>
        /// <param name="created_at_max">Show customers created before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show customers created after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="ids">Restrict results to customers specified by a comma-separated list of IDs.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="since_id">Restrict results to those after the specified ID.</param>
        /// <param name="updated_at_max">Show customers last updated before a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show customers last updated after a specified date.&lt;br&gt;(format: 2014-04-25T16:15:47-04:00)</param>
        /// <returns>Retrieves a list of customers</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers.json")]
        public abstract System.Threading.Tasks.Task RetrieveListOfCustomers([Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_min, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] string? ids, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit, string? page_info, [Microsoft.AspNetCore.Mvc.FromQuery] int? since_id, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_min);

        /// <summary>
        /// Creates a customer
        /// </summary>
        /// <returns>Creates a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("customers.json")]
        public abstract System.Threading.Tasks.Task CreateCustomer([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateCustomerRequest request);

        /// <summary>
        /// Searches for customers that match a supplied query
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to show.</param>
        /// <param name="order">Set the field and direction by which to order results.</param>
        /// <param name="query">Text to search for in the shop's customer data.
        /// <br/>&lt;strong&gt;Note:&lt;/strong&gt; Supported queries: &lt;code&gt;accepts_marketing&lt;/code&gt;,
        /// <br/>&lt;code&gt;activation_date&lt;/code&gt;, &lt;code&gt;address1&lt;/code&gt;, &lt;code&gt;address2&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;,
        /// <br/>&lt;code&gt;company&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, &lt;code&gt;customer_date&lt;/code&gt;, &lt;code&gt;customer_first_name&lt;/code&gt;,
        /// <br/>&lt;code&gt;customer_id&lt;/code&gt;, &lt;code&gt;customer_last_name&lt;/code&gt;, &lt;code&gt;customer_tag&lt;/code&gt;, &lt;code&gt; email&lt;/code&gt;,
        /// <br/>&lt;code&gt;email_marketing_state&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;first_order_date&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;,
        /// <br/>&lt;code&gt;last_abandoned_order_date&lt;/code&gt;, &lt;code&gt;last_name&lt;/code&gt;, &lt;code&gt;multipass_identifier&lt;/code&gt;,
        /// <br/>&lt;code&gt;orders_count&lt;/code&gt;, &lt;code&gt;order_date&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;province&lt;/code&gt;,
        /// <br/>&lt;code&gt;shop_id&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;total_spent&lt;/code&gt;,
        /// <br/>&lt;code&gt;updated_at&lt;/code&gt;, &lt;code&gt;verified_email&lt;/code&gt;, &lt;code&gt;product_subscriber_status&lt;/code&gt;. All other queries
        /// <br/>returns all customers.</param>
        /// <returns>Searches for customers that match a supplied query</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/search.json")]
        public abstract System.Threading.Tasks.Task SearchForCustomersThatMatchSuppliedQuery([Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit, string? page_info, [Microsoft.AspNetCore.Mvc.FromQuery] string? order, [Microsoft.AspNetCore.Mvc.FromQuery] string? query);

        /// <summary>
        /// Retrieves a single customer
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <returns>Retrieves a single customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}.json")]
        public abstract System.Threading.Tasks.Task RetrieveSingleCustomer(long customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields);

        /// <summary>
        /// Updates a customer
        /// </summary>
        /// <returns>Updates a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateCustomer([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateCustomerRequest request, long customer_id);

        /// <summary>
        /// Creates an account activation URL for a customer
        /// </summary>
        /// <returns>Creates an account activation URL for a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/account_activation_url.json")]
        public abstract System.Threading.Tasks.Task CreateAccountActivationUrlForCustomer([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateCustomerRequest request, long customer_id);

        /// <summary>
        /// Sends an account invite to a customer
        /// </summary>
        /// <returns>Sends an account invite to a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/send_invite.json")]
        public abstract System.Threading.Tasks.Task SendAccountInviteToCustomer(long customer_id);

        /// <summary>
        /// Retrieves a count of customers
        /// </summary>
        /// <returns>Retrieves a count of customers</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/count.json")]
        public abstract System.Threading.Tasks.Task RetrieveCountOfCustomers();

        /// <summary>
        /// Retrieves all orders that belong to a customer
        /// </summary>
        /// <param name="status">The status of the orders to return. The status defaults to open.</param>
        /// <returns>Retrieves all orders that belong to a customer</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/orders.json")]
        public abstract System.Threading.Tasks.Task RetrieveAllOrdersThatBelongToCustomer(long customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? status);

    }

    


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603