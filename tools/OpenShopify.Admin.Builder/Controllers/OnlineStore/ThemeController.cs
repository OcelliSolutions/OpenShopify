//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ThemeControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of themes
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("themes.json")]
        public abstract System.Threading.Tasks.Task ListThemes([Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Creates a theme
        /// </summary>
        /// <remarks>
        /// Creates a theme by providing the public URL of a ZIP file that contains the theme. 
        /// 
        /// A new theme is always unpublished by default. To publish a theme when you create it, include `"role": "main"` in the POST request. The theme will be published only after all of its files have been extracted and stored by Shopify, which might take a couple of minutes.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("themes.json")]
        public abstract System.Threading.Tasks.Task CreateTheme([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateThemeRequest request);

        /// <summary>
        /// Retrieves a single theme by its ID
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("themes/{theme_id}.json")]
        public abstract System.Threading.Tasks.Task GetTheme(long theme_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Modify an existing Theme
        /// </summary>
        /// <remarks>
        /// Updates an existing theme.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("themes/{theme_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateTheme([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateThemeRequest request, long theme_id);

        /// <summary>
        /// Remove an existing Theme
        /// </summary>
        /// <remarks>
        /// Deletes a theme. A theme can't be deleted while it's uploading, updating, or if the theme is the last published theme.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("themes/{theme_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteTheme(long theme_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ThemeRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"main")]
        Main = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unpublished")]
        Unpublished = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"demo")]
        Demo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"development")]
        Development = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ThemeOrig
    {
        /// <summary>
        /// The name of the theme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Whether the theme can currently be previewed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("previewable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Previewable { get; set; } = default!;

        /// <summary>
        /// Whether files are still being copied into place for this theme.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Processing { get; set; } = default!;

        /// <summary>
        /// Specifies how the theme is being used within the shop. Valid values: 
        /// 
        /// *   **main**: The theme is published. Customers see it when they visit the online store. 
        /// *   **unpublished**: The theme is unpublished. Customers can't see it. 
        /// *   **demo**: The theme is installed on the store as a demo. The theme can't be published until the merchant buys the full version. 
        /// *   **development**: The theme is used for development. The theme can't be published, and is temporary.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("role")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Role { get; set; } = default!;

        /// <summary>
        /// A unique identifier applied to Shopify-made themes that are installed from the [Shopify Theme Store](https://themes.shopify.com/) Theme Store. Not all themes available in the Theme Store are developed by Shopify. Returns `null` if the store's theme isn't made by Shopify, or if it wasn't installed from the Theme Store.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("theme_store_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ThemeStoreId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603