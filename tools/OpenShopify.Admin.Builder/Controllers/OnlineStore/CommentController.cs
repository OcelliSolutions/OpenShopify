//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CommentControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of comments
        /// </summary>
        /// <param name="created_at_max">Show comments created before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="created_at_min">Show comments created after date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="limit">The maximum number of results to retrieve.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="published_at_max">Show comments published before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="published_at_min">Show comments published after date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="published_status">Filter results by their published status.</param>
        /// <param name="since_id">Restrict results to after the specified ID.</param>
        /// <param name="status">Filter results by their status.</param>
        /// <param name="updated_at_max">Show comments last updated before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="updated_at_min">Show comments last updated after date (format: 2014-04-25T16:15:47-04:00).</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("comments.json")]
        public abstract System.Threading.Tasks.Task ListComments(System.DateTimeOffset? created_at_max = null, System.DateTimeOffset? created_at_min = null, string? fields = null, int? limit = null, string? page_info = null, System.DateTimeOffset? published_at_max = null, System.DateTimeOffset? published_at_min = null, string? published_status = null, long? since_id = null, string? status = null, System.DateTimeOffset? updated_at_max = null, System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Creates a comment for an article
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments.json")]
        public abstract System.Threading.Tasks.Task CreateCommentForArticle([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateCommentRequest request);

        /// <summary>
        /// Retrieves a count of comments
        /// </summary>
        /// <param name="created_at_max">Count comments created before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="created_at_min">Count comments created after date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="published_at_max">Count comments published before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="published_at_min">Count comments published after date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="published_status">Retrieve a count of comments with a given published status.</param>
        /// <param name="status">Retrieve a count of comments with a given status.</param>
        /// <param name="updated_at_max">Count comments last updated before date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="updated_at_min">Count comments last updated after date (format: 2014-04-25T16:15:47-04:00).</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("comments/count.json")]
        public abstract System.Threading.Tasks.Task CountComments(System.DateTimeOffset? created_at_max = null, System.DateTimeOffset? created_at_min = null, System.DateTimeOffset? published_at_max = null, System.DateTimeOffset? published_at_min = null, string? published_status = null, string? status = null, System.DateTimeOffset? updated_at_max = null, System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Retrieves a single comment by its ID
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}.json")]
        public abstract System.Threading.Tasks.Task GetCommentByItsID(long comment_id, string? fields = null);

        /// <summary>
        /// Updates a comment of an article
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateCommentOfArticle([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateCommentRequest request, long comment_id);

        /// <summary>
        /// Marks a comment as spam
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}/spam.json")]
        public abstract System.Threading.Tasks.Task MarkCommentAsSpam(long comment_id);

        /// <summary>
        /// Marks a comment as not spam
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}/not_spam.json")]
        public abstract System.Threading.Tasks.Task MarkCommentAsNotSpam(long comment_id);

        /// <summary>
        /// Approves a comment
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}/approve.json")]
        public abstract System.Threading.Tasks.Task ApproveComment(long comment_id);

        /// <summary>
        /// Removes a comment
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}/remove.json")]
        public abstract System.Threading.Tasks.Task DeleteComment(long comment_id);

        /// <summary>
        /// Restores a previously removed comment
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("comments/{comment_id}/restore.json")]
        public abstract System.Threading.Tasks.Task RestorePreviouslyDeletedComment(long comment_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CommentOrig
    {
        /// <summary>
        /// A unique numeric identifier for the article that the comment belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("article_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? ArticleId { get; set; } = default!;

        /// <summary>
        /// The name of the author of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("author")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Author { get; set; } = default!;

        /// <summary>
        /// A unique numeric identifier for the blog containing the article that the comment belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blog_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? BlogId { get; set; } = default!;

        /// <summary>
        /// The basic [Textile markup](https://en.wikipedia.org/wiki/Textile_(markup_language)) of a comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("body")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Body { get; set; } = default!;

        /// <summary>
        /// The text of the comment, complete with HTML markup.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("body_html")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? BodyHtml { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The email address of the author of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The IP address from which the comment was posted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Ip { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was published.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("published_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? PublishedAt { get; set; } = default!;

        /// <summary>
        /// The status of the comment. Valid values:
        /// 
        /// *   **pending**: The comment has been created but is awaiting spam detection. Depending on the result of the spam detection and the shop owner's comment preferences, this property will be transitioned to either `spam`, `unapproved`, or `approved`. 
        /// *   **unapproved (default)**: The comment is awaiting approval by the shop owner. It's not visible to the readers of the blog. 
        /// *   **published**: The comment has been approved (if the blog requires comments to be approved) and is visible to readers of the blog. 
        /// *   **spam**: The comment has been marked as spam and removed from the Shopify admin. It's not visible to readers of the blog. 
        /// *   **removed**: The comment has been removed by the shop owner. It's not visible to readers of the blog. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the comment was last modified. When the comment is created, this matches the value of `created_at`. If the blog requires comments to be approved, then this value is updated to the date and time when the comment is approved.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The user agent string provided by the software used to create the comment (usually a browser).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_agent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? UserAgent { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603