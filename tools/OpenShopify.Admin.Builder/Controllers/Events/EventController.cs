//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class EventControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of events
        /// </summary>
        /// <remarks>
        /// Retrieves a list of events. **Note:** As of version 2019-07, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).
        /// </remarks>
        /// <param name="created_at_max">Show events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="filter">Show events specified in this filter.</param>
        /// <param name="limit">The number of results to show.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="since_id">Show only results after the specified ID.</param>
        /// <param name="verb">Show events of a certain type.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("events.json")]
        public abstract System.Threading.Tasks.Task ListEvents([Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? filter = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? verb = null);

        /// <summary>
        /// Retrieves a single event
        /// </summary>
        /// <remarks>
        /// Retrieves a single event by its ID
        /// </remarks>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("events/{event_id}.json")]
        public abstract System.Threading.Tasks.Task GetEvent(long event_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Retrieves a count of events
        /// </summary>
        /// <param name="created_at_max">Count only events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Count only events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("events/count.json")]
        public abstract System.Threading.Tasks.Task CountEvents([Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null);

        /// <summary>
        /// Retrieve an event after a specific ID using `since_id`
        /// </summary>
        /// <remarks>
        /// Retrieves a list of events. **Note:** As of version 2019-07, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).
        /// </remarks>
        /// <param name="created_at_max">Show events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="filter">Show events specified in this filter.</param>
        /// <param name="limit">The number of results to show.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="since_id">Show only results after the specified ID.</param>
        /// <param name="verb">Show events of a certain type.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/events.json")]
        public abstract System.Threading.Tasks.Task GetEventAfterSpecificIDUsingSinceId(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? filter = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? verb = null);

        /// <summary>
        /// Retrieve all events from a specific product
        /// </summary>
        /// <remarks>
        /// Retrieves a list of events. **Note:** As of version 2019-07, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).
        /// </remarks>
        /// <param name="created_at_max">Show events created at or before this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show events created at or after this date and time. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="filter">Show events specified in this filter.</param>
        /// <param name="limit">The number of results to show.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="since_id">Show only results after the specified ID.</param>
        /// <param name="verb">Show events of a certain type.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/events.json")]
        public abstract System.Threading.Tasks.Task ListEventsFromSpecificProduct(long product_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? filter = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? verb = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventSubjectType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Article")]
        Article = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Blog")]
        Blog = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Collection")]
        Collection = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Comment")]
        Comment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Order")]
        Order = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Page")]
        Page = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PriceRule")]
        PriceRule = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ApiPermission")]
        ApiPermission = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record EventOrig
    {
        /// <summary>
        /// Refers to a certain event and its resources.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("arguments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.List<object>? Arguments { get; set; } = default!;

        /// <summary>
        /// A text field containing information about the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("body")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Body { get; set; } = default!;

        /// <summary>
        /// A human readable description of the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// A relative URL to the resource the event is for, if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Path { get; set; } = default!;

        /// <summary>
        /// A human readable description of the event. Can contain some HTML formatting.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The ID of the resource that generated the event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? SubjectId { get; set; } = default!;

        /// <summary>
        /// The type of the resource that generated the event. Valid values:
        /// 
        /// *   `Article` 
        /// *   `Blog` 
        /// *   `Collection` 
        /// *   `Comment` 
        /// *   `Order` 
        /// *   `Page` 
        /// *   `PriceRule` 
        /// *   `Product` 
        /// *   `ApiPermission`
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subject_type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SubjectType { get; set; } = default!;

        /// <summary>
        /// The type of event that occurred. Different resources generate different types of event. See the [Resources](#resources-that-can-create-events) section for a list of possible verbs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verb")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Verb { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603