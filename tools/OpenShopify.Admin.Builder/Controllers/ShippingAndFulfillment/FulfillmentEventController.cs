//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class FulfillmentEventControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of fulfillment events for a specific fulfillment
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/fulfillments/{fulfillment_id}/events.json")]
        public abstract System.Threading.Tasks.Task ListFulfillmentEventsForSpecificFulfillment(long fulfillment_idUndefined, long order_idUndefined);

        /// <summary>
        /// Creates a fulfillment event
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/fulfillments/{fulfillment_id}/events.json")]
        public abstract System.Threading.Tasks.Task CreateFulfillmentEvent([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateFulfillmentEventRequest request, long fulfillment_id, long order_id);

        /// <summary>
        /// Retrieves a specific fulfillment event
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/fulfillments/{fulfillment_id}/events/{event_id}.json")]
        public abstract System.Threading.Tasks.Task GetFulfillmentEvent(long event_idUndefined, long fulfillment_id, long order_id);

        /// <summary>
        /// Deletes a fulfillment event
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/fulfillments/{fulfillment_id}/events/{event_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteFulfillmentEvent(long event_id, long fulfillment_id, long order_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FulfillmentEventOrig
    {
        /// <summary>
        /// The street address where the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address1")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Address1 { get; set; } = default!;

        /// <summary>
        /// The city where the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? City { get; set; } = default!;

        /// <summary>
        /// The country where the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("country")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Country { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format) when the fulfillment event was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// The estimated delivery date based on the fulfillment's tracking number, as long as it's provided by one of the following carriers: USPS, FedEx, UPS, or Canada Post (Canada only). Value is `null` if no tracking number is available or if the tracking number is from an unsupported carrier. This property is available only when [carrier calculated rates](https://help.shopify.com/manual/shipping/rates-and-methods/custom-calculated-rates) are in use.'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_delivery_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? EstimatedDeliveryAt { get; set; } = default!;

        /// <summary>
        /// An ID for the fulfillment that's associated with the fulfillment event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? FulfillmentId { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format) when the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("happened_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? HappenedAt { get; set; } = default!;

        /// <summary>
        /// A geographic coordinate specifying the latitude of the fulfillment event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? Latitude { get; set; } = default!;

        /// <summary>
        /// A geographic coordinate specifying the longitude of the fulfillment event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? Longitude { get; set; } = default!;

        /// <summary>
        /// An arbitrary message describing the status. Can be provided by a shipping carrier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The ID of the order that's associated with the fulfillment event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// The province where the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("province")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Province { get; set; } = default!;

        /// <summary>
        /// An ID for the shop that's associated with the fulfillment event.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shop_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? ShopId { get; set; } = default!;

        /// <summary>
        /// The status of the fulfillment event. Valid values:
        /// 
        /// *   **label_printed**: A label for the shipment was purchased and printed. 
        /// *   **label_purchased**: A label for the shipment was purchased, but not printed. 
        /// *   **attempted_delivery**: Delivery of the shipment was attempted, but unable to be completed. 
        /// *   **ready_for_pickup**: The shipment is ready for pickup at a shipping depot. 
        /// *   **picked_up**: The fulfillment was successfully picked up. 
        /// *   **confirmed**: The carrier is aware of the shipment, but hasn't received it yet. 
        /// *   **in_transit**: The shipment is being transported between shipping facilities on the way to its destination. 
        /// *   **out_for_delivery**: The shipment is being delivered to its final destination. 
        /// *   **delivered**: The shipment was successfully delivered. 
        /// *   **failure**: Something went wrong when pulling tracking information for the shipment, such as the tracking number was invalid or the shipment was canceled. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the fulfillment event was updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? UpdatedAt { get; set; } = default!;

        /// <summary>
        /// The zip code of the location where the fulfillment event occurred.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Zip { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603