//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class MetafieldControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieve a list of metafields from the resource's endpoint
        /// </summary>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.
        /// <br/>Refer to the list of &lt;a href="/apps/metafields/types"&gt;supported types&lt;/a&gt;.</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="value_type">The legacy type information for the stored value. Replaced by `type`</param>
        /// <returns>Retrieve a list of metafields from the resource's endpoint</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields.json")]
        public abstract System.Threading.Tasks.Task RetrieveListOfMetafieldsFromTheResourcesEndpoint([Microsoft.AspNetCore.Mvc.FromQuery] string? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? limit = "50", [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? updated_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? value_type = null);

        /// <summary>
        /// Create a metafield
        /// </summary>
        /// <returns>Create a metafield</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafield();

        /// <summary>
        /// Retrieve a count of a resource's metafields.
        /// </summary>
        /// <returns>Retrieve a count of a resource's metafields.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task RetrieveCountOfResourcesMetafields();

        /// <summary>
        /// Retrieve a specific metafield
        /// </summary>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <returns>Retrieve a specific metafield</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task RetrieveSpecificMetafield(string metafield_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Updates a metafield
        /// </summary>
        /// <returns>Updates a metafield</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafield(string metafield_id);

        /// <summary>
        /// Deletes a metafield by its ID
        /// </summary>
        /// <returns>Deletes a metafield by its ID</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldByItsID(string metafield_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metafield
    {
        /// <summary>
        /// The date and time (ISO 8601 format) when the metafield was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("created_at")]
        public string? Created_at { get; set; } = default!;

        /// <summary>
        /// A description of the information that the metafield contains.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The unique ID of the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The key of the metafield. Keys can be up to 30 characters long and can contain alphanumeric characters, hyphens, underscores, and periods.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        /// <summary>
        /// A container for a group of metafields.
        /// <br/> Grouping metafields within a namespace prevents your metafields from conflicting with other metafields with the same key name.
        /// <br/> Must have between 3-20 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]
        public string? Namespace { get; set; } = default!;

        /// <summary>
        /// The unique ID of the resource that the metafield is attached to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_id")]
        public string? Owner_id { get; set; } = default!;

        /// <summary>
        /// The type of resource that the metafield is attached to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_resource")]
        public string? Owner_resource { get; set; } = default!;

        /// <summary>
        /// The date and time (ISO 8601 format) when the metafield was last updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public string? Updated_at { get; set; } = default!;

        /// <summary>
        /// The data to store in the metafield. The value is always stored as a string, regardless of the metafield's type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The type of data that the metafield stores in the `value` field. Refer to the list of supported types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// Caution
        /// <br/> value_type is deprecated and replaced by type in API version 2021-07.
        /// <br/> 
        /// <br/>
        /// <br/> The legacy type information for the stored value.
        /// <br/> Valid values: string, integer, json_string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value_type")]
        public string? Value_type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603