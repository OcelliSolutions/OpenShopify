//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class MetafieldControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieve a list of metafields from the resource's endpoint
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsFromResourcesEndpoint(long blog_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafield([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldRequest request, long blog_id);

        /// <summary>
        /// Retrieve a list of metafields by using query parameters
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields that belong to a resource by using query parameters.
        /// </remarks>
        /// <param name="metafieldowner_id">Filter by the resource ID on which the metafield is attached to.</param>
        /// <param name="metafieldowner_resource">Filter by the resource name on which the metafield is attached to.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsByUsingQueryParameters([Microsoft.AspNetCore.Mvc.FromQuery(Name = "metafield[owner_id]")] string? metafieldowner_id = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "metafield[owner_resource]")] string? metafieldowner_resource = null);

        /// <summary>
        /// Creating a metafield without a key will fail and return an error
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("metafields.json")]
        public abstract System.Threading.Tasks.Task CreatingMetafieldWithoutKeyWillFailAndGetError();

        /// <summary>
        /// Retrieve a count of a resource's metafields.
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountResourcesMetafields(long? blog_id = null);

        /// <summary>
        /// Retrieve a specific metafield
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafield(long blog_id, long metafield_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Updates a metafield
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafield([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldRequest request, long blog_id, long metafield_id);

        /// <summary>
        /// Deletes a metafield by its ID
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("blogs/{blog_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafield(long blog_id, long metafield_id);

        /// <summary>
        /// Retrieve metafields attached to a Collection
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToCollection(long collection_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a collection
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForCollection([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForCollectionRequest request, long collection_id);

        /// <summary>
        /// Retrieve metafields attached to a Customer
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToCustomer(long customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a customer
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForCustomer([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForCustomerRequest request, long customer_id);

        /// <summary>
        /// Retrieve metafields attached to a Draft Order
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToDraftOrder(long draft_order_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a draft order
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForDraftOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForDraftOrderRequest request, long draft_order_id);

        /// <summary>
        /// Retrieve metafields attached to a Page
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToPage(long page_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a page
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForPage([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForPageRequest request, long page_id);

        /// <summary>
        /// Retrieve metafields attached to a Product
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToProduct(long product_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a product
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForProduct([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForProductRequest request, long product_id);

        /// <summary>
        /// Retrieve metafields attached to a Product Image
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToProductImage(long product_image_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a product image
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForProductImage([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForProductImageRequest request, long product_image_id);

        /// <summary>
        /// Retrieve metafields attached to a Product Variant
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToProductVariant(long variant_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for a product variant
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForProductVariant([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForProductVariantRequest request, long variant_id);

        /// <summary>
        /// Retrieve metafields attached to an Article
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToArticle(long article_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for an article
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForArticle([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForArticleRequest request, long article_id);

        /// <summary>
        /// Retrieve metafields attached to an Order
        /// </summary>
        /// <remarks>
        /// Retrieves a list of metafields attached to a particular resource by using the resource's endpoint.
        /// </remarks>
        /// <param name="created_at_max">Show metafields created before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Show metafields created after date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="key">Show metafields with given key</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="@namespace">Show metafields with given namespace</param>
        /// <param name="since_id">Show metafields created after the specified ID.</param>
        /// <param name="type">The type of data that the metafield stores in the `value` field.Refer to the list of [supported types](/apps/metafields/types).</param>
        /// <param name="updated_at_max">Show metafields last updated before date (format: 2022-02-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show metafields last updated after date (format: 2022-02-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task ListMetafieldsAttachedToOrder(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? key = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "namespace")] string? @namespace = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? type = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create a metafield for an order
        /// </summary>
        /// <remarks>
        /// You can create any number of metafields for a resource. To create metafields, use the corresponding resource's endpoint as listed on the examples.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields.json")]
        public abstract System.Threading.Tasks.Task CreateMetafieldForOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateMetafieldForOrderRequest request, long order_id);

        /// <summary>
        /// Retrieve a count of metafields attached to the Shop resource
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToShopResource();

        /// <summary>
        /// Retrieve a count of metafields attached to a Collection
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToCollection(long? collection_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Customer
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToCustomer(long? customer_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Draft Order
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToDraftOrder(long? draft_order_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Page
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToPage(long? page_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Product
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToProduct(long? product_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Product Image
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToProductImage(long? product_image_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to a Product Variant
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToProductVariant(long? variant_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to an Article
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToArticle(long? article_id = null);

        /// <summary>
        /// Retrieve a count of metafields attached to an Order
        /// </summary>
        /// <remarks>
        /// Get a count of all metafields that belong to a particular resource.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields/count.json")]
        public abstract System.Threading.Tasks.Task CountMetafieldsAttachedToOrder(long? order_id = null);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to the Shop resource
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToShopResource(long metafield_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Shop resource
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForShopResource([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForShopResourceRequest request, long metafield_id);

        /// <summary>
        /// Delete a metafield by its ID for the Shop resource
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForShopResource(long metafield_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Collection
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToCollection(long metafield_id, long collection_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Collection
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForCollection([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForCollectionRequest request, long metafield_id, long collection_id);

        /// <summary>
        /// Delete a metafield by its ID for a Collection
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("collections/{collection_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForCollection(long metafield_id, long collection_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Customer
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToCustomer(long metafield_id, long customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Customer
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForCustomer([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForCustomerRequest request, long metafield_id, long customer_id);

        /// <summary>
        /// Delete a metafield by its ID for a Customer
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("customers/{customer_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForCustomer(long metafield_id, long customer_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Draft Order
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToDraftOrder(long metafield_id, long draft_order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Draft Order
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForDraftOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForDraftOrderRequest request, long metafield_id, long draft_order_id);

        /// <summary>
        /// Delete a metafield by its ID for a Draft Order
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForDraftOrder(long metafield_id, long draft_order_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Page
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToPage(long metafield_id, long page_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Page
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForPage([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForPageRequest request, long metafield_id, long page_id);

        /// <summary>
        /// Delete a metafield by its ID for a Page
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("pages/{page_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForPage(long metafield_id, long page_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Product
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToProduct(long metafield_id, long product_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Product
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForProduct([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForProductRequest request, long metafield_id, long product_id);

        /// <summary>
        /// Delete a metafield by its ID for a Product
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("products/{product_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForProduct(long metafield_id, long product_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Product Image
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToProductImage(long metafield_id, long product_image_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Product Image
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForProductImage([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForProductImageRequest request, long metafield_id, long product_image_id);

        /// <summary>
        /// Delete a metafield by its ID for a Product Image
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("product_images/{product_image_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForProductImage(long metafield_id, long product_image_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to a Product Variant
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToProductVariant(long metafield_id, long variant_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for a Product Variant
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForProductVariant([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForProductVariantRequest request, long metafield_id, long variant_id);

        /// <summary>
        /// Delete a metafield by its ID for a Product Variant
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("variants/{variant_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForProductVariant(long metafield_id, long variant_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to an Article
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToArticle(long metafield_id, long article_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for an Article
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForArticle([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForArticleRequest request, long metafield_id, long article_id);

        /// <summary>
        /// Delete a metafield by its ID for an Article
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("articles/{article_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForArticle(long metafield_id, long article_id);

        /// <summary>
        /// Retrieve a single metafield by its ID attached to an Order
        /// </summary>
        /// <remarks>
        /// Retrieve a metafield by specifying the ID. All fields of a metafield are returned unless specific fields are named.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task GetMetafieldAttachedToOrder(long metafield_id, long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update a metafield for an Order
        /// </summary>
        /// <remarks>
        /// Updates a metafield. The properties that can be updated are `value` and `type`.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateMetafieldForOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateMetafieldForOrderRequest request, long metafield_id, long order_id);

        /// <summary>
        /// Delete a metafield by its ID for an Order
        /// </summary>
        /// <remarks>
        /// Deletes a metafield by its ID.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/metafields/{metafield_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteMetafieldForOrder(long metafield_id, long order_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MetafieldOrig
    {
        /// <summary>
        /// The description of the metafield.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The unique identifier for a metafield within its namespace.   
        ///  Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Key { get; set; } = default!;

        /// <summary>
        /// The container for a group of metafields that the metafield is or will be associated with. Used in tandem with `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.   
        ///  Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("namespace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Namespace { get; set; } = default!;

        /// <summary>
        /// The unique ID of the resource that the metafield is attached to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? OwnerId { get; set; } = default!;

        /// <summary>
        /// The type of resource that the metafield is attached to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("owner_resource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OwnerResource { get; set; } = default!;

        /// <summary>
        /// The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        /// <summary>
        /// The type of data that is stored in the metafield. Refer to the list of [supported types](/apps/metafields/types).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603