//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class OrderControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieve a list of orders
        /// </summary>
        /// <param name="attribution_app_id">Show orders attributed to a certain app, specified by the app ID. Set as &lt;code&gt;current&lt;/code&gt; to show orders for the app currently consuming the API.</param>
        /// <param name="created_at_max">Show orders created at or before date.</param>
        /// <param name="created_at_min">Show orders created at or after date.</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="financial_status">Filter orders by their financial status.</param>
        /// <param name="fulfillment_status">Filter orders by their fulfillment status.</param>
        /// <param name="ids">Retrieve only orders specified by a comma-separated list of order IDs.</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="processed_at_max">Show orders imported at or before date.</param>
        /// <param name="processed_at_min">Show orders imported at or after date.</param>
        /// <param name="since_id">Show orders after the specified ID.</param>
        /// <param name="status">Filter orders by their status.</param>
        /// <param name="updated_at_max">Show orders last updated at or before date.</param>
        /// <param name="updated_at_min">Show orders last updated at or after date.</param>
        /// <returns>Retrieve a list of orders</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders.json")]
        public abstract System.Threading.Tasks.Task RetrieveListOfOrders([Microsoft.AspNetCore.Mvc.FromQuery] long? attribution_app_id, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_min, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] string? financial_status, [Microsoft.AspNetCore.Mvc.FromQuery] string? fulfillment_status, [Microsoft.AspNetCore.Mvc.FromQuery] string? ids, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit, string? page_info, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? processed_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? processed_at_min, [Microsoft.AspNetCore.Mvc.FromQuery] int? since_id, [Microsoft.AspNetCore.Mvc.FromQuery] Status? status, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_min);

        /// <summary>
        /// Create an order
        /// </summary>
        /// <returns>Create an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders.json")]
        public abstract System.Threading.Tasks.Task CreateOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.OrderItem request);

        /// <summary>
        /// Retrieve a specific order
        /// </summary>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <returns>Retrieve a specific order</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task RetrieveSpecificOrder(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <returns>Update an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.OrderItem request, long order_id);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <returns>Delete an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteOrder(long order_id);

        /// <summary>
        /// Retrieve an order count
        /// </summary>
        /// <param name="created_at_max">Orders created before date specified.</param>
        /// <param name="created_at_min">Orders created after date specified.</param>
        /// <param name="financial_status">Orders of a given financial status.</param>
        /// <param name="fulfillment_status">Orders of a given fulfillment status.</param>
        /// <param name="status">Orders of a given status.</param>
        /// <param name="updated_at_max">Orders last updated before date specified.</param>
        /// <param name="updated_at_min">Orders last updated after date specified.</param>
        /// <returns>Retrieve an order count</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/count.json")]
        public abstract System.Threading.Tasks.Task RetrieveOrderCount([Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? created_at_min, [Microsoft.AspNetCore.Mvc.FromQuery] string? financial_status, [Microsoft.AspNetCore.Mvc.FromQuery] string? fulfillment_status, [Microsoft.AspNetCore.Mvc.FromQuery] string? status, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_max, [Microsoft.AspNetCore.Mvc.FromQuery] DateTime? updated_at_min);

        /// <summary>
        /// Close an order
        /// </summary>
        /// <returns>Close an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/close.json")]
        public abstract System.Threading.Tasks.Task CloseOrder(long order_id);

        /// <summary>
        /// Re-open a closed order
        /// </summary>
        /// <returns>Re-open a closed order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/open.json")]
        public abstract System.Threading.Tasks.Task ReOpenClosedOrder(long order_id);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <param name="amount">The amount to refund. If set, Shopify attempts to refund the specified amount, depending on its status. Shopify refunds through a manual gateway in cases where the original transaction was not made in Shopify. Refunds through a manual gateway are recorded as a refund on Shopify, but the customer is not refunded.</param>
        /// <param name="currency">The currency of the refund that's issued when the order is canceled. Required for multi-currency orders whenever the &lt;code&gt;amount&lt;/code&gt; property is provided.</param>
        /// <param name="email">Whether to send an email to the customer notifying them of the cancellation.</param>
        /// <param name="reason">The reason for the order cancellation. Valid values: &lt;code&gt;customer&lt;/code&gt;, &lt;code&gt;inventory&lt;/code&gt;, &lt;code&gt;fraud&lt;/code&gt;, &lt;code&gt;declined&lt;/code&gt;, and &lt;code&gt;other&lt;/code&gt;.)</param>
        /// <param name="refund">The refund transactions to perform. Required for some more complex refund situations. For more information, see the &lt;a href="/docs/admin-api/rest/reference/orders/refund#create-{{ current_version }}" &gt;Refund API&lt;/a&gt;.</param>
        /// <param name="restock">Whether to restock refunded items back to your store's inventory.</param>
        /// <returns>Cancel an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/cancel.json")]
        public abstract System.Threading.Tasks.Task CancelOrder(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? amount, [Microsoft.AspNetCore.Mvc.FromQuery] string? currency, [Microsoft.AspNetCore.Mvc.FromQuery] bool? email, [Microsoft.AspNetCore.Mvc.FromQuery] string? reason, [Microsoft.AspNetCore.Mvc.FromQuery] object? refund, [Microsoft.AspNetCore.Mvc.FromQuery] bool? restock);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 3,

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603