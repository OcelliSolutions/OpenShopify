//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class OrderControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieve a list of orders
        /// </summary>
        /// <remarks>
        /// Retrieves a list of orders that meet the specified criteria. **Usage notes:**  
        ///  This endpoint implements pagination by using links that are provided in the response header. To learn more, see [Make paginated requests to the REST Admin API](/api/usage/pagination-rest).
        /// </remarks>
        /// <param name="attribution_app_id">Show orders attributed to a certain app, specified by the app ID. Set as `current` to show orders for the app currently consuming the API.</param>
        /// <param name="created_at_max">Show orders created at or before date.</param>
        /// <param name="created_at_min">Show orders created at or after date.</param>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        /// <param name="financial_status">Filter orders by their financial status.</param>
        /// <param name="fulfillment_status">Filter orders by their fulfillment status.</param>
        /// <param name="ids">Retrieve only orders specified by a comma-separated list of order IDs.</param>
        /// <param name="limit">The maximum number of results to show on a page.</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="processed_at_max">Show orders imported at or before date.</param>
        /// <param name="processed_at_min">Show orders imported at or after date.</param>
        /// <param name="since_id">Show orders after the specified ID.</param>
        /// <param name="status">Filter orders by their status.</param>
        /// <param name="updated_at_max">Show orders last updated at or before date.</param>
        /// <param name="updated_at_min">Show orders last updated at or after date.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders.json")]
        public abstract System.Threading.Tasks.Task ListOrders([Microsoft.AspNetCore.Mvc.FromQuery] long attribution_app_id, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? financial_status = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fulfillment_status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<long>? ids = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? processed_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? processed_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Create an order
        /// </summary>
        /// <remarks>
        /// Creates an order.
        /// 
        /// By default, product inventory is not claimed when creating an order.
        /// 
        /// There are additional optional parameters that can be specified in the body of the request when creating an order:
        /// 
        /// *   **inventory_behaviour**: The behaviour to use when updating inventory. (default: `bypass`) 
        /// 
        ///     *   **bypass**: Do not claim inventory. 
        ///     *   **decrement_ignoring_policy**: Ignore the product's inventory policy and claim inventory. 
        ///     *   **decrement_obeying_policy**: Follow the product's inventory policy and claim inventory, if possible. 
        /// 
        /// *   **send_receipt**: Whether to send an order confirmation to the customer. (default: `false`) 
        /// 
        ///  &lt;aside class="note"&gt; 
        /// 
        /// #### Note
        /// 
        /// If you're working on a private app and order confirmations are still being sent to the customer when `send_receipt` is set to `false`, then you need to disable the Storefront API from the private app's page in the Shopify admin.
        ///  &lt;/aside&gt; 
        /// 
        /// *   **send_fulfillment_receipt**: Whether to send a shipping confirmation to the customer. (default: `false`) 
        /// 
        ///  &lt;aside class="note"&gt; 
        /// 
        /// #### Note
        /// 
        /// If you are including **shipping_address** or **billing_address**, make sure to pass both **first_name** and **last_name**. Otherwise both these addresses will be ignored.
        /// 
        /// **Usage notes:**  
        ///  If you're using this endpoint with a trial or Partner development store, then you can create no more than 5 new orders per minute.
        ///  &lt;/aside&gt;
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders.json")]
        public abstract System.Threading.Tasks.Task CreateOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateOrderRequest request);

        /// <summary>
        /// Retrieve a specific order
        /// </summary>
        /// <remarks>
        /// Retrieve an order by specifying the ID. All fields of an order are returned unless specific fields are named. The GET orders endpoint returns open orders by default.
        /// </remarks>
        /// <param name="fields">Retrieve only certain fields, specified by a comma-separated list of fields names.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task GetOrder(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Update an order
        /// </summary>
        /// <remarks>
        /// This operation allows for updating properties of an order including `buyer_accepts_marketing`, `email`, `phone`, `note`, `tags`, `metafields` and `shipping_address_attributes`. It is not for editing the items of an order.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateOrderRequest request, long order_id);

        /// <summary>
        /// Delete an order
        /// </summary>
        /// <remarks>
        /// Deletes an order. Orders that interact with an online gateway can't be deleted.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteOrder(long order_id);

        /// <summary>
        /// Retrieve an order count
        /// </summary>
        /// <remarks>
        /// Retrieve the total number of orders that meet the specified criteria.
        /// </remarks>
        /// <param name="created_at_max">Orders created before date specified.</param>
        /// <param name="created_at_min">Orders created after date specified.</param>
        /// <param name="financial_status">Orders of a given financial status.</param>
        /// <param name="fulfillment_status">Orders of a given fulfillment status.</param>
        /// <param name="status">Orders of a given status.</param>
        /// <param name="updated_at_max">Orders last updated before date specified.</param>
        /// <param name="updated_at_min">Orders last updated after date specified.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/count.json")]
        public abstract System.Threading.Tasks.Task CountOrders([Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? financial_status = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? fulfillment_status = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Close an order
        /// </summary>
        /// <remarks>
        /// Closes an order. A closed order is one that has no more work to be done. All items have been fulfilled or refunded.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/close.json")]
        public abstract System.Threading.Tasks.Task CloseOrder(long order_id);

        /// <summary>
        /// Re-open a closed order
        /// </summary>
        /// <remarks>
        /// Re-opens a closed order
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/open.json")]
        public abstract System.Threading.Tasks.Task ReOpenClosedOrder(long order_id);

        /// <summary>
        /// Cancel an order
        /// </summary>
        /// <remarks>
        /// &lt;aside class="note caution"&gt; 
        /// 
        /// #### Caution
        /// 
        /// For multi-currency orders, the `currency` property is required whenever the `amount` property is provided. For more information, refer to the [*Transaction resource*](/api/admin-rest/latest/resources/transaction).
        /// &lt;/aside&gt;Cancels an order. Orders that are paid and have fulfillments can't be canceled.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/cancel.json")]
        public abstract System.Threading.Tasks.Task CancelOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CancelOrderRequest request, long order_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderCancelReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"customer")]
        Customer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fraud")]
        Fraud = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"inventory")]
        Inventory = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"declined")]
        Declined = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderDiscountApplications
    {

        [System.Runtime.Serialization.EnumMember(Value = @"discount_applications")]
        DiscountApplications = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"discount_code")]
        DiscountCode = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"script")]
        Script = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"allocation_method")]
        AllocationMethod = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"across")]
        Across = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"each")]
        Each = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"one")]
        One = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"code")]
        Code = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"target_selection")]
        TargetSelection = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"entitled")]
        Entitled = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"explicit")]
        Explicit = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"target_type")]
        TargetType = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"line_item")]
        LineItem = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"shipping_line")]
        ShippingLine = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"value")]
        Value = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"value_type")]
        ValueType = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed_amount")]
        FixedAmount = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"percentage")]
        Percentage = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderDiscountCodes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"amount")]
        Amount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"code")]
        Code = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed_amount")]
        FixedAmount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"percentage")]
        Percentage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"shipping")]
        Shipping = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderFinancialStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"authorized")]
        Authorized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partially_paid")]
        PartiallyPaid = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"paid")]
        Paid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"partially_refunded")]
        PartiallyRefunded = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"refunded")]
        Refunded = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"voided")]
        Voided = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderFulfillmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fulfilled")]
        Fulfilled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"null")]
        Null = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"partial")]
        Partial = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"restocked")]
        Restocked = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderProcessingMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"checkout")]
        Checkout = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offsite")]
        Offsite = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"express")]
        Express = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"free")]
        Free = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OrderOrig
    {
        /// <summary>
        /// The ID of the app that created the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("app_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? AppId { get; set; } = default!;

        /// <summary>
        /// The mailing address associated with the payment method. This address is an optional field that won't be available on orders that do not require a payment method. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the billing address. 
        /// *   **address2**: An optional additional field for the street address of the billing address. 
        /// *   **city**: The city, town, or village of the billing address. 
        /// *   **company**: The company of the person associated with the billing address. 
        /// *   **country**: The name of the country of the billing address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the billing address. 
        /// *   **first_name**: The first name of the person associated with the payment method. 
        /// *   **last_name**: The last name of the person associated with the payment method. 
        /// *   **latitude**: The latitude of the billing address. 
        /// *   **longitude**: The longitude of the billing address. 
        /// *   **name**: The full name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the billing address. 
        /// *   **province**: The name of the region (for example, province, state, or prefecture) of the billing address. 
        /// *   **province_code**: The two-letter abbreviation of the region of the billing address. 
        /// *   **zip**: The postal code (for example, zip, postcode, or Eircode) of the billing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The IP address of the browser used by the customer when they placed the order. Both IPv4 and IPv6 are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("browser_ip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BrowserIp { get; set; } = default!;

        /// <summary>
        /// Whether the customer consented to receive email updates from the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The reason why the order was canceled. Valid values: 
        /// 
        /// *   **customer**: The customer canceled the order. 
        /// *   **fraud**: The order was fraudulent. 
        /// *   **inventory**: Items in the order were not in inventory. 
        /// *   **declined**: The payment was declined. 
        /// *   **other**: A reason not in this list.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancel_reason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelReason { get; set; } = default!;

        /// <summary>
        /// The date and time when the order was canceled. Returns `null` if the order isn't canceled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cancelled_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? CancelledAt { get; set; } = default!;

        /// <summary>
        /// A unique value when referencing the cart that's associated with the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CartToken { get; set; } = default!;

        /// <summary>
        /// A unique value when referencing the checkout that's associated with the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("checkout_token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CheckoutToken { get; set; } = default!;

        /// <summary>
        /// Information about the browser that the customer used when they placed their order:
        /// 
        /// *   **accept_language**: The languages and locales that the browser understands. 
        /// *   **browser_height**: The browser screen height in pixels, if available. 
        /// *   **browser_ip**: The browser IP address. 
        /// *   **browser_width**: The browser screen width in pixels, if available. 
        /// *   **session_hash**: A hash of the session. 
        /// *   **user_agent**: Details of the browsing client, including software and operating versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("client_details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientDetails { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the order was closed. Returns `null` if the order isn't closed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The current total discounts on the order in the shop currency. The value of this field reflects order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_discounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The current total discounts on the order in shop and presentment currencies. The `amount` values associated with this field reflect order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_discounts_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalDiscountsSet { get; set; } = default!;

        /// <summary>
        /// The current total duties charged on the order in shop and presentment currencies. The `amount` values associated with this field reflect order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_duties_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// The current total price of the order in the shop currency. The value of this field reflects order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalPrice { get; set; } = default!;

        /// <summary>
        /// The current total price of the order in shop and presentment currencies. The `amount` values associated with this field reflect order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalPriceSet { get; set; } = default!;

        /// <summary>
        /// The current subtotal price of the order in the shop currency. The value of this field reflects order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_subtotal_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentSubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The current subtotal price of the order in shop and presentment currencies. The `amount` values associated with this field reflect order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_subtotal_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentSubtotalPriceSet { get; set; } = default!;

        /// <summary>
        /// The current total taxes charged on the order in the shop currency. The value of this field reflects order edits, returns, or refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalTax { get; set; } = default!;

        /// <summary>
        /// The current total taxes charged on the order in shop and presentment currencies. The `amount` values associated with this field reflect order edits, returns, and refunds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("current_total_tax_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrentTotalTaxSet { get; set; } = default!;

        /// <summary>
        /// Information about the customer. The order might not have a customer and apps should not depend on the existence of a `customer` object. This value might be `null` if the order was created through Shopify POS. For more information about the `customer` object, see the [Customer resource](/docs/admin-api/rest/reference/customers/customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three-letter language code, optionally followed by a region modifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// An ordered list of stacked discount applications.
        /// 
        /// The `discount_applications` property includes 3 types: `discount_code`, `manual`, and `script`. All 3 types share a common structure and have some type specific attributes.
        /// 
        /// *   **allocation_method**: The method by which the discount application value has been allocated to entitled lines. Valid values: 
        /// 
        ///     *   `across`: The value is spread across all entitled lines. 
        ///     *   `each`: The value is applied onto every entitled line. 
        ///     *   `one`: The value is applied onto a single line. &lt;div class="note-caution note"&gt; 
        /// 
        /// #### Caution
        /// 
        /// As of version 2020-07, `across` is returned instead of `one` as the meaning is the same for explicit discounts.
        ///  &lt;/div&gt; 
        /// 
        /// *   **code**: The discount code that was used to apply the discount. Available only for discount code applications.  
        /// *   **description**: The description of the discount application, as defined by the merchant or the Shopify Script. Available only for manual and script discount applications.  
        /// *   **target_selection**: The lines on the order, of the type defined by `target_type`, that the discount is allocated over. Valid values: 
        /// 
        ///     *   `all`: The discount is allocated onto all lines, 
        ///     *   `entitled`: The discount is allocated only onto lines it is entitled for. 
        ///     *   `explicit`: The discount is allocated onto explicitly selected lines. 
        /// 
        /// *   **target_type**: The type of line on the order that the discount is applicable on. Valid values: 
        /// 
        ///     *   `line_item`: The discount applies to line items. 
        ///     *   `shipping_line`: The discount applies to shipping lines. 
        /// 
        /// *   **title**: The title of the discount application, as defined by the merchant. Available only for manual discount applications. 
        /// *   **type**: The discount application type. Valid values: 
        /// 
        ///     *   `automatic`: The discount was applied automatically, such as by a Buy X Get Y automatic discount. 
        ///     *   `discount_code`: The discount was applied by a discount code. 
        ///     *   `manual`: The discount was manually applied by the merchant (for example, by using an app or creating a draft order). 
        ///     *   `script`: The discount was applied by a Shopify Script. 
        /// 
        /// *   **value**: The value of the discount application as a decimal. This represents the intention of the discount application. For example, if the intent was to apply a 20% discount, then the value will be `20.0`. If the intent was to apply a $15 discount, then the value will be `15.0`.  
        /// *   **value_type**: The type of the value. Valid values: 
        /// 
        ///     *   `fixed_amount`: A fixed amount discount value in the currency of the order. 
        ///     *   `percentage`: A percentage discount value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_applications")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DiscountApplications { get; set; } = default!;

        /// <summary>
        /// A list of discounts applied to the order. Each discount object includes the following properties: * **amount**: The amount that's deducted from the order total. When you create an order, this value is the percentage or monetary amount to deduct. After the order is created, this property returns the calculated amount. * **code**: When the associated discount application is of type `code`, this property returns the discount code that was entered at checkout. Otherwise this property returns the title of the discount that was applied. * **type**: The type of discount. Default value: `fixed_amount`. Valid values: * `fixed_amount`: Applies `amount` as a unit of the store's currency. For example, if `amount` is 30 and the store's currency is USD, then 30 USD is deducted from the order total when the discount is applied. * `percentage`: Applies a discount of `amount` as a percentage of the order total. * `shipping`: Applies a free shipping discount on orders that have a shipping rate less than or equal to `amount`. For example, if `amount` is 30, then the discount will give the customer free shipping for any shipping rate that is less than or equal to $30.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Whether taxes on the order are estimated. Many factors can change between the time a customer places an order and the time the order is shipped, which could affect the calculation of taxes. This property returns `false` when taxes on the order are finalized and aren't subject to any changes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_taxes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstimatedTaxes { get; set; } = default!;

        /// <summary>
        /// The status of payments associated with the order. Can only be set when the order is created. Valid values: 
        /// 
        /// *   **pending**: The payments are pending. Payment might fail in this state. Check again to confirm whether the payments have been paid successfully. 
        /// *   **authorized**: The payments have been authorized. 
        /// *   **partially_paid**: The order has been partially paid. 
        /// *   **paid**: The payments have been paid. 
        /// *   **partially_refunded**: The payments have been partially refunded. 
        /// *   **refunded**: The payments have been refunded. 
        /// *   **voided**: The payments have been voided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("financial_status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FinancialStatus { get; set; } = default!;

        /// <summary>
        /// An array of fulfillments associated with the order. For more information, see the [Fulfillment API](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillment).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Fulfillments { get; set; } = default!;

        /// <summary>
        /// The order's status in terms of fulfilled line items. You can use the [FulfillmentOrder](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentorder) resource for a more granular view. Valid values: 
        /// 
        /// *   **fulfilled**: Every line item in the order has been fulfilled. 
        /// *   **null**: None of the line items in the order have been fulfilled. 
        /// *   **partial**: At least one line item in the order has been fulfilled. 
        /// *   **restocked**: Every line item in the order has been restocked and the order canceled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fulfillment_status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FulfillmentStatus { get; set; } = default!;

        /// <summary>
        /// The payment gateway used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public string? Gateway { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the buyer landed when they entered the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// A list of line item objects, each containing information about an item in the order. Each object has the following properties: 
        /// 
        /// *   **fulfillable_quantity**: The amount available to fulfill, calculated as follows: 
        /// 
        /// `*quantity - max(refunded_quantity, fulfilled_quantity) - pending_fulfilled_quantity - open_fulfilled_quantity*`
        /// 
        /// *   **fulfillment_service**: The service provider that's fulfilling the item. Valid values: `manual`, or the name of the provider, such as `amazon` or `shipwire`. Multi-managed inventory introduced a [breaking change](https://shopify.dev/api/release-notes/2022-07#shipping-and-fulfillment) to this field. Fulfillment services will all be opted into SKU sharing in 2023-04. This field is due to be **deprecated**. Consider using [' "FulfillmentOrder#assigned_location](https://shopify.dev/api/admin-rest/latest/resources/fulfillmentorder#resource-object) instead. 
        /// *   **fulfillment_status**: How far along an order is in terms line items fulfilled. Valid values: `null`, `fulfilled`, `partial`, and `not_eligible`. 
        /// *   **grams**: The weight of the item in grams. 
        /// *   **id**: The ID of the line item. 
        /// *   **price**: The price of the item before discounts have been applied in the shop currency. 
        /// *   **price_set**: The price of the line item in shop and presentment currencies. 
        /// *   **product_id**: The ID of the product that the line item belongs to. Can be `null` if the original product associated with the order is deleted at a later date. 
        /// *   **quantity**: The number of items that were purchased. 
        /// *   **requires_shipping**: Whether the item requires shipping. 
        /// *   **sku**: The item's SKU (stock keeping unit). 
        /// *   **title**: The title of the product. 
        /// *   **variant_id**: The ID of the product variant. 
        /// *   **variant_title**: The title of the product variant. 
        /// *   **vendor**: The name of the item's supplier. 
        /// *   **name**: The name of the product variant. 
        /// *   **gift_card**: Whether the item is a gift card. If `true`, then the item is not taxed or considered for shipping charges. 
        /// *   **properties**: An array of custom information for the item that has been added to the cart. Often used to provide product customization options.  
        /// *   **taxable**: Whether the item was taxable. 
        /// *   **tax_lines**: A list of tax line objects, each of which details a tax applied to the item. 
        /// 
        ///     *   `title`: The name of the tax. 
        ///     *   `price`: The amount added to the order for this tax in the shop currency. 
        ///     *   `price_set`: The amount added to the order for this tax in shop and presentment currencies. 
        ///     *   `rate`: The tax rate applied to the order to calculate the tax price. 
        ///     *   `channel_liable`: Whether the channel that submitted the tax line is liable for remitting. A value of `null` indicates unknown liability for the tax line. 
        /// 
        /// *   **tip_payment_gateway**: The payment gateway used to tender the tip, such as `shopify_payments`. Present only on tips. 
        /// *   **tip_payment_method**: The payment method used to tender the tip, such as `Visa`. Present only on tips. 
        /// *   **total_discount**: The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discount_allocations`, which provides the same information. 
        /// *   **total_discount_set**: The total amount allocated to the line item in the presentment currency. Instead of using this field, Shopify recommends using `discount_allocations`, which provides the same information. 
        /// *   **discount_allocations**: An ordered list of amounts allocated by discount applications. Each discount allocation is associated with a particular discount application. 
        /// 
        ///     *   `amount`: The discount amount allocated to the line in the shop currency. 
        ///     *   `discount_application_index`: The index of the associated discount application in the order's `discount_applications` list. 
        ///     *   `amount_set`: The discount amount allocated to the line item in shop and presentment currencies. 
        /// 
        /// *   **origin_location**: The location of the line item’s fulfillment origin. This field is due to be **deprecated**. Consider using [' "FulfillmentOrder#assigned_location_id](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentorder) instead. 
        /// 
        ///     *   `id`: The location ID of the line item’s fulfillment origin. Used by Shopify to calculate applicable taxes. This is not the ID of the location where the order was placed. You can use the [FulfillmentOrder](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentorder) resource to determine the location an item will be sourced from. 
        ///     *   `country_code`: The two-letter code ([ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the item's supplier. 
        ///     *   `province_code`: The two-letter abbreviation for the region of the item's supplier. 
        ///     *   `name`: The name of the item's supplier. 
        ///     *   `address1`: The street address of the item's supplier. 
        ///     *   `address2`: The suite number of the item's supplier. 
        ///     *   `city`: The city of the item's supplier. 
        ///     *   `zip`: The zip of the item's supplier. 
        /// 
        /// *   **duties**: A list of duty objects, each containing information about a duty on the line item.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LineItems { get; set; } = default!;

        /// <summary>
        /// The ID of the physical location where the order was processed. To determine the locations where the line items are assigned for fulfillment please use the [FulfillmentOrder](/docs/admin-api/rest/reference/shipping-and-fulfillment/fulfillmentorder) resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The application acting as Merchant of Record for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("merchant_of_record_app_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? MerchantOfRecordAppId { get; set; } = default!;

        /// <summary>
        /// The order name, generated by combining the `order_number` property with the order prefix and suffix that are set in the merchant's [general settings](//www.shopify.com/admin/settings/general). This is different from the `id` property, which is the ID of the order used by the API. This field can also be set by the API to be any string value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name { get; set; } = default!;

        /// <summary>
        /// An optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order. Appears in the **Additional details** section of an order details page. Each array entry must contain a hash with `name` and `value` keys.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// The order's position in the shop's count of orders. Numbers are sequential and start at 1.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Number { get; set; } = default!;

        /// <summary>
        /// The order 's position in the shop's count of orders starting at 1001. Order numbers are sequential and start at 1001.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_number")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OrderNumber { get; set; } = default!;

        /// <summary>
        /// The original total duties charged on the order in shop and presentment currencies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("original_total_duties_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OriginalTotalDutiesSet { get; set; } = default!;

        /// <summary>
        /// An object containing information about the payment. It has the following properties: 
        /// 
        /// *   **avs_result_code**: The response code from [the address verification system](https://en.wikipedia.org/wiki/Address_Verification_System) (AVS). The code is a single letter. See [ this chart](http://www.emsecommerce.net/avs_cvv2_response_codes.htm) for the codes and their definitions. 
        /// *   **credit_card_bin**: The [issuer identification number](https://en.wikipedia.org/wiki/ISO/IEC_7812) (IIN), formerly known as the bank identification number (BIN), of the customer's credit card. This is made up of the first few digits of the credit card number. 
        /// *   **credit_card_company**: The name of the company who issued the customer's credit card. 
        /// *   **credit_card_number**: The customer's credit card number, with most of the leading digits redacted. 
        /// *   **cvv_result_code**: The response code from the credit card company indicating whether the customer entered the [card security code](https://en.wikipedia.org/wiki/Card_Security_Code) (card verification value) correctly. The code is a single letter or empty string. See [ this chart](http://www.emsecommerce.net/avs_cvv2_response_codes.htm) for the codes and their definitions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public string? PaymentDetails { get; set; } = default!;

        /// <summary>
        /// The terms and conditions under which a payment should be processed.
        /// 
        /// *   **amount**: The amount that is owed according to the payment terms. 
        /// *   **currency**: The presentment currency for the payment. 
        /// *   **payment_terms_name**: The name of the selected payment terms template for the order. 
        /// *   **payment_terms_type**: The type of selected payment terms template for the order. 
        /// *   **due_in_days**: The number of days between the invoice date and due date that is defined in the selected payment terms template. 
        /// *   **payment_schedules**: An array of schedules associated to the payment terms. 
        /// 
        ///     *   **amount**: The amount that is owed according to the payment terms. 
        ///     *   **currency**: The presentment currency for the payment. 
        ///     *   **issued_at**: The date and time when the payment terms were initiated. 
        ///     *   **due_at**: The date and time when the payment is due. Calculated based on `issued_at` and `due_in_days` or a customized fixed date if the type is fixed. 
        ///     *   **completed_at**: The date and time when the purchase is completed. Returns **null** initially and updates when the payment is captured. 
        ///     *   **expected_payment_method**: The name of the payment method gateway.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_terms")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PaymentTerms { get; set; } = default!;

        /// <summary>
        /// The list of payment gateways used for the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_gateway_names")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.List<string>? PaymentGatewayNames { get; set; } = default!;

        /// <summary>
        /// The customer's phone number for receiving SMS notifications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The presentment currency that was used to display prices to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PresentmentCurrency { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports. If you're importing orders from an app or another platform, then you can set `processed_at` to a date and time in the past to match when the original order was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// How the payment was processed. It has the following valid values: 
        /// 
        /// *   **checkout**: The order was processed using the Shopify checkout. 
        /// *   **direct**: The order was processed using a [direct payment provider](https://help.shopify.com/manual/payments/third-party-providers/direct-and-external-providers). 
        /// *   **manual**: The order was processed using a [manual payment method](https://help.shopify.com/manual/payments/manual-payments). 
        /// *   **offsite**: The order was processed by an [external payment provider](https://help.shopify.com/manual/payments/third-party-providers/direct-and-external-providers) to the Shopify checkout. 
        /// *   **express**: The order was processed using [PayPal Express Checkout](https://help.shopify.com/manual/payments/paypal). 
        /// *   **free**: The order was processed as a free order using a discount code.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processing_method")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProcessingMethod { get; set; } = default!;

        /// <summary>
        /// The website where the customer clicked a link to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// A list of refunds applied to the order. For more information, see the [Refund API](/docs/admin-api/rest/reference/orders/refund).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refunds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Refunds { get; set; } = default!;

        /// <summary>
        /// The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require shipping. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the shipping address. 
        /// *   **address2**: An optional additional field for the street address of the shipping address. 
        /// *   **city**: The city, town, or village of the shipping address. 
        /// *   **company**: The company of the person associated with the shipping address. 
        /// *   **country**: The name of the country of the shipping address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the shipping address. 
        /// *   **first_name**: The first name of the person associated with the shipping address. 
        /// *   **last_name**: The last name of the person associated with the shipping address. 
        /// *   **latitude**: The latitude of the shipping address. 
        /// *   **longitude**: The longitude of the shipping address. 
        /// *   **name**: The full name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the shipping address. 
        /// *   **province**: The name of the region (for example, province, state, or prefecture) of the shipping address. 
        /// *   **province_code**: The two-letter abbreviation of the region of the shipping address. 
        /// *   **zip**: The postal code (for example, zip, postcode, or Eircode) of the shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// An array of objects, each of which details a shipping method used. Each object has the following properties: 
        /// 
        /// *   **code**: A reference to the shipping method. 
        /// *   **discounted_price**: The price of the shipping method after line-level discounts have been applied. Doesn't reflect cart-level or order-level discounts. 
        /// *   **discounted_price_set**: The price of the shipping method in both shop and presentment currencies after line-level discounts have been applied. 
        /// *   **price**: The price of this shipping method in the shop currency. Can't be negative. 
        /// *   **price_set**: The price of the shipping method in shop and presentment currencies. 
        /// *   **source**: The source of the shipping method. 
        /// *   **title**: The title of the shipping method. 
        /// *   **tax_lines**: A list of tax line objects, each of which details a tax applicable to this shipping line. 
        /// *   **carrier_identifier**: A reference to the carrier service that provided the rate. Present when the rate was computed by a third-party carrier service. 
        /// *   **requested_fulfillment_service_id**: A reference to the fulfillment service that is being requested for the shipping method. Present if the shipping method requires processing by a third party fulfillment service; `null` otherwise.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingLines { get; set; } = default!;

        /// <summary>
        /// The source of the checkout. To use this field for sales attribution, you must register the channels that your app is managing. You can register the channels that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link). After you've submited your request, you need to wait for your request to be processed by Shopify. You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension. You can specify a handle as the `source_name` value in your request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The ID of the order placed on the originating platform.This value doesn't correspond to the Shopify ID that's generated from a completed draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_identifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceIdentifier { get; set; } = default!;

        /// <summary>
        /// A valid URL to the original order on the originating surface.This URL is displayed to merchants on the Order Details page.If the URL is invalid, then it won't be displayed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceUrl { get; set; } = default!;

        /// <summary>
        /// The price of the order in the shop currency after discounts but before shipping, duties, taxes, and tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The subtotal of the order in shop and presentment currencies after discounts but before shipping, duties, taxes, and tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SubtotalPriceSet { get; set; } = default!;

        /// <summary>
        /// Tags attached to the order, formatted as a string of comma-separated values. Tags are additional short descriptors, commonly used for filtering and searching. Each individual tag is limited to 40 characters in length.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// An array of tax line objects, each of which details a tax applicable to the order. Each object has the following properties: 
        /// 
        /// *   **price**: The amount of tax to be charged in the shop currency. 
        /// *   **rate**: The rate of tax to be applied. 
        /// *   **title**: The name of the tax. 
        /// *   **channel_liable**: Whether the channel that submitted the tax line is liable for remitting. A value of `null` indicates unknown liability for the tax line. 
        /// 
        ///  When creating an order through the API, tax lines can be specified on the order or the line items but not both. Tax lines specified on the order are split across the *taxable* line items in the created order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TaxLines { get; set; } = default!;

        /// <summary>
        /// Whether taxes are included in the order subtotal.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// Whether this is a test order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// A unique value when referencing the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total discounts applied to the price of the order in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The total discounts applied to the price of the order in shop and presentment currencies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalDiscountsSet { get; set; } = default!;

        /// <summary>
        /// The sum of all line item prices in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The total of all line item prices in shop and presentment currencies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalLineItemsPriceSet { get; set; } = default!;

        /// <summary>
        /// The total outstanding amount of the order in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_outstanding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalOutstanding { get; set; } = default!;

        /// <summary>
        /// The sum of all line item prices, discounts, shipping, taxes, and tips in the shop currency. Must be positive.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The total price of the order in shop and presentment currencies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalPriceSet { get; set; } = default!;

        /// <summary>
        /// The total shipping price of the order, excluding discounts and returns, in shop and presentment currencies. If `taxes_included` is set to `true`, then `total_shipping_price_set` includes taxes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_shipping_price_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalShippingPriceSet { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order in the shop currency. Must be positive.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The total tax applied to the order in shop and presentment currencies.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax_set")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TotalTaxSet { get; set; } = default!;

        /// <summary>
        /// The sum of all the tips in the order in the shop currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tip_received")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalTipReceived { get; set; } = default!;

        /// <summary>
        /// The sum of all line item weights in grams. The sum is not adjusted as items are removed from the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The ID of the user logged into Shopify POS who processed the order, if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the [order status web page](https://help.shopify.com/manual/orders/status-tracking), if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_status_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderStatusUrl { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603