//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class DraftOrderControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Create a new DraftOrder
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("draft_orders.json")]
        public abstract System.Threading.Tasks.Task CreateDraftOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateDraftOrderRequest request);

        /// <summary>
        /// Retrieves a list of draft orders
        /// </summary>
        /// <param name="fieldsQuery">A comma-separated list of fields to include in the response</param>
        /// <param name="ids">Filter by list of IDs</param>
        /// <param name="limit">Amount of results</param>
        /// <param name="page_info">A unique ID used to access a certain page of results.</param>
        /// <param name="since_id">Restrict results to after the specified ID</param>
        /// <param name="updated_at_max">Show orders last updated before date (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Show orders last updated after date (format: 2014-04-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders.json")]
        public abstract System.Threading.Tasks.Task ListDraftOrders([Microsoft.AspNetCore.Mvc.FromQuery(Name = "fields")] string? fieldsQuery = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<long>? ids = null, [Microsoft.AspNetCore.Mvc.FromQuery] int? limit = null, string? page_info = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Modify an existing DraftOrder
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}.json")]
        public abstract System.Threading.Tasks.Task UpdateDraftOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateDraftOrderRequest request, long draft_order_id);

        /// <summary>
        /// Receive a single DraftOrder
        /// </summary>
        /// <param name="fields">A comma-separated list of fields to include in the response</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}.json")]
        public abstract System.Threading.Tasks.Task GetDraftOrder(long draft_order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null);

        /// <summary>
        /// Remove an existing DraftOrder
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}.json")]
        public abstract System.Threading.Tasks.Task DeleteDraftOrder(long draft_order_id);

        /// <summary>
        /// Receive a count of all DraftOrders
        /// </summary>
        /// <param name="since_id">Count draft orders after the specified ID.</param>
        /// <param name="status">Count draft orders that have a given status.</param>
        /// <param name="updated_at_max">Count draft orders last updated before the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        /// <param name="updated_at_min">Count draft orders last updated after the specified date (format: 2014-04-25T16:15:47-04:00).</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("draft_orders/count.json")]
        public abstract System.Threading.Tasks.Task CountDraftOrders([Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

        /// <summary>
        /// Send an invoice
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/send_invoice.json")]
        public abstract System.Threading.Tasks.Task SendInvoice([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.SendInvoiceRequest request, long draft_order_id);

        /// <summary>
        /// Complete a draft order
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("draft_orders/{draft_order_id}/complete.json")]
        public abstract System.Threading.Tasks.Task CompleteDraftOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CompleteDraftOrderRequest request, long draft_order_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DraftOrderOrig
    {
        /// <summary>
        /// The ID of the order that 's created and associated with the draft order after the draft order is completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Name of the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Information about the customer. Learn more about [loading and removing customers](#loading-and-removing-customers). For more information about the `customer` object, see the [Customer resource](/api/admin-rest//resources/customer).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Customer { get; set; } = default!;

        /// <summary>
        /// The mailing address to where the order will be shipped. This address is optional and will not be available on orders that do not require shipping. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the shipping address. 
        /// *   **address2**: An optional additional field for the street address of the shipping address. 
        /// *   **city**: The city of the shipping address. 
        /// *   **company**: The company of the person associated with the shipping address. 
        /// *   **country**: The name of the country of the shipping address. 
        /// *   **country_code**: The two-letter code for the country of the shipping address. 
        /// *   **first_name**: The first name of the person associated with the payment method. 
        /// *   **last_name**: The last name of the person associated with the payment method. 
        /// *   **latitude**: The latitude of the shipping address. 
        /// *   **longitude**: The longitude of the shipping address. 
        /// *   **name**: The full name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the shipping address. 
        /// *   **province**: The name of the state or province of the shipping address. 
        /// *   **province_code**: The two-letter abbreviation of the state or province of the shipping address. 
        /// *   **zip**: The zip or postal code of the shipping address. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// The mailing address associated with the payment method. This address is an optional field that won't be available on orders that do not require a payment method. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the billing address. 
        /// *   **address2**: An optional additional field for the street address of the billing address. 
        /// *   **city**: The city of the billing address. 
        /// *   **company**: The company of the person associated with the billing address. 
        /// *   **country**: The name of the country of the billing address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1 alpha-2 two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)) for the country of the billing address. 
        /// *   **first_name**: The first name of the person associated with the payment method. 
        /// *   **last_name**: The last name of the person associated with the payment method. 
        /// *   **latitude**: The latitude of the billing address. 
        /// *   **longitude**: The longitude of the billing address. 
        /// *   **name**: The full name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the billing address. 
        /// *   **province**: The name of the billing address region, such as province, state, or prefecture. 
        /// *   **province_code**: The two-letter abbreviation of the region for the billing address. 
        /// *   **zip**: The postal code of the billing address, such as zip, postcode, or Eircode. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? BillingAddress { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the draft order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Note { get; set; } = default!;

        /// <summary>
        /// Extra information that is added to the order. Appears in the **Additional details** section of an order details page. Each array entry must contain a hash with `name` and `value` keys.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note_attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? NoteAttributes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The three letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the invoice was emailed to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_sent_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? InvoiceSentAt { get; set; } = default!;

        /// <summary>
        /// The URL for the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoice_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? InvoiceUrl { get; set; } = default!;

        /// <summary>
        /// Product variant line item or custom line item associated to the draft order. Each draft order must include at least one `line_item`. Each `line_item` object has the following properties: 
        /// 
        /// *   **custom**: *Read only field* Whether this is a custom line item or a product variant line item. If set to `true` indicates a custom line item. If set to `false` indicates a product variant line item. 
        /// *   **id**: The ID of the line item. 
        /// *   **variant_id**: The ID of the product variant ID corresponding to the line item. Required for a product variant line item. Set to `null` for a custom line item. 
        /// *   **product_id**: The ID of the product corresponding to the line item’s product variant. 
        /// *   **name**: The name of the product. 
        /// *   **variant_title**: The title of the product variant. Defaults to `Custom` for custom line items created via the API. 
        /// *   **vendor**: Vendor. 
        /// *   **quantity**: The number of products that were purchased. 
        /// *   **gift_card**: Indicates if the product is a gift card. Valid values are `true` or `false`. 
        /// *   **fulfillment_service**: Service provider responsible for fulfillment. Valid values are either `manual` or the name of the provider. eg amazon, shipwire, etc. Defaults to `manual` for custom line items. 
        /// *   **properties**: An array of custom information for an item that has been added to the draft order, often used to provide [product customization options](/api/liquid/objects/line_item#line_item-properties). Copied to created order when draft order is completed. 
        /// *   **applied_discount**: The discount applied to the line item. For more information, see the `applied_discount` property. 
        /// *   **tax_lines**: *Read only field* The calculated rate and amount of taxes for the line item. 
        /// 
        ///     *   **price**: The amount of tax to be charged. 
        ///     *   **rate**: The rate of tax to be applied. 
        ///     *   **title**: The name of the tax.  
        /// *   **title**: The title of the product or variant. Only applicable to custom line items. *Required field*. 
        /// *   **price**: The price of the item before discounts have been applied. Only applicable to custom line items. *Required field*. 
        /// *   **grams**: Weight in grams. Only applicable to custom line items. If not specified, defaults to 0. 
        /// *   **requires_shipping**: Whether the fulfillment requires shipping. Applicable only to custom line items. Valid values are `true` or `false.` 
        /// *   **sku**: A unique identifier of the item in the fulfillment. Applicable only to custom line items. 
        /// *   **taxable**: Whether the product is taxable. Only applicable to custom line items. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? LineItems { get; set; } = default!;

        /// <summary>
        /// The terms and conditions under which a payment should be processed.
        /// 
        /// *   **amount**: The amount that is owed according to the payment terms. 
        /// *   **currency**: The presentment currency for the payment. 
        /// *   **payment_terms_name**: The name of the selected payment terms template for the draft order. 
        /// *   **payment_terms_type**: The type of selected payment terms template for the draft order. 
        /// *   **due_in_days**: The number of days between the invoice date and due date that is defined in the selected payment terms template. 
        /// *   **payment_schedules**: An array of schedules associated to the payment terms. 
        /// 
        ///     *   **amount**: The amount that is owed according to the payment terms. 
        ///     *   **currency**: The presentment currency for the payment. 
        ///     *   **issued_at**: The date and time when the payment terms were initiated. 
        ///     *   **due_at**: The date and time when the payment is due. Calculated based on `issued_at` and `due_in_days` or a customized fixed date if the type is fixed. 
        ///     *   **completed_at**: The date and time when the purchase is completed. Returns **null** initially and updates when the payment is captured. 
        ///     *   **expected_payment_method**: The name of the payment method gateway.  
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_terms")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? PaymentTerms { get; set; } = default!;

        /// <summary>
        /// A `shipping_line` object, which details the shipping method used. The object has the following properties: 
        /// 
        /// *   **custom**: Whether this is a regular shipping line or custom shipping line. 
        /// *   **handle**: The handle of the shipping rate which was selected and applied. Required for regular shipping lines. 
        /// *   **title**: The title of the shipping method. Required for custom shipping lines. (maximum: 255 characters) 
        /// *   **price**: The price of the shipping method. Required for custom shipping lines. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_line")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? ShippingLine { get; set; } = default!;

        /// <summary>
        /// The source of the checkout. To use this field for sales attribution, you must register the channels that your app is managing. You can register the channels that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link). After you've submited your request, you need to wait for your request to be processed by Shopify. You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension. You can specify a handle as the `source_name` value in your request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// A comma-seperated list of additional short descriptors, commonly used for filtering and searching. Each individual tag is limited to 40 characters in length. For example, `tags: "tag1","tag2","tag3"`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Tags { get; set; } = default!;

        /// <summary>
        /// Whether taxes are exempt for the draft order. If set to `false`, then Shopify refers to the `taxable` field for each `line_item`. If a customer is applied to the draft order, then Shopify uses the customer's `tax_exempt` field instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exempt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? TaxExempt { get; set; } = default!;

        /// <summary>
        /// Whether the customer is exempt from paying specific taxes on their order. Canadian taxes only. Valid values: * **EXEMPT_ALL**: This customer is exempt from all Canadian taxes. * **CA_STATUS_CARD_EXEMPTION**: This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada. * **CA_DIPLOMAT_EXEMPTION**: This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada. * **CA_BC_RESELLER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia. * **CA_MB_RESELLER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba. * **CA_SK_RESELLER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan. * **CA_BC_COMMERCIAL_FISHERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia. * **CA_MB_COMMERCIAL_FISHERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba. * **CA_NS_COMMERCIAL_FISHERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia. * **CA_PE_COMMERCIAL_FISHERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island. * **CA_SK_COMMERCIAL_FISHERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan. * **CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia. * **CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION**: This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan. * **CA_BC_SUB_CONTRACTOR_EXEMPTION**: This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia. * **CA_SK_SUB_CONTRACTOR_EXEMPTION**: This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan. * **CA_BC_CONTRACTOR_EXEMPTION**: This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia. * **CA_SK_CONTRACTOR_EXEMPTION**: This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan. * **CA_ON_PURCHASE_EXEMPTION**: This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario. * **CA_MB_FARMER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba. * **CA_NS_FARMER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia. * **CA_SK_FARMER_EXEMPTION**: This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_exemptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.List<string>? TaxExemptions { get; set; } = default!;

        /// <summary>
        /// An array of tax line objects, each of which details a tax applicable to the order. Each object has the following properties: 
        /// 
        /// *   **price**: The amount of tax to be charged. 
        /// *   **rate**: The rate of tax to be applied. 
        /// *   **title**: The name of the tax. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? TaxLines { get; set; } = default!;

        /// <summary>
        /// The discount applied to the line item or the draft order object. Each draft order object can have one `applied_discount` object and each draft order line item can have its own `applied_discount`. The object has the following properties: 
        /// 
        /// *   **title**: Title of the discount. 
        /// *   **description**: Reason for the discount. 
        /// *   **value**: The value of the discount. If the type of discount is `fixed_amount`, then it corresponds to a fixed dollar amount. If the type is `percentage`, then it corresponds to percentage. 
        /// *   **value_type**: The type of discount. Valid values: `percentage`, `fixed_amount`. 
        /// *   **amount**: The applied amount of the discount, based on the setting of `value_type`. For more information, see [*Applying discounts*](#applying-discounts). 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? AppliedDiscount { get; set; } = default!;

        /// <summary>
        /// Whether taxes are included in the order subtotal. Valid values are `true` or `false`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// the price of the order before shipping and taxes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the prices of all the items in the order, taxes and discounts included.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the order is created and the draft order is completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        /// <summary>
        /// The status of a draft order as it transitions into an order. When a draft order is created it is set to `open` status. The invoice can then be sent to the customer, and `status` changes to `invoice_sent`. The draft order can then be paid, set to pending, or paid by credit card. In each case, the draft order is set to `completed` and an order is created.
        /// 
        /// After a draft order is set to `completed` the only further modifications that can be made are adding tags or metafields.
        /// 
        /// Valid values: * **open**: Draft order is open. * **invoice_sent**: Invoice has been sent for the draft order. * **completed**: Draft order has been completed and turned into an order. 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603