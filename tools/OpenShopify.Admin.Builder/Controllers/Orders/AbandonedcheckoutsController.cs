//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class AbandonedCheckoutsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a count of checkouts
        /// </summary>
        /// <remarks>
        /// Retrieves a count of checkouts from the past 90 days
        /// </remarks>
        /// <param name="created_at_max">Count checkouts created before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="created_at_min">Count checkouts created after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="since_id">Restrict results to after the specified ID.</param>
        /// <param name="status">Count checkouts with a given status.</param>
        /// <param name="updated_at_max">Count checkouts last updated before the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        /// <param name="updated_at_min">Count checkouts last updated after the specified date. (format: 2014-04-25T16:15:47-04:00)</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("checkouts.json")]
        public abstract System.Threading.Tasks.Task CountCheckouts([Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? created_at_min = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_max = null, [Microsoft.AspNetCore.Mvc.FromQuery] System.DateTimeOffset? updated_at_min = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record AbandonedcheckoutsOrig
    {
        /// <summary>
        /// The recovery URL that's sent to a customer so they can recover their checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("abandoned_checkout_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AbandonedCheckoutUrl { get; set; } = default!;

        /// <summary>
        /// The mailing address associated with the payment method. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the billing address. 
        /// *   **address2**: An optional additional field for the street address of the billing address. 
        /// *   **city**: The city of the billing address. 
        /// *   **company**: The company of the person associated with the billing address. 
        /// *   **country**: The name of the country of the billing address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)) for the country of the billing address. 
        /// *   **default**: Whether this is the default address for the customer. 
        /// *   **first_name**: The first name of the person associated with the payment method. 
        /// *   **last_name**: The last name of the person associated with the payment method. 
        /// *   **latitude**: The latitude of the billing address. 
        /// *   **longitude**: The longitude of the billing address. 
        /// *   **name**: The full name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the billing address. 
        /// *   **province**: The name of the state or province of the billing address. 
        /// *   **province_code**: The two-letter abbreviation of the state or province of the billing address. 
        /// *   **zip**: The zip or postal code of the billing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillingAddress { get; set; } = default!;

        /// <summary>
        /// Whether the customer would like to receive email updates from the shop. This is set by the **I want to receive occasional emails about new products, promotions and other news** checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// Whether the customer would like to receive SMS updates from the shop. This is set by the **Text me with news and offers** checkbox during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_sms_marketing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuyerAcceptsSmsMarketing { get; set; } = default!;

        /// <summary>
        /// The ID for the cart that's attached to the checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cart_token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CartToken { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601 format](//en.wikipedia.org/wiki/ISO_8601)) when the checkout was closed. If the checkout was not closed, then this value is `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ClosedAt { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601 format](//en.wikipedia.org/wiki/ISO_8601)) when the checkout was completed. For abandoned checkouts, this value is `null` until a customer completes the checkout using the recovery URL.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? CompletedAt { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) of the shop's default currency at the time of checkout. For the currency that the customer used at checkout, see `presentment_currency`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The customer details associated with the abandoned checkout. For more information, refer to the [Customer](/api/admin-rest/latest/resources/customer) resource.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Customer { get; set; } = default!;

        /// <summary>
        /// The two or three-letter language code, optionally followed by a region modifier. Example values: `en`, `en-CA`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_locale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CustomerLocale { get; set; } = default!;

        /// <summary>
        /// The ID of the Shopify POS device that created the checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// Discount codes applied to the checkout. Returns an empty array when no codes are applied. 
        ///  Each discount code has the following fields: 
        /// 
        /// *   **amount**: The amount of the discount in presentment currency. 
        /// *   **code**: The discount code. 
        /// *   **type**: The type of discount. Valid values: `percentage`, `shipping`, `fixed_amount`. (default: `fixed_amount`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_codes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DiscountCodes { get; set; } = default!;

        /// <summary>
        /// The customer's email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The payment gateway used by the checkout. For abandoned checkouts, this value is always `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Gateway { get; set; } = default!;

        /// <summary>
        /// The URL for the page where the customer entered the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landing_site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LandingSite { get; set; } = default!;

        /// <summary>
        /// A list of line items, each containing information about an item in the checkout. Each object has the following properties: 
        /// 
        /// *   **fulfillment_service**: The fulfillment service provider for the item. 
        /// *   **fulfillment_status**: The status of the item's fulfillment. Valid values: `fulfilled`, `null`, `partial`. 
        /// *   **grams**: The weight of the item in grams. 
        /// *   **price**: The price of the item in presentment currency. 
        /// *   **product_id**: The product ID od the item. 
        /// *   **quantity**: The number of products that were purchased. 
        /// *   **requires_shipping**: Whether the items requires shipping.. 
        /// *   **sku**: A unique identifier for the item in the shop. 
        /// *   **title**: The title of the product. 
        /// *   **variant_id**: The product variant ID of item. 
        /// *   **variant_title**: The title of the product variant. 
        /// *   **vendor**: The name of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LineItems { get; set; } = default!;

        /// <summary>
        /// The ID of the physical location where the checkout was processed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// The text of an optional note that a shop owner can attach to the order.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        /// <summary>
        /// The customer's phone number for receiving SMS notifications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) of the currency that the customer used at checkout. For the shop's default currency, see `currency`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PresentmentCurrency { get; set; } = default!;

        /// <summary>
        /// The website that referred the customer to the shop.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("referring_site")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferringSite { get; set; } = default!;

        /// <summary>
        /// The mailing address where the order will be shipped to. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the shipping address. 
        /// *   **address2**: An optional additional field for the street address of the shipping address. 
        /// *   **city**: The city of the shipping address. 
        /// *   **company**: The company of the person associated with the shipping address. 
        /// *   **country**: The name of the country of the shipping address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the shipping address. 
        /// *   **first_name**: The first name of the person associated with the shipping address. 
        /// *   **last_name**: The last name of the person associated with the shipping address. 
        /// *   **latitude**: The latitude of the shipping address. 
        /// *   **longitude**: The longitude of the shipping address. 
        /// *   **name**: The full name of the person associated with the shipping address. 
        /// *   **phone**: The phone number at the shipping address. 
        /// *   **province**: The name of the state or province of the shipping address. 
        /// *   **province_code**: The two-letter abbreviation of the state or province of the shipping address. 
        /// *   **zip**: The zip or postal code of the shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// The phone number used to opt in to SMS marketing during checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sms_marketing_phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SmsMarketingPhone { get; set; } = default!;

        /// <summary>
        /// Information about the chosen shipping method. It has the following properties: 
        /// 
        /// *   **code**: A reference to the shipping method. 
        /// *   **price**: The price of the shipping method in presentment currency. 
        /// *   **source**: The channel where the checkout originated. Example value: `shopify`. 
        /// *   **title**: The title of the shipping method. Example value: `International Shipping`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingLines { get; set; } = default!;

        /// <summary>
        /// Where the checkout originated. Valid values: `web`, `pos`, `iphone`, `android`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The price of the checkout in presentment currency before shipping and taxes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of tax line objects, each of which details a tax applicable to the checkout. Each object has the following properties: 
        /// 
        /// *   **price**: The amount of tax to be charged in presentment currency. 
        /// *   **rate**: The rate of tax to be applied. 
        /// *   **title**: The name of the tax. 
        /// *   **channel_liable**: Whether the channel that submitted the tax line is liable for remitting. A value of `null` indicates unknown liability for the tax line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TaxLines { get; set; } = default!;

        /// <summary>
        /// Whether taxes are included in the price.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// A unique ID for a checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The total amount of discounts to be applied in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_discounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalDiscounts { get; set; } = default!;

        /// <summary>
        /// The total duties of the checkout in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_duties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalDuties { get; set; } = default!;

        /// <summary>
        /// The sum of the prices of all line items in the checkout in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_line_items_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalLineItemsPrice { get; set; } = default!;

        /// <summary>
        /// The sum of line item prices, all discounts, shipping costs, and taxes for the checkout in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the checkout in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The sum of all the weights in grams of the line items in the checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_weight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalWeight { get; set; } = default!;

        /// <summary>
        /// The ID of the user who created the checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UserId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603