//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ITransactionController
    {

        /// <summary>
        /// Retrieves a list of transactions
        /// </summary>


        /// <param name="fields">Show only certain fields, specifed by a comma-separated list of fields names.</param>

        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>

        /// <param name="since_id">Retrieve only transactions after the specified ID.</param>

        /// <returns>Retrieves a list of transactions</returns>

        System.Threading.Tasks.Task RetrieveListOfTransactionsAsync(string order_id, string? fields, string in_shop_currency, string? since_id);

        /// <summary>
        /// Creates a transaction for an order
        /// </summary>


        /// <param name="source">An optional origin of the transaction. Set to &lt;code&gt;external&lt;/code&gt; to import a cash transaction for the associated order.</param>

        /// <returns>Creates a transaction for an order</returns>

        System.Threading.Tasks.Task CreateTransactionForOrderAsync(string order_id, string? source);

        /// <summary>
        /// Retrieves a count of an order's transactions
        /// </summary>


        /// <returns>Retrieves a count of an order's transactions</returns>

        System.Threading.Tasks.Task RetrieveCountOfOrdersTransactionsAsync(string order_id);

        /// <summary>
        /// Retrieves a specific transaction
        /// </summary>


        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>

        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>

        /// <returns>Retrieves a specific transaction</returns>

        System.Threading.Tasks.Task RetrieveSpecificTransactionAsync(string order_id, string transaction_id, string? fields, string in_shop_currency);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class TransactionController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ITransactionController _implementation;

        public TransactionController(ITransactionController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Retrieves a list of transactions
        /// </summary>
        /// <param name="fields">Show only certain fields, specifed by a comma-separated list of fields names.</param>
        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>
        /// <param name="since_id">Retrieve only transactions after the specified ID.</param>
        /// <returns>Retrieves a list of transactions</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions.json")]
        public System.Threading.Tasks.Task RetrieveListOfTransactions(string order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] string? in_shop_currency, [Microsoft.AspNetCore.Mvc.FromQuery] string? since_id)
        {

            return _implementation.RetrieveListOfTransactionsAsync(order_id, fields, in_shop_currency ?? "false", since_id);
        }

        /// <summary>
        /// Creates a transaction for an order
        /// </summary>
        /// <param name="source">An optional origin of the transaction. Set to &lt;code&gt;external&lt;/code&gt; to import a cash transaction for the associated order.</param>
        /// <returns>Creates a transaction for an order</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions.json")]
        public System.Threading.Tasks.Task CreateTransactionForOrder(string order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? source)
        {

            return _implementation.CreateTransactionForOrderAsync(order_id, source);
        }

        /// <summary>
        /// Retrieves a count of an order's transactions
        /// </summary>
        /// <returns>Retrieves a count of an order's transactions</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions/count.json")]
        public System.Threading.Tasks.Task RetrieveCountOfOrdersTransactions(string order_id)
        {

            return _implementation.RetrieveCountOfOrdersTransactionsAsync(order_id);
        }

        /// <summary>
        /// Retrieves a specific transaction
        /// </summary>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>
        /// <returns>Retrieves a specific transaction</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions/{transaction_id}.json")]
        public System.Threading.Tasks.Task RetrieveSpecificTransaction(string order_id, string transaction_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields, [Microsoft.AspNetCore.Mvc.FromQuery] string? in_shop_currency)
        {

            return _implementation.RetrieveSpecificTransactionAsync(order_id, transaction_id, fields, in_shop_currency ?? "false");
        }

    }

    


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603