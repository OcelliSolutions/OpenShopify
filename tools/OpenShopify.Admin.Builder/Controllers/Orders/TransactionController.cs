//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransactionControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves a list of transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of transactions.
        /// 
        /// Transactions attached to multi-currency orders are in the presentment currency by default. To retrieve transactions in the shop currency, include the URL parameter `in_shop_currency=true`.
        /// </remarks>
        /// <param name="fields">Show only certain fields, specifed by a comma-separated list of fields names.</param>
        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>
        /// <param name="since_id">Retrieve only transactions after the specified ID.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions.json")]
        public abstract System.Threading.Tasks.Task ListTransactions(long order_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] bool? in_shop_currency = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null);

        /// <summary>
        /// Creates a transaction for an order
        /// </summary>
        /// <remarks>
        /// &lt;aside class="note caution"&gt; 
        /// 
        /// #### Caution
        /// 
        /// For multi-currency orders, the `currency` property is required when creating refund and capture transactions. The value should be the presentment currency from the order. For more information, refer to the [*Transaction resource*](/api/admin-rest/latest/resources/transaction).
        /// &lt;/aside&gt; 
        /// 
        /// Creates a transaction for an order.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions.json")]
        public abstract System.Threading.Tasks.Task CreateTransactionForOrder([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateTransactionForOrderRequest request, long order_id);

        /// <summary>
        /// Retrieves a count of an order's transactions
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions/count.json")]
        public abstract System.Threading.Tasks.Task CountOrdersTransactions(long? order_id = null);

        /// <summary>
        /// Retrieves a specific transaction
        /// </summary>
        /// <remarks>
        /// Retrieves a specific transaction.
        /// 
        /// Transactions attached to multi-currency orders are in the presentment currency by default. To retrieve transactions in the shop currency, include the URL parameter `in_shop_currency=true`.
        /// 
        /// `extended_authorization_attributes` are available on this endpoint only to stores on the [Shopify Plus](https://www.shopify.com/plus?shpxid=72e62d60-101E-4719-442C-5B4B3876EBD9) plan that use Shopify Payments. To learn more about extended authorization periods, refer to [Payment authorization](https://help.shopify.com/en/manual/payments/payment-authorization).
        /// </remarks>
        /// <param name="fields">Show only certain fields, specified by a comma-separated list of field names.</param>
        /// <param name="in_shop_currency">Show amounts in the shop currency.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("orders/{order_id}/transactions/{transaction_id}.json")]
        public abstract System.Threading.Tasks.Task GetTransaction(long order_id, long transaction_id, [Microsoft.AspNetCore.Mvc.FromQuery] string? fields = null, [Microsoft.AspNetCore.Mvc.FromQuery] bool? in_shop_currency = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"authorization")]
        Authorization = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"capture")]
        Capture = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sale")]
        Sale = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"void")]
        Void = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"refund")]
        Refund = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionPaymentsRefundAttributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"status")]
        Status = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"acquirer_reference_number")]
        AcquirerReferenceNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"payments_refund_attributes")]
        PaymentsRefundAttributes = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"refund")]
        Refund = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"void")]
        Void = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"failure")]
        Failure = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"success")]
        Success = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TransactionOrig
    {
        /// <summary>
        /// The amount of money included in the transaction. If you don't provide a value for `amount`, then it defaults to the total cost of the order (even if a previous transaction has been made towards it).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The authorization code associated with the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorization")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Authorization { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the Shopify Payments authorization expires.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorization_expires_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AuthorizationExpiresAt { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for the currency used for the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The ID for the device.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("device_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeviceId { get; set; } = default!;

        /// <summary>
        /// A standardized error code, independent of the payment provider. Valid values: 
        /// 
        /// *   **incorrect_number** 
        /// *   **invalid_number** 
        /// *   **invalid_expiry_date** 
        /// *   **invalid_cvc** 
        /// *   **expired_card** 
        /// *   **incorrect_cvc** 
        /// *   **incorrect_zip** 
        /// *   **incorrect_address** 
        /// *   **card_declined** 
        /// *   **processing_error** 
        /// *   **call_issuer** 
        /// *   **pick_up_card**
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ErrorCode { get; set; } = default!;

        /// <summary>
        /// The attributes associated with a Shopify Payments extended authorization period. It has the following attributes: 
        /// 
        /// *   **standard_authorization_expires_at**: The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the standard authorization period expires. After expiry, an extended authorization fee is applied upon capturing the payment. 
        /// *   **extended_authorization_expires_at**: The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the extended authorization period expires. After expiry, the merchant can't capture the payment. 
        /// 
        ///  `extended_authorization_attributes` are available on the **Retrieve a specific transaction for an order** endpoint only if the following criteria applies: 
        /// 
        /// *   The store is on a [Shopify Plus](https://www.shopify.com/plus?shpxid=72e62d60-101E-4719-442C-5B4B3876EBD9) plan. 
        /// *   The store uses Shopify Payments. 
        /// *   The transaction being retrieved is an extended authorization, which is determined by the `capture_before` date in the charge. 
        /// 
        ///  If the criteria isn't met, then an empty JSON is returned for `extended_authorization_attributes`. To learn more about extended authorization periods, refer to [Payment authorization](https://help.shopify.com/en/manual/payments/payment-authorization).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("extended_authorization_attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExtendedAuthorizationAttributes { get; set; } = default!;

        /// <summary>
        /// The name of the gateway the transaction was issued through. A list of gateways can be found on Shopify's [payment gateways page](//www.shopify.com/payment-gateways).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gateway")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Gateway { get; set; } = default!;

        /// <summary>
        /// The transaction's type. Valid values: 
        /// 
        /// *   **authorization**: Money that the customer has agreed to pay. The authorization period can be between 7 and 30 days (depending on your payment service) while a store waits for a payment to be captured. 
        /// *   **capture**: A transfer of money that was reserved during the authorization of a shop. 
        /// *   **sale**: The authorization and capture of a payment performed in one single step. 
        /// *   **void**: The cancellation of a pending authorization or capture. 
        /// *   **refund**: The partial or full return of captured money to the customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Kind { get; set; } = default!;

        /// <summary>
        /// The ID of the physical location where the transaction was processed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("location_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? LocationId { get; set; } = default!;

        /// <summary>
        /// A string generated by the payment provider with additional information about why the transaction succeeded or failed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Message { get; set; } = default!;

        /// <summary>
        /// The ID for the order that the transaction is associated with.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? OrderId { get; set; } = default!;

        /// <summary>
        /// Information about the credit card used for this transaction. It has the following attributes: 
        /// 
        /// *   **credit_card_bin**: The [issuer identification number](https://en.wikipedia.org/wiki/ISO/IEC_7812) (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number. 
        /// *   **avs_result_code**: The response code from the [address verification system](https://en.wikipedia.org/wiki/Address_Verification_System). The code is always a single letter. Refer to [this chart](http://www.emsecommerce.net/avs_cvv2_response_codes.htm) for the codes and their definitions. 
        /// *   **cvv_result_code**: The response code from the credit card company indicating whether the customer entered the [card security code](https://en.wikipedia.org/wiki/Card_Security_Code), or card verification value, correctly. The code is a single letter or empty string; see [this chart](http://www.emsecommerce.net/avs_cvv2_response_codes.htm) for the codes and their definitions. 
        /// *   **credit_card_number**: The customer's credit card number, with most of the leading digits redacted. 
        /// *   **credit_card_company**: The name of the company that issued the customer's credit card.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_details")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PaymentDetails { get; set; } = default!;

        /// <summary>
        /// The ID of an associated transaction. 
        /// 
        /// *   For `capture` transactions, the parent needs to be an `authorization` transaction. 
        /// *   For `void` transactions, the parent needs to be an `authorization` transaction. 
        /// *   For `refund` transactions, the parent needs to be a `capture` or `sale` transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parent_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ParentId { get; set; } = default!;

        /// <summary>
        /// The attributes associated with a Shopify Payments refund. It has the following attributes: 
        /// 
        /// *   **status**: The current status of the refund. Valid values: `pending`, `failure`, `success`, and `error`. 
        /// *   **acquirer_reference_number**: A unique number associated with the transaction that can be used to track the refund. This property has a value only for transactions completed with Visa or Mastercard. 
        /// 
        ///  `payments_refund_attributes` are available on any JSON serialization of the order transaction only if the following criteria apply: 
        /// 
        /// *   The store is on a [Shopify Plus](https://www.shopify.com/plus?shpxid=72e62d60-101E-4719-442C-5B4B3876EBD9) plan. 
        /// *   The store uses Shopify Payments. 
        /// *   The order transaction **kind** is either `refund` or `void`. 
        /// 
        ///  If the criteria isn't met, then the `payments_refund_attributes` property is omitted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments_refund_attributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PaymentsRefundAttributes { get; set; } = default!;

        /// <summary>
        /// The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when a transaction was processed. This value is the date that's used in the analytic reports. By default, it matches the `created_at` value. If you're importing transactions from an app or another platform, then you can set `processed_at` to a date and time in the past to match when the original transaction was processed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        /// <summary>
        /// A transaction receipt attached to the transaction by the gateway. The value of this field depends on which gateway the shop is using.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receipt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Receipt { get; set; } = default!;

        /// <summary>
        /// The origin of the transaction. This is set by Shopify and can't be overridden. Example values (not an exhaustive list): `web`, `pos`, `iphone`, and `android`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The status of the transaction. Valid values: `pending`, `failure`, `success`, and `error`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Status { get; set; } = default!;

        /// <summary>
        /// Whether the transaction is a test transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// The ID for the user who was logged into the Shopify POS device when the order was processed, if applicable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// An adjustment on the transaction showing the amount lost or gained due to fluctuations in the currency exchange rate. It has the following attributes: 
        /// 
        /// *   **ID**: The ID of the adjustment. 
        /// *   **adjustment**: The difference between the amounts on the associated transaction and the parent transaction. 
        /// *   **original_amount**: The amount of the parent transaction in the shop currency. 
        /// *   **final_amount**: The amount of the associated transaction in the shop currency. 
        /// *   **currency**: The shop currency. 
        /// 
        ///  Requires the header `X-Shopify-Api-Features = include-currency-exchange-adjustments`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency_exchange_adjustment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrencyExchangeAdjustment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603