//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class CheckoutControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Creates a checkout
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("checkouts.json")]
        public abstract System.Threading.Tasks.Task CreateCheckout([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CreateCheckoutRequest request);

        /// <summary>
        /// Completes a checkout
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("checkouts/{token}/complete.json")]
        public abstract System.Threading.Tasks.Task CompleteCheckout([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.CompleteCheckoutRequest request, string token);

        /// <summary>
        /// Retrieves a checkout
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("checkouts/{token}.json")]
        public abstract System.Threading.Tasks.Task GetCheckout(string token);

        /// <summary>
        /// Modifies an existing checkout
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("checkouts/{token}.json")]
        public abstract System.Threading.Tasks.Task UpdateCheckout([System.ComponentModel.DataAnnotations.Required] OpenShopify.Admin.Builder.Models.UpdateCheckoutRequest request, string token);

        /// <summary>
        /// Retrieves a list of shipping rates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of available shipping rates for the specified checkout. Implementers need to poll this endpoint until rates become available. Each shipping rate contains the checkout's new subtotal price, total tax, and total price in the event that this shipping rate is selected. This can be used to update the UI without performing further API requests.&lt;/p&gt; To apply a shipping rate, update the checkout's shipping line with the handle of the selected rate.
        /// </remarks>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("checkouts/{token}/shipping_rates.json")]
        public abstract System.Threading.Tasks.Task ListShippingRates(string token);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CheckoutAppliedDiscount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"amount")]
        Amount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"value")]
        Value = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"value_type")]
        ValueType = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"non_applicable_reason")]
        NonApplicableReason = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"applicable")]
        Applicable = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"application_type")]
        ApplicationType = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"discount_code")]
        DiscountCode = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"script")]
        Script = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CheckoutOrig
    {
        /// <summary>
        /// A cart-level discount applied to the checkout. Apply a discount by specifying values for `amount`, `title`, `description`, `value`, and `value_type`. 
        /// 
        /// *   **amount**: The amount that is deducted from `payment_due` in presentment currency. 
        /// *   **title**: The title to categorize the applied discount. 
        /// *   **description**: The description of the applied discount.  
        /// *   **value**: The value that was used to calculate the final applied discount amount. 
        /// *   **value_type**: The type of value that was used to calculate the final applied discount amount. Valid values: `fixed_amount` and `percentage`. 
        /// *   **non_applicable_reason**: The reason why the discount is not applicable, if the discount cannot be applied to the checkout. 
        /// *   **applicable**: Whether this discount code can be applied to the checkout. 
        /// *   **application_type**: Describes how the discount was applied to the checkout. Possible values: 
        /// 
        ///     *   **automatic**: The discount [was applied automatically](/api/examples/discounts#creating-automatic-discounts). 
        ///     *   **discount_code**: The merchant or customer entered a [discount code](/api/examples/discounts#creating-code-discounts). 
        ///     *   **manual**: The discount was applied manually by the merchant or an app. 
        ///     *   **script**: The discount was applied by a [Shopify Script](https://help.shopify.com/en/manual/checkout-settings/script-editor).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("applied_discount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AppliedDiscount { get; set; } = default!;

        /// <summary>
        /// The mailing address associated with the payment method. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the billing address. 
        /// *   **address2**: An optional additional field for the street address of the billing address. 
        /// *   **city**: The city, town, or village of the billing address. 
        /// *   **company**: The company of the person associated with the billing address. 
        /// *   **country**: The name of the country of the billing address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1 alpha-2](//en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the billing address. 
        /// *   **first_name**: The first name of the person associated with the payment method. 
        /// *   **last_name**: The last name of the person associated with the payment method. 
        /// *   **phone**: The phone number at the billing address. 
        /// *   **province**: The name of the region (province, state, prefecture, …) of the billing address. 
        /// *   **province_code**: The two-letter abbreviation of the region of the billing address. 
        /// *   **zip**: The postal code (zip, postcode, Eircode, …) of the billing address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("billing_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BillingAddress { get; set; } = default!;

        /// <summary>
        /// Whether the customer has consented to receive marketing material via email.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buyer_accepts_marketing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuyerAcceptsMarketing { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) of the shop's default currency at the time of checkout. For the currency that the customer used at checkout, see `presentment_currency`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The ID of the customer associated with this checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? CustomerId { get; set; } = default!;

        /// <summary>
        /// The discount code that is applied to the checkout. This populates `applied_discount` with the appropriate metadata for that discount code. To remove a discount code, send an empty string or `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount_code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DiscountCode { get; set; } = default!;

        /// <summary>
        /// The customer's email address. A checkout needs to have a value for `email` or `phone` before it can be completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Email { get; set; } = default!;

        /// <summary>
        /// A list of gift card objects, each containing information about a gift card applied to this checkout. Gift cards can be applied to a checkout by passing `{ "checkout": { "gift_cards": [{ "code": "a gift card code" }, { "code": "another gift card code" }] } }`. Each gift card object has the following properties: 
        /// 
        /// *   **amount_used**: The amount of the gift card used by this checkout in presentment currency. 
        /// *   **code**: The gift card code. 
        /// *   **balance**: The amount left on the gift card after being applied to this checkout in presentment currency. 
        /// *   **id**: The ID for the applied gift card. 
        /// *   **last_characters**: The last four characters of the applied gift card for display back to the user. 
        /// 
        ///  Updating the gift card list overwrites any previous list already defined in the checkout. To remove a gift card from the list of applied gift cards, re-apply the `gift_cards` array without that gift card.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gift_cards")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GiftCards { get; set; } = default!;

        /// <summary>
        /// A list of line item objects, each containing information about an item in the checkout. Each line item object has the following properties: 
        /// 
        /// *   **applied_discounts**: A list of the discounts applied to the line item. 
        /// *   **compare_at_price**: The original selling price of the product, if applicable. 
        /// *   **discount_allocations**: A list all discounts on the checkout that target this line item, including both "across" and "each" applications. A superset of `applied_discounts`. 
        /// *   **fulfillment_service**: If the variant is a gift card, allows to override the fulfillment service so the gift card can be activated with a custom code. Valid values: `manual`. 
        /// *   **grams**: The weight of the item in grams. 
        /// *   **id**: The checkout-specific ID of the line item. 
        /// *   **line_price**: The line price of the item, based on `price` multiplied by `quantity`. 
        /// *   **price**: The price of the item in presentment currency. 
        /// *   **product_id**: The product of the line item. 
        /// *   **properties**: The [customization information](/docs/liquid/reference/objects/line_item#line_item-properties) for a line item (optional). 
        /// *   **quantity**: The number of products that were purchased. 
        /// *   **requires_shipping**: Whether the fulfillment requires shipping. 
        /// *   **sku**: The unique identifier of the item in the fulfillment. 
        /// *   **taxable**: Whether this product is taxable. 
        /// *   **title**: The title of the product. 
        /// *   **variant_id**: The variant ID of the line item. 
        /// *   **variant_title**: The title of the product variant. 
        /// *   **vendor**: The name of the item's supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("line_items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LineItems { get; set; } = default!;

        /// <summary>
        /// An object containing the ID, name, and status page URL of the associated order when the checkout is complete. Default value: `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Order { get; set; } = default!;

        /// <summary>
        /// The amount left to be paid in presentment currency. This is equal to the sum of the checkout line prices, taxes, and shipping minus discounts and gift cards.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_due")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PaymentDue { get; set; } = default!;

        /// <summary>
        /// The URL that must be used to store credit cards in Shopify's card vault. These URLs are subject to change, so you should always use the one supplied here. The general pattern for the URLs is `https://elb.deposit.shopifycs.com/sessions`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payment_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PaymentUrl { get; set; } = default!;

        /// <summary>
        /// The customer's phone number for receiving SMS notifications. A checkout needs to have a value for `email` or `phone` before it can be completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Phone { get; set; } = default!;

        /// <summary>
        /// The three-letter code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format) for the currency that the customer used for payment at checkout. For the shop's default currency, see `currency`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("presentment_currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PresentmentCurrency { get; set; } = default!;

        /// <summary>
        /// Whether the checkout requires shipping. If `true`, then `shipping_line` must be set before creating a payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requires_shipping")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? RequiresShipping { get; set; } = default!;

        /// <summary>
        /// The reservation time in seconds for the line item products. Default value: `null`. This property is not writable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reservation_time")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public string? ReservationTime { get; set; } = default!;

        /// <summary>
        /// The time in seconds that the line item products will be held. Default value: `0`. This property is not writable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reservation_time_left")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Obsolete]
        public string? ReservationTimeLeft { get; set; } = default!;

        /// <summary>
        /// The mailing address to where the checkout will be shipped. It has the following properties: 
        /// 
        /// *   **address1**: The street address of the shipping address. 
        /// *   **address2**: An optional additional field for the street address of the shipping address. 
        /// *   **city**: The city, town, or village of the shipping address. 
        /// *   **company**: The company of the person associated with the shipping address. 
        /// *   **country**: The name of the country of the shipping address. 
        /// *   **country_code**: The two-letter code ([ISO 3166-1 alpha-2](//en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the shipping address. 
        /// *   **first_name**: The first name of the person associated with the shipping address. 
        /// *   **last_name**: The last name of the person associated with the shipping address. 
        /// *   **phone**: The phone number at the shipping address. 
        /// *   **province**: The name of the region (province, state, prefecture, …) of the shipping address. 
        /// *   **province_code**: The two-letter abbreviation of the region of the shipping address. 
        /// *   **zip**: The postal code (zip, postcode, Eircode, …) of the shipping address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingAddress { get; set; } = default!;

        /// <summary>
        /// The selected shipping rate. A new shipping rate can be selected by updating the value for `handle`. A shipping line is required when `requires_shipping` is `true`. Learn more about [selecting shipping rates](#shipping_rates).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_line")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingLine { get; set; } = default!;

        /// <summary>
        /// The selected shipping rate. This property is not writable.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shipping_rate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ShippingRate { get; set; } = default!;

        /// <summary>
        /// The source of the checkout. To use this field for sales attribution, you must register the channels that your app is managing. You can register the channels that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link). After you've submited your request, you need to wait for your request to be processed by Shopify. You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension. You can specify a handle as the `source_name` value in your request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceName { get; set; } = default!;

        /// <summary>
        /// The ID of the order placed on the originating platform.This value doesn't correspond to the Shopify ID that's generated from a completed draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_identifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceIdentifier { get; set; } = default!;

        /// <summary>
        /// A valid URL to the original order on the originating surface.This URL is displayed to merchants on the Order Details page.If the URL is invalid, then it won't be displayed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceUrl { get; set; } = default!;

        /// <summary>
        /// The price of the checkout in presentment currency before shipping, taxes, and tips.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subtotal_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? SubtotalPrice { get; set; } = default!;

        /// <summary>
        /// An array of `tax_line` objects, each of which represents a tax rate applicable to the checkout. Each tax line object has the following properties: 
        /// 
        /// *   **price**: The amount of tax to be charged in presentment currency. 
        /// *   **rate**: The rate of tax to be applied. 
        /// *   **title**: The name of the tax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tax_lines")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TaxLines { get; set; } = default!;

        /// <summary>
        /// Whether taxes are included in the subtotal price.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("taxes_included")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? TaxesIncluded { get; set; } = default!;

        /// <summary>
        /// A unique identifier for a particular checkout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("token")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Token { get; set; } = default!;

        /// <summary>
        /// The sum of the the checkout line prices, taxes, shipping costs, tips, and discounts in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalPrice { get; set; } = default!;

        /// <summary>
        /// The sum of all the taxes applied to the checkout in presentment currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_tax")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? TotalTax { get; set; } = default!;

        /// <summary>
        /// The ID of the user who created the checkout. This value is passed to the order. Default value: `null`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("user_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UserId { get; set; } = default!;

        /// <summary>
        /// The URL pointing to the checkout accessible from the web.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("web_url")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? WebUrl { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603