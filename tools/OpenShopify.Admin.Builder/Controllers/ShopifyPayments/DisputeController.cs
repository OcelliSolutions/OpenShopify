//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class DisputeControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Return a list of all disputes
        /// </summary>
        /// <param name="initiated_at">Return only disputes with the specified &lt;code&gt;initiated_at&lt;/code&gt; date (&lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; format).</param>
        /// <param name="last_id">Return only disputes before the specified ID.</param>
        /// <param name="since_id">Return only disputes after the specified ID.</param>
        /// <param name="status">Return only disputes with the specified status.</param>
        /// <returns>Return a list of all disputes</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/shopify_payments/disputes.json")]
        public abstract System.Threading.Tasks.Task ReturnListOfAllDisputes([Microsoft.AspNetCore.Mvc.FromQuery] string? initiated_at = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? last_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? status = null);

        /// <summary>
        /// Return a single dispute
        /// </summary>
        /// <returns>Return a single dispute</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("admin/api/{api_version}/shopify_payments/disputes/{dispute_id}.json")]
        public abstract System.Threading.Tasks.Task ReturnSingleDispute(string dispute_id);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dispute
    {
        /// <summary>
        /// The ID of the dispute.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The ID of the order that the dispute belongs to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order_id")]
        public string? Order_id { get; set; } = default!;

        /// <summary>
        /// Whether the dispute is still in the inquiry phase or has turned into a chargeback.
        /// <br/> Valid values:
        /// <br/> 
        /// <br/> inquiry: The dispute is in the inquiry phase.
        /// <br/> chargeback: The dispute has turned into a chargeback.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The ISO 4217 currency code of the dispute amount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The total amount disputed by the cardholder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string? Amount { get; set; } = default!;

        /// <summary>
        /// The reason of the dispute provided by the cardholder's bank. Valid values:
        /// <br/> 
        /// <br/> bank_not_process: The customer's bank cannot process the charge.
        /// <br/> 
        /// <br/> credit_not_processed: The customer claims that the purchased product was returned
        /// <br/> or the transaction was otherwise canceled, but the merchant have not yet provided a refund or credit.
        /// <br/> 
        /// <br/> 
        /// <br/> customer_initiated: The customer initiated the dispute, so the merchant should contact
        /// <br/> the customer for additional details to find out why the payment was disputed.
        /// <br/> 
        /// <br/> 
        /// <br/> debit_not_authorized: The customer's bank cannot proceed with the debit
        /// <br/> since it has not been authorized.
        /// <br/> 
        /// <br/> 
        /// <br/> duplicate: The customer claims they were charged multiple times
        /// <br/> for the same product or service.
        /// <br/> 
        /// <br/> fraudulent: The cardholder claims that they didn't authorize the payment.
        /// <br/> 
        /// <br/> general: The dispute is uncategorized, so the merchant should contact the customer for
        /// <br/> additional details to find out why the payment was disputed.
        /// <br/> 
        /// <br/> 
        /// <br/> incorrect_account_details: The customer account associated with the
        /// <br/> purchase is incorrect.
        /// <br/> 
        /// <br/> insufficient_funds: The customer's bank account has insufficient funds.
        /// <br/> 
        /// <br/> product_not_received: The customer claims they did not receive the products
        /// <br/> or services purchased.
        /// <br/> 
        /// <br/> 
        /// <br/> product_unacceptable: The product or service was received but was defective,
        /// <br/> damaged, or not as described.
        /// <br/> 
        /// <br/> 
        /// <br/> subscription_canceled: The customer claims that the merchant continued to charge them
        /// <br/> after a subscription was canceled.
        /// <br/> 
        /// <br/> 
        /// <br/> unrecognized: The customer doesn't recognize the payment appearing on
        /// <br/> their card statement.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        /// <summary>
        /// The reason for the dispute provided by the cardholder's bank.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_reason_code")]
        public string? Network_reason_code { get; set; } = default!;

        /// <summary>
        /// The current state of the dispute. Valid values:
        /// <br/> 
        /// <br/> needs_response: The dispute has been open and needs an evidence submission.
        /// <br/> 
        /// <br/> under_review: The evidence has been submitted and is being reviewed by the
        /// <br/> cardholder's bank.
        /// <br/> 
        /// <br/> charge_refunded: The merchant refunded the inquiry amount.
        /// <br/> accepted: The merchant has accepted the dispute as being valid.
        /// <br/> won: The cardholder's bank reached a final decision in the merchant's favor.
        /// <br/> lost: The cardholder's bank reached a final decision in the buyer's favor.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The deadline for evidence submission.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evidence_due_by")]
        public string? Evidence_due_by { get; set; } = default!;

        /// <summary>
        /// "The date and time (ISO 8601 format) when
        /// <br/> evidence was sent. Returns null if evidence has not yet been sent.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evidence_sent_on")]
        public string? Evidence_sent_on { get; set; } = default!;

        /// <summary>
        /// The date and time (ISO 8601 format) when
        /// <br/> this dispute was resolved. Returns null if the dispute is not yet resolved.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("finalized_on")]
        public string? Finalized_on { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603