//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace OpenShopify.Admin.Builder.Models
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TransactionsControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Return a list of all balance transactions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all balance transactions ordered by processingtime, with the most recent being first.**Note:** As of version 2019-10, this endpoint implements pagination by using links that are provided in the response header. Sending the `page` parameter will return an error. To learn more, see [*Make paginated requests to the REST Admin API*](/api/usage/pagination-rest).
        /// </remarks>
        /// <param name="payout_id">Filter response to transactions paid out in the specified payout.</param>
        /// <param name="last_id">Filter response to transactions exclusively before the specified ID</param>
        /// <param name="payout_status">Filter response to transactions with the specified payout status</param>
        /// <param name="since_id">Filter response to transactions exclusively after the specified ID.</param>
        /// <param name="test">Filter response to transactions placed in test mode.</param>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("shopify_payments/balance/transactions.json")]
        public abstract System.Threading.Tasks.Task ListBalanceTransactions([Microsoft.AspNetCore.Mvc.FromQuery] long payout_id, [Microsoft.AspNetCore.Mvc.FromQuery] long? last_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] string? payout_status = null, [Microsoft.AspNetCore.Mvc.FromQuery] long? since_id = null, [Microsoft.AspNetCore.Mvc.FromQuery] bool? test = null);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TransactionsOrig
    {
        /// <summary>
        /// The type of the balance transaction. The value will be one of the following: 
        /// 
        /// *   charge 
        /// *   refund 
        /// *   dispute 
        /// *   reserve 
        /// *   adjustment 
        /// *   credit 
        /// *   debit 
        /// *   payout 
        /// *   payout_failure 
        /// *   payout_cancellation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        /// <summary>
        /// If the transaction was created for a test mode Order or payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("test")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Test { get; set; } = default!;

        /// <summary>
        /// The id of the payout the transaction was paid out in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payout_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? PayoutId { get; set; } = default!;

        /// <summary>
        /// The status of the payout the transaction was paid out in, or `pending`if the transaction has not yet been included in a payout.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payout_status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PayoutStatus { get; set; } = default!;

        /// <summary>
        /// The ISO 4217 currency code of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        /// <summary>
        /// The gross amount of the transaction, in a decimal formatted string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? Amount { get; set; } = default!;

        /// <summary>
        /// The total amount of fees deducted from the transaction amount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Fee { get; set; } = default!;

        /// <summary>
        /// The net amount of the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Net { get; set; } = default!;

        /// <summary>
        /// The id of the resource leading to the transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? SourceId { get; set; } = default!;

        /// <summary>
        /// The type of the resource leading to the transaction. 
        /// 
        /// *   charge 
        /// *   refund 
        /// *   dispute 
        /// *   reserve 
        /// *   adjustment 
        /// *   payout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceType { get; set; } = default!;

        /// <summary>
        /// The id of the [Order Transaction](/docs/admin-api/rest/reference/orders/transaction)that resulted in this balance transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_order_transaction_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? SourceOrderTransactionId { get; set; } = default!;

        /// <summary>
        /// The id of the Order that this transaction ultimately originated from.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source_order_id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? SourceOrderId { get; set; } = default!;

        /// <summary>
        /// The time the transaction was processed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("processed_at")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? ProcessedAt { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603